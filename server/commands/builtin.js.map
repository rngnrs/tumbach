{"version":3,"sources":["commands/builtin.js"],"names":["Renderer","IPC","Tools","PostsModel","UsersModel","formatDate","seconds","msecs","Math","floor","SECOND","days","DAY","hours","HOUR","minutes","MINUTE","pad","command","handler","process","exit","options","description","translate","alias","exitCode","send","option","requestPassword","password","notHashpass","prompt","input","ips","ipList","Error","hashpass","toHashpass","addSuperuser","removeSuperuser","targets","type","name","default","message","result","rerender","rerenderPosts","targetsFromString","join","what","list","archive","getRouterPaths","paths","map","path","value","initialize","args","compileTemplates","reloadTemplates","rebuild","rebuildSearchIndex","uptime"],"mappings":"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","file":"commands/builtin.js","sourcesContent":["import Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as IPC from '../helpers/ipc';\nimport * as Tools from '../helpers/tools';\nimport * as PostsModel from '../models/posts';\nimport * as UsersModel from '../models/users';\n\nfunction formatDate(seconds) {\n  let msecs = Math.floor(seconds * Tools.SECOND);\n  let days = Math.floor(msecs / Tools.DAY);\n  let hours = Math.floor((msecs % Tools.DAY) / Tools.HOUR);\n  let minutes = Math.floor((msecs % Tools.HOUR) / Tools.MINUTE);\n  seconds = Math.floor((msecs % Tools.MINUTE) / Tools.SECOND);\n  return `${days} days ${Tools.pad(hours, 2, '0')}:${Tools.pad(minutes, 2, '0')}:${Tools.pad(seconds, 2, '0')}`;\n}\n\nexport default [{\n  command: 'quit',\n  handler: function() {\n    process.exit(0);\n    return 'OK';\n  },\n  options: {\n    description: Tools.translate('Quits the application.'),\n    alias: ['exit', 'q']\n  }\n}, {\n  command: 'respawn [exitCode]',\n  handler: async function({ exitCode } = {}) {\n    await IPC.send('exit', Tools.option(exitCode, 'number', 0), true);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Respawns worker processes with the passed exit code.') }\n}, {\n  command: 'add-superuser',\n  handler: async function() {\n    let { password, notHashpass } = await this.requestPassword();\n    let { input } = await this.prompt(Tools.translate('Enter superuser IP list (separate by spaces): '));\n    let ips = Tools.ipList(input);\n    if (typeof ips === 'string') {\n      throw new Error(ips);\n    }\n    let hashpass = Tools.toHashpass(password, notHashpass);\n    await UsersModel.addSuperuser(hashpass, ips);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Registers a superuser.') }\n}, {\n  command: 'remove-superuser',\n  handler: async function() {\n    let { password, notHashpass } = await this.requestPassword();\n    let hashpass = Tools.toHashpass(password, notHashpass);\n    await UsersModel.removeSuperuser(hashpass);\n    return 'OK';\n  },\n  options: { description: Tools.translate('Unregisters a superuser.') }\n}, {\n  command: 'rerender-posts [targets...]',\n  handler: async function({ targets } = {}) {\n    let result = await this.prompt({\n      type: 'confirm',\n      name: 'rerender',\n      default: true,\n      message: Tools.translate('Are you sure? ')\n    });\n    if (!result.rerender) {\n      return;\n    }\n    await PostsModel.rerenderPosts(Renderer.targetsFromString((targets || []).join(' ')));\n    //TODO: Rerender corresponding pages?\n    return 'OK';\n  },\n  options: {\n    description: Tools.translate('Rerenders posts specified as $[1].\\n'\n      + 'If $[1] is omitted, rerenders all posts on all boards.\\n'\n      + 'Each target is a string in the following form:\\n'\n      + '$[2]', '', '[targets...]', '<board name>[:<post number>[:...]]')\n  }\n}, {\n  command: 'stop',\n  handler: async function() {\n    await IPC.send('stop');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Closes all workers, preventing incoming connections.') }\n}, {\n  command: 'start',\n  handler: async function() {\n    await IPC.send('start');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Opens workers for connections if closed.') }\n}, {\n\n\n  \n  command: 'rerender [what...]',\n  handler: async function({ options, what } = {}) {\n    let { list, archive } = options || {};\n    if (list) {\n      let paths = await Renderer.getRouterPaths(true);\n      return paths.map((path) => {\n        return (typeof path === 'object') ? `${path.path} ${path.description}` : path;\n      }).join('\\n');\n    } else {\n      if (what) {\n        await Renderer.rerender(what);\n      } else if (archive) {\n        await Renderer.rerender();\n      } else {\n        await Renderer.rerender(['**', '!/*/arch/*']);\n      }\n      return 'OK';\n    }\n  },\n  options: {\n    description: Tools.translate(\"Rerenders the cache.\"),\n    options: [{\n      value: '-a, --archive',\n      description: Tools.translate('Rerender archived threads (if no pattern is specified).')\n    }, {\n      value: '-l, --list',\n      description: Tools.translate('Only list available router paths. No rerender.')\n    }]\n  }\n}, {\n  command: 'reload-boards',\n  handler: async function() {\n    Board.initialize();\n    await IPC.send('reloadBoards');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Reloads the boards.') }\n}, {\n  command: 'reload-templates',\n  handler: async function(args) {\n    await Renderer.compileTemplates();\n    await Renderer.reloadTemplates();\n    await IPC.send('reloadTemplates');\n    return 'OK';\n  },\n  options: { description: Tools.translate('Reloads the templates and the partials (including public ones).') }\n}, {\n  command: 'rebuild-search-index [targets...]',\n  handler: async function({ targets } = {}) {\n    let result = await this.prompt({\n      type: 'confirm',\n      name: 'rebuild',\n      default: true,\n      message: Tools.translate('Are you sure? ')\n    });\n    if (!result.rebuild) {\n      return;\n    }\n    await PostsModel.rebuildSearchIndex(Renderer.targetsFromString((targets || []).join(' ')));\n    return 'OK';\n  },\n  options: {\n    description: Tools.translate('Rebuilds post search index of posts specified as $[1].\\n'\n      + 'If $[1] is omitted, rebuilds post search index of all posts on all boards.\\n'\n      + 'Each target is a string in the following form:\\n'\n      + '$[2]', '', '[targets...]', '<board name>[:<post number>[:...]]')\n  }\n}, {\n  command: 'uptime',\n  handler: function() {\n    return formatDate(process.uptime());\n  },\n  options: { description: Tools.translate('Shows server uptime.') }\n}];\n"],"sourceRoot":"/source/"}