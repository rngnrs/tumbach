{"version":3,"sources":["controllers/action-moder.js"],"names":["Files","Tools","ThreadsModel","UsersModel","router","Router","MIN_TIME_OFFSET","MAX_TIME_OFFSET","BAN_EXPIRES_FORMAT","getBans","fields","timeOffset","bans","pick","value","name","test","option","o","reduce","acc","expiresAt","hours","Math","floor","abs","minutes","tz","pad","now","SECOND","boardName","level","reason","postNumber","testPostNumber","post","req","res","next","isModer","Error","translate","parseForm","userIp","correctAddress","ip","banLevels","BAN_LEVELS","slice","each","ban","board","indexOf","getBannedUserBans","oldBans","date","modifiedBanBoards","Set","newBans","boardNames","hasOwnProperty","createdAt","add","levels","getRegisteredUserLevelsByIp","forEach","isSuperuser","compareRegisteredUserLevels","banUser","json","filter","key","length","geolocationInfo","checkUserBan","write","BoardsModel","delall","threadNumber","targetBoardName","password","checkUserPermissions","sha1","moveThread","result","fixed","setThreadFixed","closed","setThreadClosed","unbumpable","setThreadUnbumpable"],"mappings":"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","file":"controllers/action-moder.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\nimport moment from 'moment';\n\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport geolocation from '../core/geolocation';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as ThreadsModel from '../models/threads';\nimport * as UsersModel from '../models/users';\n\nlet router = express.Router();\n\nconst MIN_TIME_OFFSET = -720;\nconst MAX_TIME_OFFSET = 840;\nconst BAN_EXPIRES_FORMAT = 'YYYY/MM/DD HH:mm ZZ';\n\nfunction getBans(fields) {\n  let { timeOffset } = fields;\n  let bans = _(fields).pick((value, name) => {\n    return /^banBoard_\\S+$/.test(name) && 'NONE' !== fields[`banLevel_${value}`];\n  });\n  timeOffset = Tools.option(timeOffset, 'number', config('site.timeOffset'), {\n    test: (o) => { return (o >= MIN_TIME_OFFSET) && (o <= MAX_TIME_OFFSET); }\n  });\n  return _(bans).reduce((acc, value, name) => {\n    let expiresAt = fields[`banExpires_${value}`];\n    if (expiresAt) {\n      let hours = Math.floor(Math.abs(timeOffset) / 60);\n      let minutes = Math.abs(timeOffset) % 60;\n      let tz = ((timeOffset > 0) ? '+' : '') + Tools.pad(hours, 2, '0') + ':' + Tools.pad(minutes, 2, '0');\n      expiresAt = +moment(`${expiresAt} ${tz}`, BAN_EXPIRES_FORMAT);\n      if (expiresAt < (_.now() + Tools.SECOND)) {\n        expiresAt = null;\n      }\n    } else {\n      expiresAt = null;\n    }\n    acc[value] = {\n      boardName: value,\n      expiresAt: expiresAt,\n      level: fields[`banLevel_${value}`],\n      reason: fields[`banReason_${value}`],\n      postNumber: Tools.option(fields[`banPostNumber_${value}`], 'number', null, { test: Tools.testPostNumber })\n    };\n    return acc;\n  }, {});\n}\n\nrouter.post('/action/banUser', async function(req, res, next) {\n  try {\n    if (!req.isModer()) {\n      throw new Error(Tools.translate('Not enough rights'));\n    }\n    let { fields } = await Files.parseForm(req);\n    let { userIp } = fields;\n    userIp = Tools.correctAddress(userIp);\n    if (!userIp) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n    if (userIp === req.ip) {\n      throw new Error(Tools.translate('Not enough rights'));\n    }\n    let bans = getBans(fields);\n    let banLevels = Tools.BAN_LEVELS.slice(1);\n    _(bans).each((ban) => {\n      if (!Board.board(ban.boardName)) {\n        throw new Error(Tools.translate('Invalid board: $[1]', '', ban.boardName));\n      }\n      if (banLevels.indexOf(ban.level) < 0) {\n        throw new Error(Tools.translate('Invalid ban level: $[1]', '', ban.level));\n      }\n    });\n    let oldBans = await UsersModel.getBannedUserBans(userIp);\n    let date = Tools.now();\n    let modifiedBanBoards = new Set();\n    let newBans = Board.boardNames().reduce((acc, boardName) => {\n      if (req.isModer(boardName)) {\n        if (bans.hasOwnProperty(boardName)) {\n          let ban = bans[boardName];\n          ban.createdAt = date;\n          acc[boardName] = ban;\n          modifiedBanBoards.add(boardName);\n        } else if (oldBans.hasOwnProperty(boardName)) {\n          modifiedBanBoards.add(boardName);\n        }\n      } else if (oldBans.hasOwnProperty(boardName)) {\n        acc[boardName] = oldBans[boardName];\n      }\n      return acc;\n    }, {});\n    let levels = UsersModel.getRegisteredUserLevelsByIp(userIp);\n    modifiedBanBoards.forEach((boardName) => {\n      let level = req.level(boardName);\n      if (!req.isSuperuser(boardName) && Tools.compareRegisteredUserLevels(level, levels[boardName]) <= 0) {\n        throw new Error(Tools.translate('Not enough rights'));\n      }\n    });\n    await UsersModel.banUser(userIp, newBans);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/delall', async function(req, res, next) {\n  try {\n    if (!req.isModer()) {\n      throw new Error(Tools.translate('Not enough rights'));\n    }\n    let { fields } = await Files.parseForm(req);\n    let { userIp } = fields;\n    userIp = Tools.correctAddress(userIp);\n    if (!userIp) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n    if (userIp === req.ip) {\n      throw new Error(Tools.translate('Not enough rights'));\n    }\n    let boardNames = _(fields).filter((boardName, key) => {\n      return /^board_\\S+$/.test(key);\n    });\n    if (boardNames.length <= 0) {\n      throw new Error(Tools.translate('No board specified'));\n    }\n    boardNames.forEach((boardName) => {\n      if (!Board.board(boardName)) {\n        throw new Error(Tools.translate('Invalid board'));\n      }\n      if (!req.isModer(boardName)) {\n        throw new Error(Tools.translate('Not enough rights'));\n      }\n    });\n    let geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardNames, {\n      write: true,\n      geolocationInfo: geolocationInfo\n    });\n    await BoardsModel.delall(req, userIp, boardNames);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/moveThread', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, threadNumber, targetBoardName, password } = fields;\n    if (!Board.board(boardName) || !Board.board(targetBoardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    if (boardName === targetBoardName) {\n      throw new Error(Tools.translate('Source and target boards are the same'));\n    }\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      throw new Error(Tools.translate('Invalid thread number'));\n    }\n    if (!req.isModer(boardName) || !req.isModer(targetBoardName)) {\n      throw new Error(Tools.translate('Not enough rights'));\n    }\n    let geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, [boardName, targetBoardName], {\n      write: true,\n      geolocationInfo: geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, threadNumber, 'moveThread', Tools.sha1(password));\n    let result = await ThreadsModel.moveThread(boardName, threadNumber, targetBoardName);\n    res.json(result);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/setThreadFixed', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, threadNumber, fixed, password } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      throw new Error(Tools.translate('Invalid thread number'));\n    }\n    if (!req.isModer(boardName)) {\n      throw new Error(Tools.translate('Not enough rights'));\n    }\n    let geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, threadNumber, 'setThreadFixed', Tools.sha1(password));\n    await ThreadsModel.setThreadFixed(boardName, threadNumber, 'true' === fixed);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/setThreadClosed', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, threadNumber, closed, password } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      throw new Error(Tools.translate('Invalid thread number'));\n    }\n    if (!req.isModer(boardName)) {\n      throw new Error(Tools.translate('Not enough rights'));\n    }\n    let geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, threadNumber, 'setThreadClosed', Tools.sha1(password));\n    await ThreadsModel.setThreadClosed(boardName, threadNumber, 'true' === closed);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/setThreadUnbumpable', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, threadNumber, unbumpable, password } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      throw new Error(Tools.translate('Invalid thread number'));\n    }\n    if (!req.isModer(boardName)) {\n      throw new Error(Tools.translate('Not enough rights'));\n    }\n    let geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, threadNumber, 'setThreadUnbumpable', Tools.sha1(password));\n    await ThreadsModel.setThreadUnbumpable(boardName, threadNumber, 'true' === unbumpable);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nexport default router;\n"],"sourceRoot":"/source/"}