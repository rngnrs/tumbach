{"version":3,"sources":["controllers/action-other.js"],"names":["Files","Search","Tools","ChatsModel","UsersModel","router","Router","splitCommand","cmd","args","arg","quot","i","length","c","test","push","substring","command","shift","arguments","post","req","res","next","parseForm","fields","boardName","postNumber","chatNumber","text","board","Error","translate","option","testPostNumber","ip","geolocationInfo","checkUserBan","write","addChatMessage","user","result","message","senderHash","receiverHash","receiver","type","hashpass","IPC","send","ips","hashpasses","json","n","deleteChatMessages","key","data","JSON","parse","setSynchronizationData","query","page","p","phrases","model","searchQuery","searchBoard","requiredPhrases","excludedPhrases","possiblePhrases","concat","forEach","phrase","substr","toLowerCase","uniq","findPosts","maxSubjectLength","maxTextLength","searchResults","posts","map","plainText","replace","subject","number","threadNumber","archived","total","max","captchaIDs","id","captcha","actionRoutes","route","method","path","handler","boardNames","name","module","exports"],"mappings":"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","file":"controllers/action-other.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport * as Files from '../core/files';\nimport geolocation from '../core/geolocation';\nimport * as Search from '../core/search';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as ChatsModel from '../models/chats';\nimport * as UsersModel from '../models/users';\n\nlet router = express.Router();\n\nfunction splitCommand(cmd) {\n  let args = [];\n  let arg = '';\n  let quot = 0;\n  for (let i = 0; i < cmd.length; ++i) {\n    let c = cmd[i];\n    if (/\\s/.test(c)) {\n      if (quot) {\n        arg += c;\n      } else if (arg.length > 0) {\n        args.push(arg);\n        arg = '';\n      }\n    } else {\n      if ('\"' === c && (i < 1 || '\\\\' !== cmd[i - 1])) {\n        switch (quot) {\n        case 1:\n          quot = 0;\n          break;\n        case -1:\n          arg += c;\n          break;\n        case 0:\n        default:\n          quot = 1;\n          break;\n        }\n      } else if (\"'\" === c && (i < 1 || '\\\\' !== cmd[i - 1])) {\n        switch (quot) {\n        case 1:\n          arg += c;\n          break;\n        case -1:\n          quot = 0;\n          break;\n        case 0:\n        default:\n          quot = -1;\n          break;\n        }\n      } else {\n        if (('\"' === c || \"'\" === c) && (i > 0 || '\\\\' == cmd[i - 1]) && arg.length > 0) {\n          arg = arg.substring(0, arg.length - 1);\n        }\n        arg += c;\n      }\n    }\n  }\n  if (arg.length > 0) {\n    if (quot) {\n      return null;\n    }\n    args.push(arg);\n  }\n  let command = null;\n  if (args.length > 0) {\n    command = args.shift();\n  }\n  return {\n    command: command,\n    arguments: args\n  };\n}\n\nrouter.post('/action/sendChatMessage', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, chatNumber, text } } = await Files.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    if (!text || typeof text !== 'string') {\n      throw new Error(Tools.translate('Message is empty'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let result = await ChatsModel.addChatMessage({\n      user: req,\n      boardName: boardName,\n      postNumber: postNumber,\n      chatNumber: chatNumber,\n      text: text\n    });\n    let { message, senderHash, receiverHash, receiver } = result;\n    if (senderHash !== receiverHash) {\n      message.type = 'in';\n      let ip = receiver.hashpass ? null : receiver.ip;\n      IPC.send('sendChatMessage', {\n        type: 'newChatMessage',\n        message: {\n          message: message,\n          boardName: boardName,\n          postNumber: postNumber,\n          chatNumber: result.chatNumber\n        },\n        ips: ip,\n        hashpasses: receiver.hashpass\n      });\n    }\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteChatMessages', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, chatNumber } } = await Files.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    chatNumber = Tools.option(chatNumber, 'number', 0, { test: (n) => { n > 0; } });\n    if (!chatNumber) {\n      throw new Error(Tools.translate('Invalid chat number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await ChatsModel.deleteChatMessages({\n      user: req,\n      boardName: boardName,\n      postNumber: postNumber,\n      chatNumber: chatNumber\n    });\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/synchronize', async function(req, res, next) {\n  try {\n    let { fields: { key, data } } = await Files.parseForm(req);\n    if (!key || typeof key !== 'string') {\n      throw new Error(Tools.translate('No key specified'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    try {\n      data = JSON.parse(data);\n    } catch (err) {\n      throw new Error(Tools.translate('Failed to parse data'));\n    }\n    await UsersModel.setSynchronizationData(key, data);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/search', async function(req, res, next) {\n  try {\n    let { fields: { query, boardName, page } } = await Files.parseForm(req);\n    if (!query || typeof query !== 'string') {\n      throw new Error(Tools.translate('Search query is empty'));\n    }\n    if (query.length > config('site.maxSearchQueryLength')) {\n      throw new Error(Tools.translate('Search query is too long'));\n    }\n    if ('*' === boardName) {\n      boardName = '';\n    }\n    if (boardName && !Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    page = Tools.option(page, 'number', 0, { test: (p) => { return p >= 0; } });\n    let phrases = splitCommand(query);\n    if (!phrases || !phrases.command) {\n      throw new Error(Tools.translate('Invalid search query'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let model = {\n      searchQuery: query,\n      searchBoard: boardName\n    };\n    query = {\n      requiredPhrases: [],\n      excludedPhrases: [],\n      possiblePhrases: []\n    };\n    [phrases.command].concat(phrases.arguments).forEach((phrase) => {\n      if (phrase.substr(0, 1) === '+') {\n        query.requiredPhrases.push(phrase.substr(1).toLowerCase());\n      } else if (phrase.substr(0, 1) === '-') {\n        query.excludedPhrases.push(phrase.substr(1).toLowerCase());\n      } else {\n        query.possiblePhrases.push(phrase.toLowerCase());\n      }\n    });\n    model.phrases = query.requiredPhrases.concat(query.excludedPhrases).concat(query.possiblePhrases);\n    model.phrases = _(model.phrases).uniq();\n    let result = await Search.findPosts(query, {\n      boardName: boardName,\n      page: page\n    });\n    let maxSubjectLength = config('system.search.maxResultPostSubjectLengh');\n    let maxTextLength = config('system.search.maxResultPostTextLengh');\n    model.searchResults = result.posts.map((post) => {\n      let text = (post.plainText || '').replace(/\\r*\\n+/g, ' ');\n      if (text.length > maxTextLength) {\n        text = text.substr(0, maxTextLength - 1) + '…';\n      }\n      let subject = post.subject || text;\n      if (subject.length > maxSubjectLength) {\n        subject = subject.substr(0, maxSubjectLength - 1) + '…';\n      }\n      return {\n        boardName: post.boardName,\n        postNumber: post.number,\n        threadNumber: post.threadNumber,\n        archived: post.archived,\n        subject: subject,\n        text: text\n      };\n    });\n    model.total = result.total;\n    model.max = result.max;\n    res.json(model);\n  } catch (err) {\n    next(err);\n  }\n});\n\nCaptcha.captchaIDs().forEach((id) => {\n  Captcha.captcha(id).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nBoard.boardNames().forEach((name) => {\n  Board.board(name).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/source/"}