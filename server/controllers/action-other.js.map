{"version":3,"sources":["controllers/action-other.js"],"names":["Files","Tools","ChatsModel","PostsModel","UsersModel","router","Router","post","req","res","next","parseForm","fields","boardName","postNumber","chatNumber","text","board","Error","translate","option","test","testPostNumber","ip","geolocationInfo","checkUserBan","write","addChatMessage","user","result","message","receiver","type","hashpass","IPC","send","ips","hashpasses","json","n","deleteChatMessages","key","data","JSON","parse","setSynchronizationData","query","page","length","p","phrases","match","model","searchQuery","map","phrase","replace","searchBoard","findPosts","maxSubjectLength","maxTextLength","searchResults","posts","plainText","substr","subject","number","threadNumber","archived","total","max","captchaIDs","forEach","id","captcha","actionRoutes","route","method","path","handler","boardNames","name","module","exports"],"mappings":"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","file":"controllers/action-other.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport * as Files from '../core/files';\nimport geolocation from '../core/geolocation';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport * as ChatsModel from '../models/chats';\nimport * as PostsModel from '../models/posts';\nimport * as UsersModel from '../models/users';\n\nlet router = express.Router();\n\nrouter.post('/action/sendChatMessage', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, chatNumber, text } } = await Files.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    if (!text || typeof text !== 'string') {\n      throw new Error(Tools.translate('Message is empty'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let result = await ChatsModel.addChatMessage({\n      user: req,\n      boardName: boardName,\n      postNumber: postNumber,\n      chatNumber: chatNumber,\n      text: text\n    });\n    let { message, receiver } = result;\n    message.type = 'in';\n    let ip = receiver.hashpass ? null : receiver.ip;\n    IPC.send('sendChatMessage', {\n      type: 'newChatMessage',\n      message: {\n        message: message,\n        boardName: boardName,\n        postNumber: postNumber,\n        chatNumber: result.chatNumber\n      },\n      ips: ip,\n      hashpasses: receiver.hashpass\n    });\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteChatMessages', async function(req, res, next) {\n  try {\n    let { fields: { boardName, postNumber, chatNumber } } = await Files.parseForm(req);\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    chatNumber = Tools.option(chatNumber, 'number', 0, { test: (n) => { return n > 0; } });\n    if (!chatNumber) {\n      throw new Error(Tools.translate('Invalid chat number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await ChatsModel.deleteChatMessages({\n      user: req,\n      boardName: boardName,\n      postNumber: postNumber,\n      chatNumber: chatNumber\n    });\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/synchronize', async function(req, res, next) {\n  try {\n    let { fields: { key, data } } = await Files.parseForm(req);\n    if (!key || typeof key !== 'string') {\n      throw new Error(Tools.translate('No key specified'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    try {\n      data = JSON.parse(data);\n    } catch (err) {\n      throw new Error(Tools.translate('Failed to parse data'));\n    }\n    await UsersModel.setSynchronizationData(key, data);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/search', async function(req, res, next) {\n  try {\n    let { fields: { query, boardName, page } } = await Files.parseForm(req);\n    if (!query || typeof query !== 'string') {\n      throw new Error(Tools.translate('Search query is empty'));\n    }\n    if (query.length > config('site.maxSearchQueryLength')) {\n      throw new Error(Tools.translate('Search query is too long'));\n    }\n    if ('*' === boardName) {\n      boardName = '';\n    }\n    if (boardName && !Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    page = Tools.option(page, 'number', 0, { test: (p) => { return p >= 0; } });\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let phrases = query.match(/\\w+|\"[^\"]+\"/g) || [];\n    let model = {\n      searchQuery: query,\n      phrases: phrases.map(phrase => phrase.replace(/(^\\-|^\"|\"$)/g, '')),\n      searchBoard: boardName\n    };\n    let result = await PostsModel.findPosts(query, boardName, page);\n    let maxSubjectLength = config('system.search.maxResultPostSubjectLengh');\n    let maxTextLength = config('system.search.maxResultPostTextLengh');\n    model.searchResults = result.posts.map((post) => {\n      let text = (post.plainText || '').replace(/\\r*\\n+/g, ' ');\n      if (text.length > maxTextLength) {\n        text = text.substr(0, maxTextLength - 1) + '…';\n      }\n      let subject = post.subject || text;\n      if (subject.length > maxSubjectLength) {\n        subject = subject.substr(0, maxSubjectLength - 1) + '…';\n      }\n      return {\n        boardName: post.boardName,\n        postNumber: post.number,\n        threadNumber: post.threadNumber,\n        archived: post.archived,\n        subject: subject,\n        text: text\n      };\n    });\n    model.total = result.total;\n    model.max = result.max;\n    res.json(model);\n  } catch (err) {\n    next(err);\n  }\n});\n\nCaptcha.captchaIDs().forEach((id) => {\n  Captcha.captcha(id).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nBoard.boardNames().forEach((name) => {\n  Board.board(name).actionRoutes().forEach((route) => {\n    router[route.method](`/action${route.path}`, route.handler);\n  });\n});\n\nmodule.exports = router;\n"],"sourceRoot":"/source/"}