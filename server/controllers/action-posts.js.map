{"version":3,"sources":["controllers/action-posts.js"],"names":["req","boardName","mode","fields","files","postNumber","board","Error","Tools","translate","isArray","fileCount","option","test","testPostNumber","post","PostsModel","getPost","text","rawText","FilesModel","getPostFileCount","testParameters","existingFileCount","Files","IPC","ThreadsModel","UsersModel","router","Router","res","next","parseForm","markupMode","signAsOp","tripcode","ip","geolocationInfo","checkUserBan","write","markupModes","accessLevel","level","data","options","showTripcode","hashpass","createdAt","now","toISOString","t","name","indexOf","generateTripcode","tt","stripcode","slice","json","transaction","threadNumber","captchaEngine","checkCaptcha","getFiles","getThread","closed","unbumpable","thread","processFiles","createPost","archived","send","number","hash","path","redirect","rollback","createThread","date","Date","checkUserPermissions","editPost","length","addFilesToPost","password","sha1","threadExists","isThread","deleteThread","deletePost","fileName","getFileInfoByName","fileInfo","deleteFile","rating","editFileRating","isAudioType","mimeType","editAudioTags"],"mappings":"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","file":"action-posts.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\n\nimport Board from '../boards/board';\nimport Captcha from '../captchas/captcha';\nimport * as Files from '../core/files';\nimport geolocation from '../core/geolocation';\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport PostCreationTransaction from '../helpers/post-creation-transaction';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\nimport * as FilesModel from '../models/files';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\nimport * as UsersModel from '../models/users';\n\nlet router = express.Router();\n\nasync function testParameters(req, boardName, mode, { fields, files, postNumber } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (!fields) {\n    fields = {};\n  }\n  if (!_(files).isArray()) {\n    files = [];\n  }\n  let fileCount = 0;\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  let post;\n  if (postNumber) {\n    post = await PostsModel.getPost(boardName, postNumber);\n    if (typeof fields.text === 'undefined') {\n      fields.text = post.rawText;\n    }\n    fileCount = await FilesModel.getPostFileCount(boardName, postNumber);\n  }\n  await board.testParameters({\n    req: req,\n    mode: mode,\n    fields: fields,\n    files: files,\n    existingFileCount: fileCount\n  });\n  return post;\n}\n\nrouter.post('/action/markupText', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, text, markupMode, signAsOp, tripcode } = fields;\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    let rawText = text || '';\n    await testParameters(req, boardName, 'markupText', { fields: fields });\n    markupMode = markupMode || '';\n    let markupModes = markup.markupModes(markupMode);\n    text = await markup(boardName, text, {\n      markupModes: markupModes,\n      accessLevel: req.level(boardName)\n    });\n    let data = {\n      boardName: boardName,\n      text: text || null,\n      rawText: rawText || null,\n      options: {\n        signAsOp: ('true' === signAsOp),\n        showTripcode: (req.hashpass && ('true' === tripcode))\n      },\n      createdAt: Tools.now().toISOString()\n    };\n    let t = fields.name? fields.name.indexOf('#') : -1;\n    if (req.hashpass && tripcode) {\n      data.tripcode = board.generateTripcode(req.hashpass);\n    } else if (t >= 0) {\n        let tt = data.name.indexOf('##');\n        data.tripcode = board.stripcode(fields.name.slice(t+1, tt));\n        if (tt >= 0)\n            data.tripcode += '!' + this.stripcode(data.name.slice(tt+2));\n        data.options.showTripcode = !0;\n    }\n    if (t > 0) {\n        data.name = data.name.slice(0, t);\n    } else if (t == 0)\n        delete data.name;\n    res.json(data);\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/createPost', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, threadNumber, captchaEngine } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!threadNumber) {\n      throw new Error(Tools.translate('Invalid thread'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await Captcha.checkCaptcha(req, fields);\n    files = await Files.getFiles(fields, files);\n    await testParameters(req, boardName, 'createPost', {\n      fields: fields,\n      files: files\n    });\n    let thread = await ThreadsModel.getThread(boardName, threadNumber, {\n      closed: 1,\n      unbumpable: 1\n    });\n    if (thread.closed) {\n      throw new Error(Tools.translate('Posting is disabled in this thread'));\n    }\n    transaction = new PostCreationTransaction(boardName);\n    files = await Files.processFiles(boardName, files, transaction);\n    let post = await PostsModel.createPost(req, fields, files, transaction, {\n      unbumpable: thread.unbumpable,\n      archived: thread.archived\n    });\n    IPC.send('notifyAboutNewPosts', `${boardName}/${threadNumber}`);\n    if ('node-captcha-noscript' !== captchaEngine) {\n      res.json({\n        boardName: post.boardName,\n        postNumber: post.number\n      });\n    } else {\n      let hash = `post-${post.number}`;\n      let path = `/${config('site.pathPrefix')}${post.boardName}/res/${post.threadNumber}.html#${hash}`;\n      res.redirect(303, path);\n    }\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/createThread', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, captchaEngine } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await Captcha.checkCaptcha(req, fields);\n    files = await Files.getFiles(fields, files);\n    await testParameters(req, boardName, 'createThread', {\n      fields: fields,\n      files: files\n    });\n    transaction = new PostCreationTransaction(boardName);\n    let thread = await ThreadsModel.createThread(req, fields, transaction);\n    files = await Files.processFiles(boardName, files, transaction);\n    let post = await PostsModel.createPost(req, fields, files, transaction, {\n      postNumber: thread.number,\n      date: new Date(thread.createdAt)\n    });\n    if ('node-captcha-noscript' !== captchaEngine) {\n      res.json({\n        boardName: thread.boardName,\n        threadNumber: thread.number\n      });\n    } else {\n      res.redirect(303, `/${config('site.pathPrefix')}${thread.boardName}/res/${thread.number}.html`);\n    }\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/editPost', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, postNumber } = fields;\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editPost');\n    await testParameters(req, boardName, 'editPost', {\n      fields: fields,\n      postNumber: postNumber\n    });\n    let post = await PostsModel.editPost(req, fields);\n    res.json({\n      boardName: post.boardName,\n      postNumber: post.number\n    });\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/addFiles', async function(req, res, next) {\n  let transaction;\n  try {\n    let { fields, files } = await Files.parseForm(req);\n    let { boardName, postNumber } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'addFilesToPost');\n    let post = await PostsModel.getPost(boardName, postNumber);\n    if (!post) {\n      throw new Error(Tools.translate('No such post'));\n    }\n    files = await Files.getFiles(fields, files);\n    if (files.length <= 0) {\n      throw new Error(Tools.translate('No file specified'));\n    }\n    await testParameters(req, boardName, 'addFiles', {\n      fields: fields,\n      files: files,\n      postNumber: postNumber\n    });\n    transaction = new PostCreationTransaction(boardName);\n    files = await Files.processFiles(boardName, files, transaction);\n    await FilesModel.addFilesToPost(boardName, postNumber, files);\n    res.json({});\n  } catch (err) {\n    if (transaction) {\n      transaction.rollback();\n    }\n    next(err);\n  }\n});\n\nrouter.post('/action/deletePost', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { boardName, postNumber, password } = fields;\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'deletePost', Tools.sha1(password));\n    let isThread = await ThreadsModel.threadExists(boardName, postNumber);\n    if (isThread) {\n      await ThreadsModel.deleteThread(boardName, postNumber);\n    } else {\n      await PostsModel.deletePost(boardName, postNumber);\n    }\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/deleteFile', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'deleteFile', Tools.sha1(password));\n    let post = await testParameters(req, boardName, 'deleteFile', { postNumber: postNumber });\n    await FilesModel.deleteFile(fileName);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/editFileRating', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, rating, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editFileRating', Tools.sha1(password));\n    await FilesModel.editFileRating(fileName, rating);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nrouter.post('/action/editAudioTags', async function(req, res, next) {\n  try {\n    let { fields } = await Files.parseForm(req);\n    let { fileName, password } = fields;\n    if (!fileName || typeof fileName !== 'string') {\n      throw new Error(Tools.translate('Invalid file name'));\n    }\n    let fileInfo = await FilesModel.getFileInfoByName(fileName);\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    if (!Files.isAudioType(fileInfo.mimeType)) {\n      throw new Error(Tools.translate('Not an audio file'));\n    }\n    let { boardName, postNumber } = fileInfo;\n    req.geolocationInfo = await geolocation(req.ip);\n    await UsersModel.checkUserBan(req.ip, boardName, {\n      write: true,\n      geolocationInfo: req.geolocationInfo\n    });\n    await UsersModel.checkUserPermissions(req, boardName, postNumber, 'editAudioTags', Tools.sha1(password));\n    await FilesModel.editAudioTags(fileName, fields);\n    res.json({});\n  } catch (err) {\n    next(err);\n  }\n});\n\nexport default router;\n"]}