{"version":3,"sources":["controllers/board.js"],"names":["thread","prerendered","targetPath","board","boardName","Promise","reject","Error","Tools","translate","model","title","number","isThreadPage","MiscModel","threadNumber","data","Renderer","render","write","Cache","writeFile","renderThreadHTML","BoardsModel","getThread","renderThread","JSON","stringify","archived","archPath","__dirname","mkpath","renderArchivedThread","pageNumber","getPage","page","series","threads","pageID","renderPage","Files","PostsModel","ThreadsModel","RSS_DATE_TIME_FORMAT","router","Router","pickPostsToRerender","oldPosts","posts","pick","post","postNumber","oldPost","updatedAt","bannedFor","text","oldRefs","referringPosts","reduce","acc","ref","newRefs","oldFileInfos","fileInfos","fileInfo","fileName","extraData","newFileInfos","getPrerenderedPost","html","startIndex","indexOf","endPattern","endIndex","lastIndexOf","substring","length","paths","description","path","boardNames","getThreadNumbers","threadNumbers","archivedThreadNumbers","concat","map","arrays","flatten","key","isArray","mustCreate","some","d","action","mustDelete","threadID","readFile","threadData","parse","lastPosts","getThreadPosts","withExtraData","withFileInfos","withReferences","slice","_1","hasOwnProperty","postsToRerender","threadHTML","mapObject","renderPostFileInfos","renderPost","renderedPost","toArray","setThreadDeleted","removeFile","renderPages","getPageCount","pageCount","range","renderCatalog","sortMode","getCatalog","catalog","suffix","renderArchive","getArchive","archive","renderRSS","rssPostCount","getPostKeys","keys","postNumbers","split","push","numbers","sort","pn1","pn2","reverse","getPosts","forEach","subject","postSubject","rss","date","now","ttl","formattedDate","utc","locale","format","error","stack","match"],"mappings":"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","file":"controllers/board.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\nimport FS from 'q-io/fs';\nimport moment from 'moment';\nimport promisify from 'promisify-node';\n\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport * as BoardsModel from '../models/boards';\nimport * as MiscModel from '../models/misc';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\n\nconst mkpath = promisify('mkpath');\n\nconst RSS_DATE_TIME_FORMAT = 'ddd, DD MMM YYYY HH:mm:ss +0000';\n\nlet router = express.Router();\n\nfunction pickPostsToRerender(oldPosts, posts) {\n  return _(posts).pick((post, postNumber) => {\n    let oldPost = oldPosts[postNumber];\n    if (!oldPost || oldPost.updatedAt < post.updatedAt || oldPost.bannedFor !== post.bannedFor\n      || oldPost.text !== post.text) {\n      return true;\n    }\n    let oldRefs = oldPost.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    let newRefs = post.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    if (oldRefs !== newRefs) {\n      return true;\n    }\n    let oldFileInfos = oldPost.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    let newFileInfos = post.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    if (oldFileInfos !== newFileInfos) {\n      return true;\n    }\n  });\n}\n\nasync function renderThreadHTML(thread, { prerendered, targetPath } = {}) {\n  let board = Board.board(thread.boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let model = {\n    thread: thread,\n    title: thread.title || `${board.title} — ${thread.number}`,\n    isThreadPage: true,\n    board: MiscModel.board(board).board,\n    threadNumber: thread.number,\n    prerendered: prerendered\n  };\n  let data = Renderer.render('pages/thread', model);\n  if (targetPath) {\n    await FS.write(targetPath, data);\n  } else {\n    await Cache.writeFile(`${thread.boardName}/res/${thread.number}.html`, data);\n  }\n}\n\nasync function renderThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  await Renderer.renderThread(thread);\n  await Cache.writeFile(`${boardName}/res/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread);\n}\n\nasync function renderArchivedThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  if (!thread || !thread.archived) {\n    throw new Error(Tools.translate('No such thread: >>/$[1]/$[2]', '', boardName, threadNumber));\n  }\n  let archPath = `${__dirname}/../../public/${boardName}/arch`;\n  await mkpath(archPath);\n  await Renderer.renderThread(thread);\n  await FS.write(`${archPath}/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread, { targetPath: `${archPath}/${threadNumber}.html` });\n}\n\nasync function renderPage(boardName, pageNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let page = await BoardsModel.getPage(boardName, pageNumber);\n  await Tools.series(page.threads, async function(thread) {\n    return await Renderer.renderThread(thread);\n  });\n  await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n  page.title = board.title;\n  page.board = MiscModel.board(board).board;\n  let pageID = (pageNumber > 0) ? pageNumber : 'index';\n  await Cache.writeFile(`${boardName}/${pageID}.html`, Renderer.render('pages/board', page));\n}\n\nfunction getPrerenderedPost(html, postNumber) {\n  let startIndex = html.indexOf(`<div id='post-${postNumber}'`);\n  if (startIndex < 0) {\n    return;\n  }\n  let endPattern = `<!--__ololord_end_post#${postNumber}-->`;\n  let endIndex = html.lastIndexOf(endPattern);\n  if (endIndex < 0) {\n    return;\n  }\n  return html.substring(startIndex, endIndex + endPattern.length);\n}\n\nrouter.paths = async function(description) {\n  if (description) {\n    return [{\n      path: '/<board name>',\n      description: Tools.translate('Board pages (from 0 to N)')\n    }, {\n      path: '/<board name>/archive',\n      description: Tools.translate('Board archive page (WITHOUT the archived threads)')\n    }, {\n      path: '/<board name>/catalog',\n      description: Tools.translate('Board catalog page')\n    }, {\n      path: '/<board name>/res/<thread number>',\n      description: Tools.translate('A thread')\n    }, {\n      path: '/<board name>/arch/<thread number>',\n      description: Tools.translate('An archived thread')\n    }, {\n      path: '/rss',\n      description: Tools.translate('RSS feed (for all boards)')\n    }];\n  }\n  let arrays = await Tools.series(Board.boardNames(), async function(boardName) {\n    let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n    let archivedThreadNumbers = await ThreadsModel.getThreadNumbers(boardName, { archived: true });\n    let paths = [`/${boardName}`, `/${boardName}/archive`, `/${boardName}/catalog`];\n    paths = paths.concat(threadNumbers.map(threadNumber => `/${boardName}/res/${threadNumber}`));\n    return paths.concat(archivedThreadNumbers.map(threadNumber => `/${boardName}/arch/${threadNumber}`));\n  }, true);\n  return _(arrays).flatten().concat('/rss');\n};\n\nrouter.renderThread = async function(key, data) {\n  if (!_(data).isArray()) {\n    data = [data];\n  }\n  let mustCreate = data.some((d) => { return 'create' === d.action; });\n  let mustDelete = data.some((d) => { return 'delete' === d.action; });\n  if (mustCreate && mustDelete) {\n    return; //NOTE: This should actually never happen\n  }\n  data = data.reduce((acc, d) => {\n    if (!acc) {\n      return d;\n    }\n    if (d.action < acc.action) {\n      return d;\n    }\n    return acc;\n  });\n  let board = Board.board(data.boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  switch (data.action) {\n  case 'create': {\n    await renderThread(data.boardName, data.threadNumber);\n    break;\n  }\n  case 'edit': {\n    let threadID = `${data.boardName}/res/${data.threadNumber}`;\n    let threadData = await Cache.readFile(`${threadID}.json`);\n    let model = JSON.parse(threadData);\n    let thread = model.thread;\n    let lastPosts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    let posts = await ThreadsModel.getThreadPosts(data.boardName, data.threadNumber, {\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    posts = posts.slice(1).reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    let threadHTML = await Cache.readFile(`${threadID}.html`);\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(threadHTML, postNumber);\n    });\n    await Tools.series(postsToRerender, async function(post, postNumber) {\n      await Files.renderPostFileInfos(post);\n      let renderedPost = await board.renderPost(post);\n      lastPosts[postNumber] = renderedPost;\n    });\n    thread.lastPosts = _(lastPosts).toArray();\n    await Cache.writeFile(`${threadID}.json`, JSON.stringify(model));\n    await renderThreadHTML(thread, { prerendered: prerendered });\n    break;\n  }\n  case 'delete': {\n    await ThreadsModel.setThreadDeleted(`${data.boardName}:${data.threadNumber}`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.json`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.html`);\n    break;\n  }\n  default: {\n    return Promise.reject(new Error(Tools.translate('Invalid action')));\n  }\n  }\n}\n\nrouter.renderPages = async function(boardName) {\n  let pageCount = await BoardsModel.getPageCount(boardName);\n  return await Tools.series(_.range(pageCount), async function(pageNumber) {\n    return await renderPage(boardName, pageNumber);\n  });\n};\n\nrouter.renderCatalog = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  await Tools.series(['date', 'recent', 'bumps'], async function(sortMode) {\n    let catalog = await BoardsModel.getCatalog(boardName, sortMode);\n    await Tools.series(catalog.threads, async function(thread) {\n      return await Renderer.renderThread(thread);\n    });\n    let suffix = ('date' !== sortMode) ? `-${sortMode}` : '';\n    await Cache.writeFile(`${boardName}/catalog${suffix}.json`, JSON.stringify(catalog));\n    catalog.title = board.title;\n    catalog.board = MiscModel.board(board).board;\n    catalog.sortMode = sortMode;\n    return Cache.writeFile(`${boardName}/catalog${suffix}.html`, Renderer.render('pages/catalog', catalog));\n  });\n};\n\nrouter.renderArchive = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let archive = await BoardsModel.getArchive(boardName);\n  await Cache.writeFile(`${boardName}/archive.json`, JSON.stringify(archive));\n  archive.title = board.title;\n  archive.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/archive.html`, Renderer.render('pages/archive', archive));\n};\n\nrouter.renderRSS = async function() {\n  try {\n    let rssPostCount = config('server.rss.postCount');\n    let keys = await PostsModel.getPostKeys();\n    let postNumbers = keys.reduce((acc, key) => {\n      let [boardName, postNumber] = key.split(':');\n      postNumber = +postNumber;\n      if (!postNumber) {\n        return acc;\n      }\n      if (!acc.hasOwnProperty(boardName)) {\n        acc[boardName] = [];\n      }\n      acc[boardName].push(postNumber);\n      return acc;\n    }, {});\n    await Tools.series(Board.boardNames(), async function(boardName) {\n      let numbers = postNumbers[boardName];\n      if (!numbers || numbers.length <= 0) {\n        return;\n      }\n      let board = Board.board(boardName);\n      if (!board) {\n        return;\n      }\n      numbers = numbers.sort((pn1, pn2) => { return pn2 - pn1; }).slice(0, rssPostCount).reverse();\n      let posts = await PostsModel.getPosts(boardName, numbers, { withFileInfos: true });\n      posts.forEach((post) => {\n        post.subject = BoardsModel.postSubject(post, 150) || post.number;\n      });\n      let rss = {\n        date: Tools.now(),\n        ttl: config('server.rss.ttl'),\n        board: MiscModel.board(board).board,\n        posts: posts,\n        formattedDate: (date) => {\n          return moment().utc().locale('en').format(RSS_DATE_TIME_FORMAT);\n        }\n      };\n      return await Cache.writeFile(`${boardName}/rss.xml`, Renderer.render('pages/rss', rss));\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n};\n\nrouter.render = async function(path) {\n  let match = path.match(/^\\/rss$/);\n  if (match) {\n    return await router.renderRSS();\n  }\n  match = path.match(/^\\/([^\\/]+)$/);\n  if (match) {\n    return await router.renderPages(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/archive$/);\n  if (match) {\n    return await router.renderArchive(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/catalog$/);\n  if (match) {\n    return await router.renderCatalog(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/res\\/(\\d+)$/);\n  if (match) {\n    return await renderThread(match[1], +match[2]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/arch\\/(\\d+)$/);\n  if (match) {\n    return await renderArchivedThread(match[1], +match[2]);\n  }\n};\n\nrouter.renderThreadHTML = renderThreadHTML;\n\nexport default router;\n"],"sourceRoot":"/source/"}