{"version":3,"sources":["controllers/board.js"],"names":["thread","prerendered","targetPath","board","boardName","Promise","reject","Error","Tools","translate","model","title","number","isThreadPage","MiscModel","threadNumber","data","Renderer","render","write","Cache","writeFile","renderThreadHTML","BoardsModel","getThread","renderThread","JSON","stringify","archived","archPath","__dirname","mkpath","renderArchivedThread","pageNumber","allowPrerender","getPage","page","series","threads","pageID","readFile","pageJSON","parse","pageHTML","lastPosts","map","concat","opPost","flatten","reduce","acc","post","posts","pick","_1","postNumber","hasOwnProperty","postsToRerender","pickPostsToRerender","isEmpty","mapObject","getPrerenderedPost","name","renderPage","getPageCount","pageCount","range","renderPages","Files","PostsModel","ThreadsModel","RSS_DATE_TIME_FORMAT","router","Router","oldPosts","oldPost","updatedAt","bannedFor","text","oldRefs","referringPosts","ref","newRefs","oldFileInfos","fileInfos","fileInfo","fileName","extraData","newFileInfos","html","startIndex","indexOf","endPattern","endIndex","lastIndexOf","substring","length","paths","description","path","boardNames","getThreadNumbers","threadNumbers","archivedThreadNumbers","arrays","key","isArray","mustCreate","some","d","action","mustDelete","threadID","threadData","getThreadPosts","withExtraData","withFileInfos","withReferences","slice","threadHTML","renderPostFileInfos","renderPost","renderedPost","toArray","setThreadDeleted","removeFile","renderCatalog","sortMode","getCatalog","catalog","suffix","renderArchive","getArchive","archive","renderRSS","rssPostCount","getPostKeys","keys","postNumbers","split","push","numbers","sort","pn1","pn2","reverse","getPosts","forEach","subject","postSubject","rss","date","now","ttl","formattedDate","utc","locale","format","error","stack","match"],"mappings":"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","file":"controllers/board.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\nimport FS from 'q-io/fs';\nimport moment from 'moment';\nimport promisify from 'promisify-node';\n\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport * as BoardsModel from '../models/boards';\nimport * as MiscModel from '../models/misc';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\n\nconst mkpath = promisify('mkpath');\n\nconst RSS_DATE_TIME_FORMAT = 'ddd, DD MMM YYYY HH:mm:ss +0000';\n\nlet router = express.Router();\n\nfunction pickPostsToRerender(oldPosts, posts) {\n  return _(posts).pick((post, postNumber) => {\n    let oldPost = oldPosts[postNumber];\n    if (!oldPost || oldPost.updatedAt < post.updatedAt || oldPost.bannedFor !== post.bannedFor\n      || oldPost.text !== post.text) {\n      return true;\n    }\n    let oldRefs = oldPost.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    let newRefs = post.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    if (oldRefs !== newRefs) {\n      return true;\n    }\n    let oldFileInfos = oldPost.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    let newFileInfos = post.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    if (oldFileInfos !== newFileInfos) {\n      return true;\n    }\n  });\n}\n\nasync function renderThreadHTML(thread, { prerendered, targetPath } = {}) {\n  let board = Board.board(thread.boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let model = {\n    thread: thread,\n    title: thread.title || `${board.title} — ${thread.number}`,\n    isThreadPage: true,\n    board: MiscModel.board(board).board,\n    threadNumber: thread.number,\n    prerendered: prerendered\n  };\n  let data = Renderer.render('pages/thread', model);\n  if (targetPath) {\n    await FS.write(targetPath, data);\n  } else {\n    await Cache.writeFile(`${thread.boardName}/res/${thread.number}.html`, data);\n  }\n}\n\nasync function renderThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  await Renderer.renderThread(thread);\n  await Cache.writeFile(`${boardName}/res/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread);\n}\n\nasync function renderArchivedThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  if (!thread || !thread.archived) {\n    throw new Error(Tools.translate('No such thread: >>/$[1]/$[2]', '', boardName, threadNumber));\n  }\n  let archPath = `${__dirname}/../../public/${boardName}/arch`;\n  await mkpath(archPath);\n  await Renderer.renderThread(thread);\n  await FS.write(`${archPath}/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread, { targetPath: `${archPath}/${threadNumber}.html` });\n}\n\nfunction getPrerenderedPost(html, postNumber) {\n  let startIndex = html.indexOf(`<div id='post-${postNumber}'`);\n  if (startIndex < 0) {\n    return;\n  }\n  let endPattern = `<!--__ololord_end_post#${postNumber}-->`;\n  let endIndex = html.lastIndexOf(endPattern);\n  if (endIndex < 0) {\n    return;\n  }\n  return html.substring(startIndex, endIndex + endPattern.length);\n}\n\nasync function renderPage(boardName, pageNumber, { allowPrerender } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let page = await BoardsModel.getPage(boardName, pageNumber);\n  await Tools.series(page.threads, async function(thread) {\n    return await Renderer.renderThread(thread);\n  });\n  let pageID = (pageNumber > 0) ? pageNumber : 'index';\n  if (allowPrerender) {\n    let pageJSON = await Cache.readFile(`${boardName}/${pageNumber}.json`);\n    pageJSON = JSON.parse(pageJSON);\n    let pageHTML = await Cache.readFile(`${boardName}/${pageID}.html`);\n    let lastPosts = pageJSON.threads.map(thread => thread.lastPosts.concat(thread.opPost));\n    lastPosts = _(lastPosts).flatten().reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    let posts = page.threads.map(thread => thread.lastPosts.concat(thread.opPost));\n    posts = _(posts).flatten().reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    if (_(postsToRerender).isEmpty()) {\n      return;\n    }\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(pageHTML, postNumber);\n    });\n    await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n    page.prerendered = prerendered;\n  } else {\n    await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n  }\n  page.title =`/${board.name}/ &mdash; ${board.title}`;\n  page.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/${pageID}.html`, Renderer.render('pages/board', page));\n}\n\nasync function renderPages(boardName, { allowPrerender } = {}) {\n  let pageCount = await BoardsModel.getPageCount(boardName);\n  return await Tools.series(_.range(pageCount), async function(pageNumber) {\n    return await renderPage(boardName, pageNumber, { allowPrerender });\n  });\n};\n\nrouter.paths = async function(description) {\n  if (description) {\n    return [{\n      path: '/<board name>',\n      description: Tools.translate('Board pages (from 0 to N)')\n    }, {\n      path: '/<board name>/archive',\n      description: Tools.translate('Board archive page (WITHOUT the archived threads)')\n    }, {\n      path: '/<board name>/catalog',\n      description: Tools.translate('Board catalog page')\n    }, {\n      path: '/<board name>/res/<thread number>',\n      description: Tools.translate('A thread')\n    }, {\n      path: '/<board name>/arch/<thread number>',\n      description: Tools.translate('An archived thread')\n    }, {\n      path: '/rss',\n      description: Tools.translate('RSS feed (for all boards)')\n    }];\n  }\n  let arrays = await Tools.series(Board.boardNames(), async function(boardName) {\n    let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n    let archivedThreadNumbers = await ThreadsModel.getThreadNumbers(boardName, { archived: true });\n    let paths = [`/${boardName}`, `/${boardName}/archive`, `/${boardName}/catalog`];\n    paths = paths.concat(threadNumbers.map(threadNumber => `/${boardName}/res/${threadNumber}`));\n    return paths.concat(archivedThreadNumbers.map(threadNumber => `/${boardName}/arch/${threadNumber}`));\n  }, true);\n  return _(arrays).flatten().concat('/rss');\n};\n\nrouter.renderThread = async function(key, data) {\n  if (!_(data).isArray()) {\n    data = [data];\n  }\n  let mustCreate = data.some((d) => { return 'create' === d.action; });\n  let mustDelete = data.some((d) => { return 'delete' === d.action; });\n  if (mustCreate && mustDelete) {\n    return; //NOTE: This should actually never happen\n  }\n  data = data.reduce((acc, d) => {\n    if (!acc) {\n      return d;\n    }\n    if (d.action < acc.action) {\n      return d;\n    }\n    return acc;\n  });\n  let board = Board.board(data.boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  switch (data.action) {\n  case 'create': {\n    await renderThread(data.boardName, data.threadNumber);\n    break;\n  }\n  case 'edit': {\n    let threadID = `${data.boardName}/res/${data.threadNumber}`;\n    let threadData = await Cache.readFile(`${threadID}.json`);\n    let model = JSON.parse(threadData);\n    let thread = model.thread;\n    let lastPosts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    let posts = await ThreadsModel.getThreadPosts(data.boardName, data.threadNumber, {\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    posts = posts.slice(1).reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    let threadHTML = await Cache.readFile(`${threadID}.html`);\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(threadHTML, postNumber);\n    });\n    await Tools.series(postsToRerender, async function(post, postNumber) {\n      await Files.renderPostFileInfos(post);\n      let renderedPost = await board.renderPost(post);\n      lastPosts[postNumber] = renderedPost;\n    });\n    thread.lastPosts = _(lastPosts).toArray();\n    await Cache.writeFile(`${threadID}.json`, JSON.stringify(model));\n    await renderThreadHTML(thread, { prerendered: prerendered });\n    break;\n  }\n  case 'delete': {\n    await ThreadsModel.setThreadDeleted(`${data.boardName}:${data.threadNumber}`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.json`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.html`);\n    break;\n  }\n  default: {\n    return Promise.reject(new Error(Tools.translate('Invalid action')));\n  }\n  }\n}\n\nrouter.renderPages = async function(boardName) {\n  return await renderPages(boardName, { allowPrerender: true });\n};\n\nrouter.renderCatalog = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  await Tools.series(['date', 'recent', 'bumps'], async function(sortMode) {\n    let catalog = await BoardsModel.getCatalog(boardName, sortMode);\n    await Tools.series(catalog.threads, async function(thread) {\n      return await Renderer.renderThread(thread);\n    });\n    let suffix = ('date' !== sortMode) ? `-${sortMode}` : '';\n    await Cache.writeFile(`${boardName}/catalog${suffix}.json`, JSON.stringify(catalog));\n    catalog.title = board.title;\n    catalog.board = MiscModel.board(board).board;\n    catalog.sortMode = sortMode;\n    return Cache.writeFile(`${boardName}/catalog${suffix}.html`, Renderer.render('pages/catalog', catalog));\n  });\n};\n\nrouter.renderArchive = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let archive = await BoardsModel.getArchive(boardName);\n  await Cache.writeFile(`${boardName}/archive.json`, JSON.stringify(archive));\n  archive.title = board.title;\n  archive.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/archive.html`, Renderer.render('pages/archive', archive));\n};\n\nrouter.renderRSS = async function() {\n  try {\n    let rssPostCount = config('server.rss.postCount');\n    let keys = await PostsModel.getPostKeys();\n    let postNumbers = keys.reduce((acc, key) => {\n      let [boardName, postNumber] = key.split(':');\n      postNumber = +postNumber;\n      if (!postNumber) {\n        return acc;\n      }\n      if (!acc.hasOwnProperty(boardName)) {\n        acc[boardName] = [];\n      }\n      acc[boardName].push(postNumber);\n      return acc;\n    }, {});\n    await Tools.series(Board.boardNames(), async function(boardName) {\n      let numbers = postNumbers[boardName];\n      if (!numbers || numbers.length <= 0) {\n        return;\n      }\n      let board = Board.board(boardName);\n      if (!board) {\n        return;\n      }\n      numbers = numbers.sort((pn1, pn2) => { return pn2 - pn1; }).slice(0, rssPostCount).reverse();\n      let posts = await PostsModel.getPosts(boardName, numbers, { withFileInfos: true });\n      posts.forEach((post) => {\n        post.subject = BoardsModel.postSubject(post, 150) || post.number;\n      });\n      let rss = {\n        date: Tools.now(),\n        ttl: config('server.rss.ttl'),\n        board: MiscModel.board(board).board,\n        posts: posts,\n        formattedDate: (date) => {\n          return moment().utc().locale('en').format(RSS_DATE_TIME_FORMAT);\n        }\n      };\n      return await Cache.writeFile(`${boardName}/rss.xml`, Renderer.render('pages/rss', rss));\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n};\n\nrouter.render = async function(path) {\n  let match = path.match(/^\\/rss$/);\n  if (match) {\n    return await router.renderRSS();\n  }\n  match = path.match(/^\\/([^\\/]+)$/);\n  if (match) {\n    return await renderPages(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/archive$/);\n  if (match) {\n    return await router.renderArchive(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/catalog$/);\n  if (match) {\n    return await router.renderCatalog(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/res\\/(\\d+)$/);\n  if (match) {\n    return await renderThread(match[1], +match[2]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/arch\\/(\\d+)$/);\n  if (match) {\n    return await renderArchivedThread(match[1], +match[2]);\n  }\n};\n\nrouter.renderThreadHTML = renderThreadHTML;\n\nexport default router;\n"],"sourceRoot":"/source/"}