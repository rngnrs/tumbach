{"version":3,"sources":["controllers/board.js"],"names":["thread","prerendered","targetPath","board","boardName","Error","Tools","translate","model","title","number","isThreadPage","MiscModel","threadNumber","data","Renderer","render","write","Cache","writeFile","renderThreadHTML","BoardsModel","getThread","renderThread","JSON","stringify","archived","archPath","__dirname","mkpath","renderArchivedThread","pageNumber","allowPrerender","getPage","page","series","threads","pageID","readFile","pageJSON","parse","pageHTML","mustRender","some","lastPosts","map","posts","concat","opPost","splice","flatten","reduce","acc","post","pick","_1","postNumber","hasOwnProperty","postsToRerender","pickPostsToRerender","isEmpty","mapObject","getPrerenderedPost","name","renderPage","getPageCount","pageCount","range","renderPages","Files","PostsModel","ThreadsModel","RSS_DATE_TIME_FORMAT","client","router","Router","oldPosts","oldPost","options","bannedFor","sequenceNumber","updatedAt","text","oldRefs","referringPosts","ref","newRefs","oldFileInfos","fileInfos","fileInfo","fileName","extraData","newFileInfos","html","startIndex","indexOf","endPattern","endIndex","lastIndexOf","substring","length","paths","description","path","boardNames","getThreadNumbers","threadNumbers","archivedThreadNumbers","arrays","key","isArray","mustCreate","d","action","mustDelete","threadID","threadData","threadHTML","renderPostFileInfos","renderPost","renderedPost","toArray","setThreadDeleted","removeFile","renderCatalog","sortMode","getCatalog","catalog","suffix","renderArchive","getArchive","archive","renderRSS","bind","rssPostCount","collection","Post","find","subject","createdAt","sort","limit","forEach","postSubject","rss","date","now","ttl","formattedDate","utc","locale","format","match"],"mappings":"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","file":"controllers/board.js","sourcesContent":["import _ from 'underscore';\nimport express from 'express';\nimport FS from 'q-io/fs';\nimport moment from 'moment';\nimport promisify from 'promisify-node';\n\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport * as BoardsModel from '../models/boards';\nimport * as MiscModel from '../models/misc';\nimport * as PostsModel from '../models/posts';\nimport * as ThreadsModel from '../models/threads';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nconst mkpath = promisify('mkpath');\n\nconst RSS_DATE_TIME_FORMAT = 'ddd, DD MMM YYYY HH:mm:ss +0000';\n\nlet client = mongodbClient();\nlet router = express.Router();\n\nfunction pickPostsToRerender(oldPosts, posts) {\n  return _(posts).pick((post, postNumber) => {\n    let oldPost = oldPosts[postNumber];\n    if (!oldPost) {\n      return true;\n    }\n    if (oldPost.options.bannedFor !== post.options.bannedFor) {\n      return true;\n    }\n    if (oldPost.sequenceNumber !== post.sequenceNumber) {\n      return true;\n    }\n    if (oldPost.updatedAt < post.updatedAt) {\n      return true;\n    }\n    if (oldPost.text !== post.text) {\n      return true;\n    }\n    let oldRefs = oldPost.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    let newRefs = post.referringPosts.reduce((acc, ref) => {\n      return `${acc};${ref.boardName}:${ref.postNumber}`;\n    }, '');\n    if (oldRefs !== newRefs) {\n      return true;\n    }\n    let oldFileInfos = oldPost.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    let newFileInfos = post.fileInfos.reduce((acc, fileInfo) => {\n      return `${acc};${fileInfo.fileName}:${JSON.stringify(fileInfo.extraData)}`;\n    }, '');\n    if (oldFileInfos !== newFileInfos) {\n      return true;\n    }\n  });\n}\n\nasync function renderThreadHTML(thread, { prerendered, targetPath } = {}) {\n  let board = Board.board(thread.boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let model = {\n    thread: thread,\n    title: thread.title || `${board.title} — ${thread.number}`,\n    isThreadPage: true,\n    board: MiscModel.board(board).board,\n    threadNumber: thread.number,\n    prerendered: prerendered\n  };\n  let data = Renderer.render('pages/thread', model);\n  if (targetPath) {\n    await FS.write(targetPath, data);\n  } else {\n    await Cache.writeFile(`${thread.boardName}/res/${thread.number}.html`, data);\n  }\n}\n\nasync function renderThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  await Renderer.renderThread(thread);\n  await Cache.writeFile(`${boardName}/res/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread);\n}\n\nasync function renderArchivedThread(boardName, threadNumber) {\n  let thread = await BoardsModel.getThread(boardName, threadNumber);\n  if (!thread || !thread.archived) {\n    throw new Error(Tools.translate('No such thread: >>/$[1]/$[2]', '', boardName, threadNumber));\n  }\n  let archPath = `${__dirname}/../../public/${boardName}/arch`;\n  await mkpath(archPath);\n  await Renderer.renderThread(thread);\n  await FS.write(`${archPath}/${threadNumber}.json`, JSON.stringify({ thread: thread }));\n  await renderThreadHTML(thread, { targetPath: `${archPath}/${threadNumber}.html` });\n}\n\nfunction getPrerenderedPost(html, postNumber) {\n  let startIndex = html.indexOf(`<div id='post-${postNumber}'`);\n  if (startIndex < 0) {\n    return;\n  }\n  let endPattern = `<!--__ololord_end_post#${postNumber}-->`;\n  let endIndex = html.lastIndexOf(endPattern);\n  if (endIndex < 0) {\n    return;\n  }\n  return html.substring(startIndex, endIndex + endPattern.length);\n}\n\nasync function renderPage(boardName, pageNumber, { allowPrerender } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let page = await BoardsModel.getPage(boardName, pageNumber);\n  await Tools.series(page.threads, async function(thread) {\n    return await Renderer.renderThread(thread);\n  });\n  let pageID = (pageNumber > 0) ? pageNumber : 'index';\n  if (allowPrerender) {\n    let pageJSON = await Cache.readFile(`${boardName}/${pageNumber}.json`);\n    pageJSON = JSON.parse(pageJSON);\n    let pageHTML = await Cache.readFile(`${boardName}/${pageID}.html`);\n    let mustRender = page.threads.some((thread) => { return (allowPrerender === thread.number); });\n    let lastPosts = pageJSON.threads.map((thread) => {\n      let posts = thread.lastPosts.concat(thread.opPost);\n      if (allowPrerender === thread.number) {\n        posts.splice(-1, 1);\n      }\n      return posts;\n    });\n    lastPosts = _(lastPosts).flatten().reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    let posts = page.threads.map((thread) => {\n      let posts = thread.lastPosts.concat(thread.opPost);\n      if (allowPrerender === thread.number) {\n        posts.splice(-1, 1);\n      }\n      return posts;\n    });\n    posts = _(posts).flatten().reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    if (!mustRender && _(postsToRerender).isEmpty()) {\n      return;\n    }\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(pageHTML, postNumber);\n    });\n    await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n    page.prerendered = prerendered;\n  } else {\n    await Cache.writeFile(`${boardName}/${pageNumber}.json`, JSON.stringify(page));\n  }\n  page.title =`/${board.name}/ &mdash; ${board.title}`;\n  page.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/${pageID}.html`, Renderer.render('pages/board', page));\n}\n\nasync function renderPages(boardName, { allowPrerender } = {}) {\n  let pageCount = await BoardsModel.getPageCount(boardName);\n  return await Tools.series(_.range(pageCount), async function(pageNumber) {\n    return await renderPage(boardName, pageNumber, { allowPrerender });\n  });\n};\n\nrouter.paths = async function(description) {\n  if (description) {\n    return [{\n      path: '/<board name>',\n      description: Tools.translate('Board pages (from 0 to N)')\n    }, {\n      path: '/<board name>/archive',\n      description: Tools.translate('Board archive page (WITHOUT the archived threads)')\n    }, {\n      path: '/<board name>/catalog',\n      description: Tools.translate('Board catalog page')\n    }, {\n      path: '/<board name>/rss',\n      description: Tools.translate('Board RSS feed')\n    }, {\n      path: '/<board name>/res/<thread number>',\n      description: Tools.translate('A thread')\n    }, {\n      path: '/<board name>/arch/<thread number>',\n      description: Tools.translate('An archived thread')\n    }];\n  }\n  let arrays = await Tools.series(Board.boardNames(), async function(boardName) {\n    let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n    let archivedThreadNumbers = await ThreadsModel.getThreadNumbers(boardName, { archived: true });\n    let paths = [`/${boardName}`, `/${boardName}/archive`, `/${boardName}/catalog`, `/${boardName}/rss`];\n    paths = paths.concat(threadNumbers.map(threadNumber => `/${boardName}/res/${threadNumber}`));\n    return paths.concat(archivedThreadNumbers.map(threadNumber => `/${boardName}/arch/${threadNumber}`));\n  }, true);\n  return _(arrays).flatten();\n};\n\nrouter.renderThread = async function(key, data) {\n  if (!_(data).isArray()) {\n    data = [data];\n  }\n  let mustCreate = data.some((d) => { return 'create' === d.action; });\n  let mustDelete = data.some((d) => { return 'delete' === d.action; });\n  if (mustCreate && mustDelete) {\n    return; //NOTE: This should actually never happen\n  }\n  data = data.reduce((acc, d) => {\n    if (!acc) {\n      return d;\n    }\n    if (d.action < acc.action) {\n      return d;\n    }\n    return acc;\n  });\n  let board = Board.board(data.boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  switch (data.action) {\n  case 'create': {\n    await renderThread(data.boardName, data.threadNumber);\n    break;\n  }\n  case 'edit': {\n    let threadID = `${data.boardName}/res/${data.threadNumber}`;\n    let threadData = await Cache.readFile(`${threadID}.json`);\n    let model = JSON.parse(threadData);\n    let thread = model.thread;\n    let lastPosts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    thread = await BoardsModel.getThread(data.boardName, data.threadNumber);\n    let posts = thread.lastPosts.reduce((acc, post) => {\n      acc[post.number] = post;\n      return acc;\n    }, {});\n    lastPosts = _(lastPosts).pick((_1, postNumber) => posts.hasOwnProperty(postNumber));\n    let postsToRerender = pickPostsToRerender(lastPosts, posts);\n    let threadHTML = await Cache.readFile(`${threadID}.html`);\n    let prerendered = _(lastPosts).pick((_1, postNumber) => !postsToRerender.hasOwnProperty(postNumber));\n    prerendered = _(prerendered).mapObject((_1, postNumber) => {\n      return getPrerenderedPost(threadHTML, postNumber);\n    });\n    await Files.renderPostFileInfos(thread.opPost);\n    thread.opPost = await board.renderPost(thread.opPost);\n    await Tools.series(postsToRerender, async function(post, postNumber) {\n      await Files.renderPostFileInfos(post);\n      let renderedPost = await board.renderPost(post);\n      lastPosts[postNumber] = renderedPost;\n    });\n    thread.lastPosts = _(lastPosts).toArray();\n    model.thread = thread;\n    await Cache.writeFile(`${threadID}.json`, JSON.stringify(model));\n    await renderThreadHTML(thread, { prerendered: prerendered });\n    break;\n  }\n  case 'delete': {\n    await ThreadsModel.setThreadDeleted(`${data.boardName}:${data.threadNumber}`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.json`);\n    await Cache.removeFile(`${data.boardName}/res/${data.threadNumber}.html`);\n    break;\n  }\n  default: {\n    throw new Error(Tools.translate('Invalid action'));\n  }\n  }\n}\n\nrouter.renderPages = async function(boardName, threadNumber) {\n  return await renderPages(boardName, { allowPrerender: threadNumber || true });\n};\n\nrouter.renderCatalog = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  await Tools.series(['date', 'recent', 'bumps'], async function(sortMode) {\n    let catalog = await BoardsModel.getCatalog(boardName, sortMode);\n    await Tools.series(catalog.threads, async function(thread) {\n      return await Renderer.renderThread(thread);\n    });\n    let suffix = ('date' !== sortMode) ? `-${sortMode}` : '';\n    await Cache.writeFile(`${boardName}/catalog${suffix}.json`, JSON.stringify(catalog));\n    catalog.title = board.title;\n    catalog.board = MiscModel.board(board).board;\n    catalog.sortMode = sortMode;\n    return Cache.writeFile(`${boardName}/catalog${suffix}.html`, Renderer.render('pages/catalog', catalog));\n  });\n};\n\nrouter.renderArchive = async function(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let archive = await BoardsModel.getArchive(boardName);\n  await Cache.writeFile(`${boardName}/archive.json`, JSON.stringify(archive));\n  archive.title = board.title;\n  archive.board = MiscModel.board(board).board;\n  await Cache.writeFile(`${boardName}/archive.html`, Renderer.render('pages/archive', archive));\n};\n\nrouter.renderRSS = async function(boardName) {\n  if (!boardName) {\n    return await Tools.series(Board.boardNames(), router.renderRSS.bind(router));\n  }\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board name: $[1]', '', boardName));\n  }\n  let rssPostCount = config('server.rss.postCount');\n  let Post = await client.collection('post');\n  let posts = await Post.find({ boardName: boardName }, {\n    number: 1,\n    threadNumber: 1,\n    subject: 1,\n    name: 1,\n    text: 1,\n    fileInfos: 1,\n    createdAt: 1\n  }).sort({ createdAt: -1 }).limit(rssPostCount).sort({ createdAt: 1 }).toArray();\n  if (posts.length <= 0) {\n    return;\n  }\n  posts.forEach((post) => {\n    post.subject = BoardsModel.postSubject(post, 150) || post.number; //TODO: Magic number\n  });\n  let rss = {\n    date: Tools.now(),\n    ttl: config('server.rss.ttl'),\n    board: MiscModel.board(board).board,\n    posts: posts,\n    formattedDate: (date) => {\n      return moment().utc().locale('en').format(RSS_DATE_TIME_FORMAT);\n    }\n  };\n  return await Cache.writeFile(`${boardName}/rss.xml`, Renderer.render('pages/rss', rss));\n};\n\nrouter.render = async function(path) {\n  let match = path.match(/^\\/([^\\/]+)\\/rss$/);\n  if (match) {\n    return await router.renderRSS(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)$/);\n  if (match) {\n    return await renderPages(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/archive$/);\n  if (match) {\n    return await router.renderArchive(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/catalog$/);\n  if (match) {\n    return await router.renderCatalog(match[1]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/res\\/(\\d+)$/);\n  if (match) {\n    return await renderThread(match[1], +match[2]);\n  }\n  match = path.match(/^\\/([^\\/]+)\\/arch\\/(\\d+)$/);\n  if (match) {\n    return await renderArchivedThread(match[1], +match[2]);\n  }\n};\n\nrouter.renderThreadHTML = renderThreadHTML;\n\nexport default router;\n"],"sourceRoot":"/source/"}