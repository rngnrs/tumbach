{"version":3,"sources":["helpers/logger.js"],"names":["IPC","CODE","WinstonClusterTransport","options","name","level","msg","meta","callback","silent","stripColors","replace","code","message","cmd","worker","id","pid","process","send","console","error","stack","emit","data","Transport","transports","Cluster","TRANSPORT_MAP","ctor","Console","opts","timestamp","colorize","filename","__dirname","maxsize","maxFiles","map","filter","transport","length","toArray","Logger","isMaster","handleMessage","initialize","serverType","on","server","log"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;IAAYA,G;;;;;;;;;;;;;;AAEZ,IAAMC,OAAO,yBAAb;;IAEMC,uB;;;AACJ,qCAA0B;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAAA;;AAAA,kJAClBA,OADkB;;AAExB,UAAKC,IAAL,GAAY,SAAZ;AAFwB;AAGzB;;;;;4EAESC,K,EAAOC,G,EAAKC,I,EAAMC,Q;;;;;;qBACtB,KAAKC,M;;;;;iDACAD,SAAS,IAAT,EAAe,IAAf,C;;;AAET,oBAAI,KAAKE,WAAT,EAAsB;AACpBJ,wBAAM,CAAC,KAAKA,GAAN,EAAWK,OAAX,CAAmBC,IAAnB,EAAyB,EAAzB,CAAN;AACD;AACGC,uB,GAAU;AACZC,uBAAK,KADO;AAEZC,0BAAQ,kBAAQA,MAAR,CAAeC,EAAf,IAAqB,IAFjB;AAGZC,uBAAKC,QAAQD,GAHD;AAIZZ,yBAAOA,KAJK;AAKZC,uBAAKA,GALO;AAMZC,wBAAMA;AANM,iB;;;uBASNP,IAAImB,IAAJ,CAAS,KAAT,EAAgBN,OAAhB,C;;;;;;;;;;AAENO,wBAAQC,KAAR,CAAc,YAAIC,KAAJ,eAAd;iDACOd,qB;;;AAET,qBAAKe,IAAL,CAAU,QAAV;AACAf,yBAAS,IAAT,EAAe,IAAf;iDACOK,O;;;;;;;;;;;;;;;;;;2BAGFW,I,EAAMhB,Q,EAAU,CAAG;;;0BAEpBL,O,EAASK,Q,EAAU,CAAG;;;2BAErBL,O,EAAS,CAAG;;;yBAEdK,Q,EAAU;AACbA;AACD;;;4BAEO,CAAG;;;4BAEH,CAAG;;;;EA5CyB,kBAAQiB,S;;AA+C9C,kBAAQC,UAAR,CAAmBC,OAAnB,GAA6BzB,uBAA7B;;AAEA,IAAM0B,gBAAgB;AACpB,aAAW;AACTC,UAAM,kBAAQH,UAAR,CAAmBI,OADhB;AAETC,UAAM;AACJC,iBAAW,IADP;AAEJC,gBAAU;AAFN;AAFG,GADS;AAQpB,UAAQ;AACNJ,0CADM;AAENE,UAAM;AACJG,gBAAaC,SAAb,4BADI;AAEJC,eAAS,sBAAO,oBAAP,CAFL;AAGJC,gBAAU,sBAAO,qBAAP;AAHN;AAFA;AARY,CAAtB;;AAkBA,IAAIX,aAAa,sBAAO,uBAAP,EAAgCY,GAAhC,CAAoC,UAAClC,IAAD,EAAU;AAC7D,SAAOwB,cAAcxB,IAAd,CAAP;AACD,CAFgB,EAEdmC,MAFc,CAEP;AAAA,SAAa,CAAC,CAACC,SAAf;AAAA,CAFO,CAAjB;;AAIA,IAAId,WAAWe,MAAX,IAAqB,CAAzB,EAA4B;AAC1Bf,eAAa,0BAAEE,aAAF,EAAiBc,OAAjB,EAAb;AACD;;AAED,IAAIC,eAAJ;;AAEA,IAAI,kBAAQC,QAAZ,EAAsB;AACpBD,WAAS,IAAI,kBAAQA,MAAZ,CAAmB,EAAEjB,YAAYA,WAAWY,GAAX,CAAe;AAAA,UAAGT,IAAH,SAAGA,IAAH;AAAA,UAASE,IAAT,SAASA,IAAT;AAAA,aAAoB,IAAIF,IAAJ,CAASE,IAAT,CAApB;AAAA,KAAf,CAAd,EAAnB,CAAT;AACD,CAFD,MAEO;AACLY,WAAS,IAAI,kBAAQA,MAAZ,CAAmB,EAAEjB,YAAY,CAAC,IAAIxB,uBAAJ,EAAD,CAAd,EAAnB,CAAT;AACD;;AAED,SAAS2C,aAAT,CAAuBvC,GAAvB,EAA4B,CAE3B;;AAEDqC,OAAOG,UAAP,GAAoB,UAACC,UAAD,EAAgB;AAClC,MAAI,kBAAQH,QAAZ,EAAsB;AACpB5C,QAAIgD,EAAJ,CAAO,KAAP,EAAc,UAAC1C,GAAD,EAAS;AACrBA,UAAIC,IAAJ,CAAS0C,MAAT,GAAkBF,UAAlB;AACAzC,UAAIC,IAAJ,CAASU,GAAT,GAAeX,IAAIW,GAAnB;AACAX,UAAIC,IAAJ,CAASQ,MAAT,GAAkBT,IAAIS,MAAtB;AACA4B,aAAOO,GAAP,CAAW5C,IAAID,KAAf,EAAsBC,IAAIA,GAA1B,EAA+BA,IAAIC,IAAnC;AACD,KALD;AAMD;AACF,CATD;;kBAWeoC,M","file":"logger.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport Winston from 'winston';\nimport WinstonDailyRotateFileTransport from 'winston-daily-rotate-file';\n\nimport config from './config';\nimport * as IPC from './ipc';\n\nconst CODE = /\\u001b\\[(\\d+(;\\d+)*)?m/g;\n\nclass WinstonClusterTransport extends Winston.Transport {\n  constructor(options = {}) {\n    super(options);\n    this.name = 'cluster';\n  }\n\n  async log(level, msg, meta, callback) {\n    if (this.silent) {\n      return callback(null, true);\n    }\n    if (this.stripColors) {\n      msg = ('' + msg).replace(code, '');\n    }\n    let message = {\n      cmd: 'log',\n      worker: Cluster.worker.id || null,\n      pid: process.pid,\n      level: level,\n      msg: msg,\n      meta: meta\n    };\n    try {\n      await IPC.send('log', message);\n    } catch (err) {\n      console.error(err.stack || err);\n      return callback(err);\n    }\n    this.emit('logged');\n    callback(null, true);\n    return message;\n  }\n\n  _write(data, callback) { }\n\n  query(options, callback) { }\n\n  stream(options) { }\n\n  open(callback) {\n    callback();\n  }\n\n  close() { }\n\n  flush() { }\n}\n\nWinston.transports.Cluster = WinstonClusterTransport;\n\nconst TRANSPORT_MAP = {\n  'console': {\n    ctor: Winston.transports.Console,\n    opts: {\n      timestamp: true,\n      colorize: true\n    }\n  },\n  'file': {\n    ctor: WinstonDailyRotateFileTransport,\n    opts: {\n      filename: `${__dirname}/../../logs/ololord.log`,\n      maxsize: config('system.log.maxSize'),\n      maxFiles: config('system.log.maxFiles')\n    }\n  }\n};\n\nlet transports = config('system.log.transports').map((name) => {\n  return TRANSPORT_MAP[name];\n}).filter(transport => !!transport);\n\nif (transports.length <= 0) {\n  transports = _(TRANSPORT_MAP).toArray();\n}\n\nlet Logger;\n\nif (Cluster.isMaster) {\n  Logger = new Winston.Logger({ transports: transports.map(({ ctor, opts }) => new ctor(opts)) });\n} else {\n  Logger = new Winston.Logger({ transports: [new WinstonClusterTransport()] });\n}\n\nfunction handleMessage(msg) {\n\n}\n\nLogger.initialize = (serverType) => {\n  if (Cluster.isMaster) {\n    IPC.on('log', (msg) => {\n      msg.meta.server = serverType;\n      msg.meta.pid = msg.pid;\n      msg.meta.worker = msg.worker;\n      Logger.log(msg.level, msg.msg, msg.meta);\n    });\n  }\n}\n\nexport default Logger;\n"]}