{"version":3,"sources":["helpers/ipc.js"],"names":["message","workerID","task","tasks","get","id","delete","error","resolve","data","reject","handler","handlers","type","proc","workers","process","send","Tools","translate","stack","toString","handleMessage","key","Object","keys","map","load","workerLoads","sort","w1","w2","shift","has","set","result","Promise","performTask","scheduled","length","splice","n","nextTask","forEach","scheduledMap","push","addTask","boardName","threadNumber","postNumber","action","ThreadsModel","isThreadDeleted","isDeleted","renderThread","renderPages","renderCatalog","isMaster","renderArchive","render","on","Map","scheduledRenderPages","scheduledRenderThread","scheduledRenderCatalog","scheduledRenderArchive","sendMessage","nowait","v4","err","worker","Error","promises","all","module","exports"],"mappings":"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","file":"helpers/ipc.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport UUID from 'uuid';\n\nimport * as ThreadsModel from '../models/threads';\nimport Logger from './logger';\nimport * as Tools from './tools';\n\nlet handlers = new Map();\nlet tasks = new Map();\nlet scheduledRenderPages = new Map();\nlet scheduledRenderThread = new Map();\nlet scheduledRenderCatalog = new Map();\nlet scheduledRenderArchive = new Map();\nlet scheduledMap = new Map([\n  ['renderPages', scheduledRenderPages],\n  ['renderThread', scheduledRenderThread],\n  ['renderCatalog', scheduledRenderCatalog],\n  ['renderArchive', scheduledRenderArchive]\n]);\nlet workerLoads = new Map();\n\nasync function handleMessage(message, workerID) {\n  let task = tasks.get(message.id);\n  if (task) {\n    tasks.delete(message.id);\n    if (!message.error) {\n      task.resolve(message.data);\n    } else {\n      task.reject(message.error);\n    }\n  } else {\n    let handler = handlers.get(message.type);\n    let proc = workerID ? Cluster.workers[workerID] : process;\n    if (typeof handler !== 'function') {\n      proc.send({\n        id: message.id,\n        type: message.type,\n        error: Tools.translate('Method not found: $[1]', '', message.type)\n      });\n    }\n    try {\n      let data = await handler(message.data);\n      proc.send({\n        id: message.id,\n        type: message.type,\n        data: data || null\n      });\n    } catch (err) {\n      proc.send({\n        id: message.id,\n        type: message.type,\n        error: err.stack || err.toString()\n      });\n    }\n  }\n}\n\nfunction sendMessage(proc, type, data, nowait) {\n  return new Promise((resolve, reject) => {\n    let id = UUID.v4();\n    tasks.set(id, {\n      resolve: resolve,\n      reject: reject\n    });\n    proc.send({\n      id: id,\n      type: type,\n      data: data || null\n    }, (err) => {\n      if (err) {\n        tasks.delete(id);\n        reject(err);\n        return;\n      }\n      if (nowait) {\n        tasks.delete(id);\n        resolve();\n      }\n    });\n  });\n}\n\nif (Cluster.isMaster) {\n  Cluster.on('online', (worker) => {\n    worker.process.on('message', (message) => {\n      handleMessage(message, worker.id);\n    });\n  });\n} else {\n  process.on('message', (message) => {\n    handleMessage(message);\n  });\n}\n\nexport function send(type, data, nowait, workerID) {\n  if (Cluster.isMaster) {\n    if (workerID) {\n      let worker = Cluster.workers[workerID];\n      if (!worker) {\n        return Promise.reject(new Error(Tools.translate('Invalid worker ID')));\n      }\n      return sendMessage(worker.process, type, data, nowait);\n    } else {\n      let promises = _(Cluster.workers).map((worker) => {\n        return sendMessage(worker.process, type, data, nowait);\n      });\n      return Promise.all(promises);\n    }\n  } else {\n    return sendMessage(process, type, data, nowait);\n  }\n}\n\nexport function on(type, handler) {\n  handlers.set(type, handler);\n  return module.exports;\n}\n\nasync function performTask(type, key, data) {\n  let workerID = Object.keys(Cluster.workers).map((id) => {\n    return {\n      id: id,\n      load: workerLoads.get(id) || 0\n    };\n  }).sort((w1, w2) => { return w1.load - w2.load; }).shift().id;\n  if (workerLoads.has(workerID)) {\n    workerLoads.set(workerID, workerLoads.get(workerID) + 1);\n  } else {\n    workerLoads.set(workerID, 1);\n  }\n  try {\n    let result = await send('render', {\n      type: type,\n      key: key,\n      data: data\n    }, false, workerID);\n    workerLoads.set(workerID, workerLoads.get(workerID) - 1);\n    return result;\n  } catch (err) {\n    workerLoads.set(workerID, workerLoads.get(workerID) - 1);\n    return Promise.reject(err);\n  }\n}\n\nasync function nextTask(type, key, map) {\n  let scheduled = map.get(key);\n  if (!scheduled) {\n    return;\n  }\n  if (scheduled.length <= 0) {\n    map.delete(key);\n    return;\n  }\n  //NOTE: Clearing initial array, but preserving it's copy\n  scheduled = scheduled.splice(0, scheduled.length);\n  try {\n    await performTask(type, key, scheduled.map(n => n.data));\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  nextTask(type, key, map);\n  scheduled.forEach((n) => { n.resolve(); });\n}\n\nasync function addTask(type, key, data) {\n  let map = scheduledMap.get(type);\n  let scheduled = map.get(key);\n  if (scheduled) {\n    return new Promise((resolve) => {\n      scheduled.push({\n        resolve: resolve,\n        data: data\n      });\n    });\n  } else {\n    map.set(key, []);\n    try {\n      await performTask(type, key, data);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n    nextTask(type, key, map);\n  }\n}\n\nasync function renderThread(boardName, threadNumber, postNumber, action) {\n  let isDeleted = await ThreadsModel.isThreadDeleted(boardName, threadNumber);\n  if (isDeleted) {\n    return;\n  }\n  if (threadNumber === postNumber) {\n    if ('edit' === action) {\n      action = 'create';\n    }\n  } else {\n    action = 'edit';\n  }\n  return await addTask('renderThread', `${boardName}:${threadNumber}`, {\n    boardName: boardName,\n    threadNumber: threadNumber,\n    action: action\n  });\n}\n\nexport async function renderPages(boardName) {\n  return await addTask('renderPages', boardName);\n}\n\nexport async function renderCatalog(boardName) {\n  return await addTask('renderCatalog', boardName);\n}\n\nexport async function renderArchive(boardName) {\n  try {\n    if (Cluster.isMaster) {\n      return await addTask('renderArchive', boardName);\n    } else {\n      await send('renderArchive', boardName);\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function render(boardName, threadNumber, postNumber, action) {\n  try {\n    if (Cluster.isMaster) {\n      switch (action) {\n      case 'create':\n        await renderThread(boardName, threadNumber, postNumber, action);\n        (async function() {\n          await renderPages(boardName);\n          await renderCatalog(boardName);\n        })();\n        break;\n      case 'edit':\n      case 'delete':\n        if (threadNumber === postNumber) {\n          await renderThread(boardName, threadNumber, postNumber, action);\n          await renderPages(boardName);\n          renderCatalog(boardName);\n        } else {\n          (async function() {\n            await renderThread(boardName, threadNumber, postNumber, action);\n            await renderPages(boardName);\n            renderCatalog(boardName);\n          })();\n        }\n        break;\n      default:\n        (async function() {\n          await renderThread(boardName, threadNumber, postNumber, action);\n          await renderPages(boardName);\n          renderCatalog(boardName);\n        });\n        break;\n      }\n    } else {\n      await send('render', {\n        boardName: boardName,\n        threadNumber: threadNumber,\n        postNumber: postNumber,\n        action: action\n      });\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n"],"sourceRoot":"/source/"}