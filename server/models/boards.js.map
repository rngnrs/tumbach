{"version":3,"sources":["models/boards.js"],"names":["boardName","board","Error","Tools","translate","ThreadQuotas","exists","get","quota","option","test","q","getQuota","expireAt","threadTimeQuota","setex","setQuota","key","incrementBy","incrementQuotaBy","threadQuota","set","useQuota","checkQuota","threadNumber","ThreadsModel","getThread","thread","PostsModel","getThreadPosts","sort","posts","postCount","length","opPost","splice","lastPosts","title","postSubject","addDataToThread","pageNumber","n","pageCount","pageCounts","getThreads","limit","threadsPerPage","offset","threads","client","collection","Post","series","getPost","number","withExtraData","withFileInfos","withReferences","maxLastPosts","getThreadPostCount","omittedPosts","filter","getLastPostNumber","lastPostNumber","currentPage","postingSpeed","Renderer","postingSpeedString","launchDate","getPage","sortMode","sortFunction","sortThreadsByCreationDate","toLowerCase","sortThreadsByDate","sortThreadsByPostCount","getCatalog","archived","getArchive","PostCounter","findOne","_id","result","boardNames","isArray","some","query","$in","find","toArray","reduce","acc","getLastPostNumbers","Thread","getThreadCount","threadCount","Math","ceil","getPageCount","i","findOneAndUpdate","$inc","projection","upsert","returnOriginal","value","skippedGetOrder","pow","nextPostNumber","clearDeletedThreads","initialize","req","ip","correctAddress","deletedThreads","updatedThreads","deletedPosts","forEach","post","hasOwnProperty","deleteOne","deleteThread","IPC","render","delall","Map","parse","stringify","toString","bumpLimit","postLimit","bumpLimitReached","postLimitReached","postingEnabled","closed","maxLength","subject","text","plainText","replace","l","substr"],"mappings":"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","file":"boards.js","sourcesContent":["import _ from 'underscore';\n\nimport * as PostsModel from './posts';\nimport * as ThreadsModel from './threads';\nimport Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as IPC from '../helpers/ipc';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\nimport config from '../helpers/config';\n\nimport Key from '../storage/key';\nimport redisClient from '../storage/redis-client-factory';\n\nlet client = mongodbClient();\nlet pageCounts = new Map();\n\nlet ThreadQuotas = new Key(redisClient(), 'threadQuotas', {\n  parse: quota => +quota,\n  stringify: quota => quota.toString()\n});\n\nfunction addDataToThread(thread, board) {\n  thread.bumpLimit = board.bumpLimit;\n  thread.postLimit = board.postLimit;\n  thread.bumpLimitReached = (thread.postCount >= board.bumpLimit);\n  thread.postLimitReached = (thread.postCount >= board.postLimit);\n  thread.postingEnabled = (board.postingEnabled && !thread.closed);\n}\n\nexport async function getQuota(boardName) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let exists = await ThreadQuotas.exists(boardName);\n  if (!exists)\n    return false;\n  let quota = await ThreadQuotas.get(boardName);\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function setQuota(boardName, quota) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let expireAt = board.threadTimeQuota;\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  return await ThreadQuotas.setex(quota, expireAt, boardName);\n}\n\nexport async function incrementQuotaBy(boardName, quota) {\n  let key;\n  if (boardName) {\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    key = boardName;\n  }\n  quota = Tools.option(quota, 'number', 1, { test: (q) => { return 0 !== q; } });\n  return await ThreadQuotas.incrementBy(quota, key);\n}\n\nexport async function useQuota(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (board.threadQuota < 1) {\n    return true;\n  }\n  let quota = await ThreadQuotas.incrementBy(-1, boardName);\n  if (+quota < 0) {\n    return await ThreadQuotas.set(boardName, 0);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function checkQuota(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (board.threadQuota > 0) {\n    let quota = await getQuota(boardName);\n    if (quota === false) {\n      await setQuota(boardName, board.threadQuota);\n      quota = await getQuota(boardName);\n    }\n    if(+quota <= 0)\n      return false;\n    await useQuota(boardName);\n  }\n  return true;\n}\n\nexport function postSubject(post, maxLength) {\n  let subject = '';\n  if (post.subject) {\n    subject = post.subject;\n  } else if (post.text) {\n    subject = Renderer.plainText(post.text);\n  }\n  subject = subject.replace(/\\r*\\n+/gi, '');\n  maxLength = Tools.option(maxLength, 'number', 0, { test: (l) => { return l > 0; } });\n  if (maxLength > 1 && subject.length > maxLength) {\n    subject = subject.substr(0, maxLength - 1) + '…';\n  }\n  return subject;\n}\n\nexport async function getThread(boardName, threadNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let thread = await ThreadsModel.getThread(boardName, threadNumber);\n  let posts = await PostsModel.getThreadPosts(boardName, threadNumber, {sort: true});\n  thread.postCount = posts.length;\n  if (thread.postCount <= 0) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  thread.opPost = posts.splice(0, 1)[0];\n  thread.lastPosts = posts;\n  thread.title = postSubject(thread.opPost, 50) || null;\n  addDataToThread(thread, board);\n  return thread;\n}\n\nexport async function getPage(boardName, pageNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  pageNumber = Tools.option(pageNumber, 'number', -1, { test: (n) => { return n >= 0; } });\n  let pageCount = pageCounts.get(boardName);\n  if (pageNumber < 0 || pageNumber >= pageCount) {\n    throw new Error(Tools.translate('Invalid page number'));\n  }\n  let threads = await ThreadsModel.getThreads(boardName, {\n    sort: -1,\n    limit: board.threadsPerPage,\n    offset: pageNumber * board.threadsPerPage\n  });\n  let Post = await client.collection('post');\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.lastPosts = await PostsModel.getThreadPosts(boardName, thread.number, {\n      limit: board.maxLastPosts,\n      offset: 1,\n      sort: true\n    });\n    thread.postCount = await ThreadsModel.getThreadPostCount(boardName, thread.number);\n    addDataToThread(thread, board);\n    if (thread.postCount > (board.maxLastPosts + 1)) {\n      thread.omittedPosts = thread.postCount - board.maxLastPosts - 1;\n    } else {\n      thread.omittedPosts = 0;\n    }\n  });\n  threads = threads.filter((thread) => { return (thread.opPost && (thread.postCount > 0)); });\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads,\n    pageCount: pageCount,\n    currentPage: pageNumber,\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getCatalog(boardName, sortMode) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let threads = await ThreadsModel.getThreads(boardName);\n  let Post = await client.collection('post');\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.postCount = await ThreadsModel.getThreadPostCount(boardName, thread.number);\n    addDataToThread(thread, board);\n  });\n  let sortFunction = ThreadsModel.sortThreadsByCreationDate;\n  switch ((sortMode || 'date').toLowerCase()) {\n  case 'recent':\n    sortFunction = ThreadsModel.sortThreadsByDate;\n    break;\n  case 'bumps':\n    sortFunction = ThreadsModel.sortThreadsByPostCount;\n    break;\n  default:\n    break;\n  }\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads.sort(sortFunction),\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getArchive(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let threads = await ThreadsModel.getThreads(boardName, { archived: true });\n  threads.sort(ThreadsModel.sortThreadsByDate);\n  let Post = await client.collection('post');\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number);\n    thread.title = postSubject(thread.opPost, 50) || null;\n  });\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads,\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getLastPostNumber(boardName) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid boardName'));\n  }\n  let PostCounter = await client.collection('postCounter');\n  let result = await PostCounter.findOne({ _id: boardName }, { lastPostNumber: 1 });\n  return result ? result.lastPostNumber : 0;\n}\n\nexport async function getLastPostNumbers(boardNames) {\n  if (!_(boardNames).isArray()) {\n    boardNames = [boardNames];\n  }\n  if (boardNames.some(boardName => !Board.board(boardName))) {\n    throw new Error(Tools.translate('Invalid boardName'));\n  }\n  let PostCounter = await client.collection('postCounter');\n  let query = {\n    _id: { $in: boardNames }\n  };\n  let result = await PostCounter.find(query).toArray();\n  return result.reduce((acc, { _id, lastPostNumber }) => {\n    acc[_id] = lastPostNumber;\n    return acc;\n  }, {});\n}\n\nexport async function getPageCount(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Thread = await client.collection('thread');\n  let threadCount = await ThreadsModel.getThreadCount(boardName);\n  let pageCount = Math.ceil(threadCount / board.threadsPerPage) || 1;\n  pageCounts.set(boardName, pageCount);\n  return pageCount;\n}\n\nexport async function nextPostNumber(boardName, incrementBy) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  incrementBy = Tools.option(incrementBy, 'number', 1, { test: (i) => { return i >= 1; } });\n  let PostCounter = await client.collection('postCounter');\n  let result = await PostCounter.findOneAndUpdate({ _id: boardName }, {\n    $inc: { lastPostNumber: incrementBy }\n  }, {\n    projection: { lastPostNumber: 1 },\n    upsert: true,\n    returnOriginal: false\n  });\n  if (!result) {\n    return 0;\n  }\n  let { lastPostNumber } = result.value;\n  //TODO: improve get skipping\n  if ((1 === incrementBy) && (board.skippedGetOrder > 0) && !(lastPostNumber % Math.pow(10, board.skippedGetOrder))) {\n    return await nextPostNumber(boardName, incrementBy);\n  }\n  return lastPostNumber;\n}\n\nexport async function initialize() {\n  await Tools.series(Board.boardNames(), async function(boardName) {\n    await getPageCount(boardName);\n  });\n  await ThreadsModel.clearDeletedThreads();\n}\n\nexport async function delall(req, ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    throw new Error(Tools.translate('Invalid IP address'));\n  }\n  let deletedThreads = {};\n  let updatedThreads = {};\n  let deletedPosts = {};\n  let Post = await client.collection('post');\n  await Tools.series(boardNames, async function(boardName) {\n    let posts = await Post.find({\n      boardName: boardName,\n      'user.ip': ip\n    }, {\n      number: 1,\n      threadNumber: 1\n    }).toArray();\n    posts.forEach((post) => {\n      if (post.threadNumber === post.number) {\n        deletedThreads[`${boardName}:${post.threadNumber}`] = {\n          boardName: boardName,\n          number: post.threadNumber\n        };\n      }\n    });\n    posts.filter(post => !deletedThreads.hasOwnProperty(`${boardName}:${post.threadNumber}`)).forEach((post) => {\n      updatedThreads[`${boardName}:${post.threadNumber}`] = {\n        boardName: boardName,\n        number: post.threadNumber\n      };\n      deletedPosts[`${boardName}:${post.number}`] = {\n        boardName: boardName,\n        number: post.number,\n        threadNumber: post.threadNumber\n      };\n    });\n  });\n  await Tools.series(deletedPosts, async function(post) {\n    await Post.deleteOne({\n      boardName: post.boardName,\n      number: post.number\n    });\n    // NOTE: What's this?!\n    //await PostsModel.removePostData(post.boardName, post.number, post.threadNumber);\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await ThreadsModel.deleteThread(thread.boardName, thread.number);\n  });\n  await Tools.series(updatedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'edit');\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'delete');\n  });\n}\n"]}