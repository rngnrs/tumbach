{"version":3,"sources":["models/boards.js"],"names":["boardName","threadNumber","board","Promise","reject","Error","Tools","translate","ThreadsModel","getThread","thread","getThreadPosts","withExtraData","withFileInfos","withReferences","posts","postCount","length","opPost","splice","lastPosts","title","postSubject","addDataToThread","pageNumber","option","test","n","pageCount","pageCounts","get","getThreadNumbers","threadNumbers","getThreads","withPostNumbers","threads","sort","sortThreadsByDate","start","threadsPerPage","slice","series","PostsModel","getPost","number","limit","maxLastPosts","reverse","notOP","postNumbers","omittedPosts","getLastPostNumber","lastPostNumber","currentPage","postingSpeed","Renderer","postingSpeedString","launchDate","getPage","sortMode","sortFunction","sortThreadsByCreationDate","toLowerCase","sortThreadsByPostCount","getCatalog","path","__dirname","exists","list","fileNames","filter","fileName","split","pop","stat","stats","shift","birthtime","node","valueOf","t1","t2","getArchive","PostCounters","getOne","boardNames","isArray","some","getSome","getLastPostNumbers","Threads","count","threadCount","Math","ceil","set","getPageCount","incrementBy","i","postNumber","skippedGetOrder","pow","nextPostNumber","clearDeletedThreads","initialize","req","ip","correctAddress","deletedThreads","updatedThreads","deletedPosts","UsersModel","getUserPostNumbers","getPosts","forEach","post","hasOwnProperty","removePost","removeThread","IPC","render","delall","MiscModel","parse","stringify","toString","Map","bumpLimit","postLimit","bumpLimitReached","postLimitReached","postingEnabled","closed","maxLength","subject","text","plainText","replace","l","substr"],"mappings":"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","file":"models/boards.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport FS from 'q-io/fs';\n\nimport * as MiscModel from './misc';\nimport * as PostsModel from './posts';\nimport * as ThreadsModel from './threads';\nimport Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport redisClient from '../storage/redis-client-factory';\nimport Hash from '../storage/hash';\n\nlet PostCounters = new Hash(redisClient(), 'postCounters', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\nlet Threads = new Hash(redisClient(), 'threads');\n\nlet pageCounts = new Map();\n\nfunction addDataToThread(thread, board) {\n  thread.bumpLimit = board.bumpLimit;\n  thread.postLimit = board.postLimit;\n  thread.bumpLimitReached = (thread.postCount >= board.bumpLimit);\n  thread.postLimitReached = (thread.postCount >= board.postLimit);\n  thread.postingEnabled = (board.postingEnabled && !thread.closed);\n}\n\nexport function postSubject(post, maxLength) {\n  let subject = '';\n  if (post.subject) {\n    subject = post.subject;\n  } else if (post.text) {\n    subject = Renderer.plainText(post.text);\n  }\n  subject = subject.replace(/\\r*\\n+/gi, '');\n  maxLength = Tools.option(maxLength, 'number', 0, { test: (l) => { return l > 0; } });\n  if (maxLength > 1 && subject.length > maxLength) {\n    subject = subject.substr(0, maxLength - 1) + '…';\n  }\n  return subject;\n}\n\nexport async function getThread(boardName, threadNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let thread = await ThreadsModel.getThread(boardName, threadNumber);\n  let posts = await ThreadsModel.getThreadPosts(boardName, threadNumber, {\n    withExtraData: true,\n    withFileInfos: true,\n    withReferences: true\n  });\n  thread.postCount = posts.length;\n  thread.opPost = posts.splice(0, 1)[0];\n  thread.lastPosts = posts;\n  thread.title = postSubject(thread.opPost, 50) || null;\n  addDataToThread(thread, board);\n  return thread;\n}\n\nexport async function getPage(boardName, pageNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  pageNumber = Tools.option(pageNumber, 'number', -1, { test: (n) => { return n >= 0; } });\n  let pageCount = pageCounts.get(boardName);\n  if (pageNumber < 0 || pageNumber >= pageCount) {\n    return Promise.reject(new Error(Tools.translate('Invalid page number')));\n  }\n  let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n  let threads = await ThreadsModel.getThreads(boardName, threadNumbers, { withPostNumbers: true });\n  threads.sort(ThreadsModel.sortThreadsByDate);\n  let start = pageNumber * board.threadsPerPage;\n  threads = threads.slice(start, start + board.threadsPerPage);\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    let lastPosts = await ThreadsModel.getThreadPosts(boardName, thread.number, {\n      limit: board.maxLastPosts,\n      reverse: true,\n      notOP: true,\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.lastPosts = lastPosts.reverse();\n    thread.postCount = thread.postNumbers.length;\n    delete thread.postNumbers;\n    addDataToThread(thread, board);\n    if (thread.postCount > (board.maxLastPosts + 1)) {\n      thread.omittedPosts = thread.postCount - board.maxLastPosts - 1;\n    } else {\n      thread.omittedPosts = 0;\n    }\n  });\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads,\n    pageCount: pageCount,\n    currentPage: pageNumber,\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getCatalog(boardName, sortMode) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let threadNumbers = await ThreadsModel.getThreadNumbers(boardName);\n  let threads = await ThreadsModel.getThreads(boardName, threadNumbers, { withPostNumbers: true });\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.postCount = thread.postNumbers.length;\n    delete thread.postNumbers;\n    addDataToThread(thread, board);\n  });\n  let sortFunction = ThreadsModel.sortThreadsByCreationDate;\n  switch ((sortMode || 'date').toLowerCase()) {\n  case 'recent':\n    sortFunction = ThreadsModel.sortThreadsByDate;\n    break;\n  case 'bumps':\n    sortFunction = ThreadsModel.sortThreadsByPostCount;\n    break;\n  default:\n    break;\n  }\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads.sort(sortFunction),\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getArchive(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let path = `${__dirname}/../../public/${boardName}/arch`;\n  let exists = await FS.exists(path);\n  if (exists) {\n    var fileNames = await FS.list(path);\n  } else {\n    var fileNames = [];\n  }\n  fileNames = fileNames.filter((fileName) => { return fileName.split('.').pop() === 'json'; });\n  let threads = await Tools.series(fileNames, async function(fileName) {\n    let stats = await FS.stat(`${path}/${fileName}`);\n    return {\n      boardName: boardName,\n      number: +fileName.split('.').shift(),\n      birthtime: stats.node.birthtime.valueOf()\n    };\n  }, true);\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads.sort((t1, t2) => { return t2 - t1; }), //NOTE: The order is correct (t2 - t1).\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getLastPostNumber(boardName) {\n  if (!Board.board(boardName)) {\n    return Promise.reject(new Error(Tools.translate('Invalid boardName')));\n  }\n  return await PostCounters.getOne(boardName);\n}\n\nexport async function getLastPostNumbers(boardNames) {\n  if (!_(boardNames).isArray()) {\n    boardNames = [boardNames];\n  }\n  if (boardNames.some(boardName => !Board.board(boardName))) {\n    return Promise.reject(new Error(Tools.translate('Invalid boardName')));\n  }\n  return await PostCounters.getSome(boardNames);\n}\n\nexport async function getPageCount(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let threadCount = await Threads.count(boardName);\n  let pageCount = Math.ceil(threadCount / board.threadsPerPage) || 1;\n  pageCounts.set(boardName, pageCount);\n  return pageCount;\n}\n\nexport async function nextPostNumber(boardName, incrementBy) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  incrementBy = Tools.option(incrementBy, 'number', 1, { test: (i) => { i >= 1; } });\n  let postNumber = await PostCounters.incrementBy(boardName, incrementBy);\n  if (!postNumber) {\n    return 0;\n  }\n  //TODO: improve get skipping\n  if (1 === incrementBy && board.skippedGetOrder > 0 && !(postNumber % Math.pow(10, board.skippedGetOrder))) {\n    return await nextPostNumber(boardName, incrementBy);\n  }\n  return postNumber;\n}\n\nexport async function initialize() {\n  await Tools.series(Board.boardNames(), async function(boardName) {\n    await getPageCount(boardName);\n  });\n  await ThreadsModel.clearDeletedThreads();\n}\n\nexport async function delall(req, ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    throw new Error(Tools.translate('Invalid IP address'));\n  }\n  let deletedThreads = {};\n  let updatedThreads = {};\n  let deletedPosts = {};\n  await Tools.series(boardNames, async function(boardName) {\n    let postNumbers = await UsersModel.getUserPostNumbers(ip, boardName);\n    let posts = await PostsModel.getPosts(boardName, postNumbers);\n    posts.forEach((post) => {\n      if (post.threadNumber === post.number) {\n        deletedThreads[`${boardName}:${post.threadNumber}`] = {\n          boardName: boardName,\n          number: post.threadNumber\n        };\n      }\n    });\n    posts.filter(post => !deletedThreads.hasOwnProperty(`${boardName}:${post.threadNumber}`)).forEach((post) => {\n      updatedThreads[`${boardName}:${post.threadNumber}`] = {\n        boardName: boardName,\n        number: post.threadNumber\n      };\n      deletedPosts[`${boardName}:${post.number}`] = {\n        boardName: boardName,\n        number: post.number\n      };\n    });\n  });\n  await Tools.series(deletedPosts, async function(post) {\n    await PostsModel.removePost(post.boardName, post.number);\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await ThreadsModel.removeThread(thread.boardName, thread.number);\n  });\n  await Tools.series(updatedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'edit');\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'delete');\n  });\n}\n"],"sourceRoot":"/source/"}