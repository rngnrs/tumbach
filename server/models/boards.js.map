{"version":3,"sources":["models/boards.js"],"names":["boardName","threadNumber","board","Error","Tools","translate","ThreadsModel","getThread","thread","PostsModel","getThreadPosts","posts","postCount","length","opPost","splice","lastPosts","title","postSubject","addDataToThread","pageNumber","option","test","n","pageCount","pageCounts","get","getThreads","sort","limit","threadsPerPage","offset","threads","client","collection","Post","series","getPost","number","withExtraData","withFileInfos","withReferences","maxLastPosts","getThreadPostCount","omittedPosts","filter","getLastPostNumber","lastPostNumber","currentPage","postingSpeed","Renderer","postingSpeedString","launchDate","getPage","sortMode","sortFunction","sortThreadsByCreationDate","toLowerCase","sortThreadsByDate","sortThreadsByPostCount","getCatalog","path","__dirname","exists","list","fileNames","fileName","split","pop","stat","stats","shift","birthtime","node","valueOf","t1","t2","getArchive","PostCounter","findOne","_id","result","boardNames","isArray","some","query","$in","find","toArray","reduce","acc","getLastPostNumbers","Thread","getThreadCount","threadCount","Math","ceil","set","getPageCount","incrementBy","i","findOneAndUpdate","$inc","projection","upsert","returnOriginal","value","skippedGetOrder","pow","nextPostNumber","clearDeletedThreads","initialize","req","ip","correctAddress","deletedThreads","updatedThreads","deletedPosts","forEach","post","hasOwnProperty","deleteOne","removePostData","removeThread","IPC","render","delall","MiscModel","Map","bumpLimit","postLimit","bumpLimitReached","postLimitReached","postingEnabled","closed","maxLength","subject","text","plainText","replace","l","substr"],"mappings":"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","file":"models/boards.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport FS from 'q-io/fs';\n\nimport * as MiscModel from './misc';\nimport * as PostsModel from './posts';\nimport * as ThreadsModel from './threads';\nimport Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\nlet pageCounts = new Map();\n\nfunction addDataToThread(thread, board) {\n  thread.bumpLimit = board.bumpLimit;\n  thread.postLimit = board.postLimit;\n  thread.bumpLimitReached = (thread.postCount >= board.bumpLimit);\n  thread.postLimitReached = (thread.postCount >= board.postLimit);\n  thread.postingEnabled = (board.postingEnabled && !thread.closed);\n}\n\nexport function postSubject(post, maxLength) {\n  let subject = '';\n  if (post.subject) {\n    subject = post.subject;\n  } else if (post.text) {\n    subject = Renderer.plainText(post.text);\n  }\n  subject = subject.replace(/\\r*\\n+/gi, '');\n  maxLength = Tools.option(maxLength, 'number', 0, { test: (l) => { return l > 0; } });\n  if (maxLength > 1 && subject.length > maxLength) {\n    subject = subject.substr(0, maxLength - 1) + '…';\n  }\n  return subject;\n}\n\nexport async function getThread(boardName, threadNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let thread = await ThreadsModel.getThread(boardName, threadNumber);\n  let posts = await PostsModel.getThreadPosts(boardName, threadNumber);\n  thread.postCount = posts.length;\n  if (thread.postCount <= 0) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  thread.opPost = posts.splice(0, 1)[0];\n  thread.lastPosts = posts;\n  thread.title = postSubject(thread.opPost, 50) || null;\n  addDataToThread(thread, board);\n  return thread;\n}\n\nexport async function getPage(boardName, pageNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  pageNumber = Tools.option(pageNumber, 'number', -1, { test: (n) => { return n >= 0; } });\n  let pageCount = pageCounts.get(boardName);\n  if (pageNumber < 0 || pageNumber >= pageCount) {\n    throw new Error(Tools.translate('Invalid page number'));\n  }\n  let threads = await ThreadsModel.getThreads(boardName, {\n    sort: -1,\n    limit: board.threadsPerPage,\n    offset: pageNumber * board.threadsPerPage\n  });\n  let Post = await client.collection('post');\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withExtraData: true,\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.lastPosts = await PostsModel.getThreadPosts(boardName, thread.number, {\n      limit: board.maxLastPosts,\n      offset: 1,\n      sort: true\n    });\n    thread.postCount = await ThreadsModel.getThreadPostCount(boardName, thread.number);\n    addDataToThread(thread, board);\n    if (thread.postCount > (board.maxLastPosts + 1)) {\n      thread.omittedPosts = thread.postCount - board.maxLastPosts - 1;\n    } else {\n      thread.omittedPosts = 0;\n    }\n  });\n  threads = threads.filter((thread) => { return (thread.opPost && (thread.postCount > 0)); });\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads,\n    pageCount: pageCount,\n    currentPage: pageNumber,\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getCatalog(boardName, sortMode) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let threads = await ThreadsModel.getThreads(boardName);\n  let Post = await client.collection('post');\n  await Tools.series(threads, async function(thread) {\n    thread.opPost = await PostsModel.getPost(boardName, thread.number, {\n      withFileInfos: true,\n      withReferences: true\n    });\n    thread.postCount = await ThreadsModel.getThreadPostCount(boardName, thread.number);\n    addDataToThread(thread, board);\n  });\n  let sortFunction = ThreadsModel.sortThreadsByCreationDate;\n  switch ((sortMode || 'date').toLowerCase()) {\n  case 'recent':\n    sortFunction = ThreadsModel.sortThreadsByDate;\n    break;\n  case 'bumps':\n    sortFunction = ThreadsModel.sortThreadsByPostCount;\n    break;\n  default:\n    break;\n  }\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads.sort(sortFunction),\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getArchive(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let path = `${__dirname}/../../public/${boardName}/arch`;\n  let exists = await FS.exists(path);\n  if (exists) {\n    var fileNames = await FS.list(path);\n  } else {\n    var fileNames = [];\n  }\n  fileNames = fileNames.filter((fileName) => { return fileName.split('.').pop() === 'json'; });\n  let threads = await Tools.series(fileNames, async function(fileName) {\n    let stats = await FS.stat(`${path}/${fileName}`);\n    return {\n      boardName: boardName,\n      number: +fileName.split('.').shift(),\n      birthtime: stats.node.birthtime.valueOf()\n    };\n  }, true);\n  let lastPostNumber = await getLastPostNumber(boardName);\n  return {\n    threads: threads.sort((t1, t2) => { return t2 - t1; }), //NOTE: The order is correct (t2 - t1).\n    lastPostNumber: lastPostNumber,\n    postingSpeed: Renderer.postingSpeedString(board.launchDate, lastPostNumber)\n  };\n}\n\nexport async function getLastPostNumber(boardName) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid boardName'));\n  }\n  let PostCounter = await client.collection('postCounter');\n  let result = await PostCounter.findOne({ _id: boardName }, { lastPostNumber: 1 });\n  return result ? result.lastPostNumber : 0;\n}\n\nexport async function getLastPostNumbers(boardNames) {\n  if (!_(boardNames).isArray()) {\n    boardNames = [boardNames];\n  }\n  if (boardNames.some(boardName => !Board.board(boardName))) {\n    throw new Error(Tools.translate('Invalid boardName'));\n  }\n  let PostCounter = await client.collection('postCounter');\n  let query = {\n    _id: { $in: boardNames }\n  };\n  let result = await PostCounter.find(query).toArray();\n  return result.reduce((acc, { _id, lastPostNumber }) => {\n    acc[_id] = lastPostNumber;\n    return acc;\n  }, {});\n}\n\nexport async function getPageCount(boardName) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Thread = await client.collection('thread');\n  let threadCount = await ThreadsModel.getThreadCount(boardName);\n  let pageCount = Math.ceil(threadCount / board.threadsPerPage) || 1;\n  pageCounts.set(boardName, pageCount);\n  return pageCount;\n}\n\nexport async function nextPostNumber(boardName, incrementBy) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  incrementBy = Tools.option(incrementBy, 'number', 1, { test: (i) => { return i >= 1; } });\n  let PostCounter = await client.collection('postCounter');\n  let result = await PostCounter.findOneAndUpdate({ _id: boardName }, {\n    $inc: { lastPostNumber: incrementBy }\n  }, {\n    projection: { lastPostNumber: 1 },\n    upsert: true,\n    returnOriginal: false\n  });\n  if (!result) {\n    return 0;\n  }\n  let { lastPostNumber } = result.value;\n  //TODO: improve get skipping\n  if ((1 === incrementBy) && (board.skippedGetOrder > 0) && !(lastPostNumber % Math.pow(10, board.skippedGetOrder))) {\n    return await nextPostNumber(boardName, incrementBy);\n  }\n  return lastPostNumber;\n}\n\nexport async function initialize() {\n  await Tools.series(Board.boardNames(), async function(boardName) {\n    await getPageCount(boardName);\n  });\n  await ThreadsModel.clearDeletedThreads();\n}\n\nexport async function delall(req, ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    throw new Error(Tools.translate('Invalid IP address'));\n  }\n  let deletedThreads = {};\n  let updatedThreads = {};\n  let deletedPosts = {};\n  let Post = await client.collection('post');\n  await Tools.series(boardNames, async function(boardName) {\n    let posts = await Post.find({\n      boardName: boardName,\n      'user.ip': ip\n    }, {\n      number: 1,\n      threadNumber: 1\n    }).toArray();\n    posts.forEach((post) => {\n      if (post.threadNumber === post.number) {\n        deletedThreads[`${boardName}:${post.threadNumber}`] = {\n          boardName: boardName,\n          number: post.threadNumber\n        };\n      }\n    });\n    posts.filter(post => !deletedThreads.hasOwnProperty(`${boardName}:${post.threadNumber}`)).forEach((post) => {\n      updatedThreads[`${boardName}:${post.threadNumber}`] = {\n        boardName: boardName,\n        number: post.threadNumber\n      };\n      deletedPosts[`${boardName}:${post.number}`] = {\n        boardName: boardName,\n        number: post.number,\n        threadNumber: post.threadNumber\n      };\n    });\n  });\n  await Tools.series(deletedPosts, async function(post) {\n    await Post.deleteOne({\n      boardName: post.boardName,\n      number: post.number\n    });\n    await PostsModel.removePostData(post.boardName, post.number, post.threadNumber);\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await ThreadsModel.removeThread(thread.boardName, thread.number);\n  });\n  await Tools.series(updatedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'edit');\n  });\n  await Tools.series(deletedThreads, async function(thread) {\n    await IPC.render(thread.boardName, thread.number, thread.number, 'delete');\n  });\n}\n"],"sourceRoot":"/source/"}