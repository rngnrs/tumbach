{"version":3,"sources":["models/statistics.js"],"names":["board","BOARD_PUBLIC_PATH","__dirname","name","statistics","postCount","postingSpeed","fileCount","diskUsage","BoardsModel","getLastPostNumber","lastPostNumber","Renderer","postingSpeedString","launchDate","error","stack","list","fileNames","length","code","Tools","series","subpath","Files","size","gatherBoardStatistics","isMaster","translate","boards","total","now","client","collection","Post","distinct","ips","uniqueIPCount","boardNames","boardName","boardLaunchDate","valueOf","boardStatistics","title","hidden","push","IPC","send","data","online","reduce","acc","each","_1","ip","add","Set","uptime","process","Cache","writeFile","JSON","stringify","generateStatistics"],"mappings":"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","file":"models/statistics.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport FS from 'q-io/fs';\n\nimport * as BoardsModel from './boards';\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\n\nlet client = mongodbClient();\n\nasync function gatherBoardStatistics(board) {\n  const BOARD_PUBLIC_PATH = `${__dirname}/../../public/${board.name}`;\n  let statistics = {\n    postCount: 0,\n    postingSpeed: '-',\n    fileCount: 0,\n    diskUsage: 0\n  };\n  try {\n    let lastPostNumber = await BoardsModel.getLastPostNumber(board.name);\n    statistics.postCount = lastPostNumber;\n    statistics.postingSpeed = Renderer.postingSpeedString(board.launchDate, lastPostNumber);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  try {\n    let fileNames = await FS.list(`${BOARD_PUBLIC_PATH}/src`);\n    statistics.fileCount = fileNames.length;\n  } catch (err) {\n    if ('ENOENT' !== err.code) {\n      Logger.error(err.stack || err);\n    }\n  }\n  await Tools.series(['src', 'thumb'], async function(subpath) {\n    try {\n      let size = await Files.diskUsage(`${BOARD_PUBLIC_PATH}/${subpath}`);\n      statistics.diskUsage += size;\n    } catch (err) {\n      if ('ENOENT' !== err.code) {\n        Logger.error(err.stack || err);\n      }\n    }\n  });\n  return statistics;\n}\n\n//NOTE: Must be called from the master process only.\nexport async function generateStatistics() {\n  if (!Cluster.isMaster) {\n    Logger.error(Tools.translate('Error: generateStatistics() called from worker process.'));\n    return;\n  }\n  let statistics = {\n    boards: [],\n    total: {\n      postCount: 0,\n      fileCount: 0,\n      diskUsage: 0\n    }\n  };\n  let launchDate = _.now();\n  try {\n    let Post = await client.collection('post');\n    let ips = await Post.distinct('user.ip');\n    statistics.total.uniqueIPCount = ips.length;\n    await Tools.series(Board.boardNames(), async function(boardName) {\n      let board = Board.board(boardName);\n      if (!board) {\n        return;\n      }\n      let boardLaunchDate = board.launchDate.valueOf();\n      if (boardLaunchDate < launchDate) {\n        launchDate = boardLaunchDate;\n      }\n      let boardStatistics = await gatherBoardStatistics(board);\n      boardStatistics.name = board.name;\n      boardStatistics.title = board.title;\n      boardStatistics.hidden = board.hidden;\n      let ips = await Post.distinct('user.ip', { boardName: boardName });\n      boardStatistics.uniqueIPCount = ips.length;\n      statistics.total.postCount += boardStatistics.postCount;\n      statistics.total.fileCount += boardStatistics.fileCount;\n      statistics.total.diskUsage += boardStatistics.diskUsage;\n      statistics.boards.push(boardStatistics);\n    });\n    statistics.total.postingSpeed = Renderer.postingSpeedString(launchDate, statistics.total.postCount);\n    let data = await IPC.send('getConnectionIPs');\n    statistics.online = data.reduce((acc, ips) => {\n      _(ips).each((_1, ip) => { acc.add(ip); });\n      return acc;\n    }, new Set()).size;\n    statistics.uptime = process.uptime();\n    await Cache.writeFile('misc/statistics.json', JSON.stringify(statistics));\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n"],"sourceRoot":"/source/"}