{"version":3,"sources":["models/statistics.js"],"names":["board","BOARD_PUBLIC_PATH","__dirname","name","statistics","postCount","postingSpeed","fileCount","diskUsage","BoardsModel","getLastPostNumber","lastPostNumber","Renderer","postingSpeedString","launchDate","error","stack","list","fileNames","length","code","Tools","series","subpath","Files","size","gatherBoardStatistics","isMaster","translate","boards","total","now","UsersModel","getUserPostNumbers","keys","uniqueUsers","boardNames","reduce","acc","boardName","uniqueIPCount","map","key","ip","split","slice","join","pop","filter","hasOwnProperty","userPostInfo","add","Set","boardLaunchDate","valueOf","boardStatistics","title","hidden","push","IPC","send","data","online","ips","each","_1","uptime","process","Cache","writeFile","JSON","stringify","generateStatistics"],"mappings":"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","file":"models/statistics.js","sourcesContent":["import _ from 'underscore';\nimport Cluster from 'cluster';\nimport FS from 'q-io/fs';\n\nimport * as BoardsModel from './boards';\nimport * as UsersModel from './users';\nimport Board from '../boards/board';\nimport * as Files from '../core/files';\nimport * as Renderer from '../core/renderer';\nimport * as Cache from '../helpers/cache';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nasync function gatherBoardStatistics(board) {\n  const BOARD_PUBLIC_PATH = `${__dirname}/../../public/${board.name}`;\n  let statistics = {\n    postCount: 0,\n    postingSpeed: '-',\n    fileCount: 0,\n    diskUsage: 0\n  };\n  try {\n    let lastPostNumber = await BoardsModel.getLastPostNumber(board.name);\n    statistics.postCount = lastPostNumber;\n    statistics.postingSpeed = Renderer.postingSpeedString(board.launchDate, lastPostNumber);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  try {\n    let fileNames = await FS.list(`${BOARD_PUBLIC_PATH}/src`);\n    statistics.fileCount = fileNames.length;\n  } catch (err) {\n    if ('ENOENT' !== err.code) {\n      Logger.error(err.stack || err);\n    }\n  }\n  await Tools.series(['src', 'thumb', 'arch'], async function(subpath) {\n    try {\n      let size = await Files.diskUsage(`${BOARD_PUBLIC_PATH}/${subpath}`);\n      statistics.diskUsage += size;\n    } catch (err) {\n      if ('ENOENT' !== err.code) {\n        Logger.error(err.stack || err);\n      }\n    }\n  });\n  return statistics;\n}\n\n//NOTE: Must be called from the master process only.\nexport async function generateStatistics() {\n  if (!Cluster.isMaster) {\n    Logger.error(Tools.translate('Error: generateStatistics() called from worker process.'));\n    return;\n  }\n  //console.log(Tools.translate('Generating statisticsâ€¦'));\n  let statistics = {\n    boards: [],\n    total: {\n      postCount: 0,\n      fileCount: 0,\n      diskUsage: 0\n    }\n  };\n  let launchDate = _.now();\n  try {\n    let keys = await UsersModel.getUserPostNumbers();\n    let uniqueUsers = Board.boardNames().reduce((acc, boardName) => {\n      acc[boardName] = 0;\n      return acc;\n    }, {});\n    statistics.total.uniqueIPCount = keys.map((key) => {\n      return {\n        ip: key.split(':').slice(1, -1).join(':'),\n        boardName: key.split(':').pop()\n      };\n    }).filter(userPostInfo => uniqueUsers.hasOwnProperty(userPostInfo.boardName)).reduce((acc, userPostInfo) => {\n      ++uniqueUsers[userPostInfo.boardName];\n      acc.add(userPostInfo.ip);\n      return acc;\n    }, new Set()).size;\n    await Tools.series(Board.boardNames(), async function(boardName) {\n      let board = Board.board(boardName);\n      if (!board) {\n        return;\n      }\n      let boardLaunchDate = board.launchDate.valueOf();\n      if (boardLaunchDate < launchDate) {\n        launchDate = boardLaunchDate;\n      }\n      let boardStatistics = await gatherBoardStatistics(board);\n      boardStatistics.name = board.name;\n      boardStatistics.title = board.title;\n      boardStatistics.hidden = board.hidden;\n      boardStatistics.uniqueIPCount = uniqueUsers[board.name];\n      statistics.total.postCount += boardStatistics.postCount;\n      statistics.total.fileCount += boardStatistics.fileCount;\n      statistics.total.diskUsage += boardStatistics.diskUsage;\n      statistics.boards.push(boardStatistics);\n    });\n    statistics.total.postingSpeed = Renderer.postingSpeedString(launchDate, statistics.total.postCount);\n    let data = await IPC.send('getConnectionIPs');\n    statistics.online = data.reduce((acc, ips) => {\n      _(ips).each((_1, ip) => { acc.add(ip); });\n      return acc;\n    }, new Set()).size;\n    statistics.uptime = process.uptime();\n    await Cache.writeFile('misc/statistics.json', JSON.stringify(statistics));\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n"],"sourceRoot":"/source/"}