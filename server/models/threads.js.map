{"version":3,"sources":["models/threads.js"],"names":["boardName","threadNumber","archived","source","ArchivedThreadPostNumbers","ThreadPostNumbers","count","getThreadPostCount","getAll","postNumbers","length","sort","a","b","getThreadPostNumbers","postNumber","addOne","addThreadPostNumber","deleteOne","removeThreadPostNumber","thread","withPostNumbers","ArchivedThreadUpdateTimes","ThreadUpdateTimes","getOne","number","updatedAt","addDataToThread","reverse","limit","notOP","withExtraData","withFileInfos","withReferences","board","Promise","reject","Error","Tools","translate","option","test","testPostNumber","threadPostNumbers","cloned","splice","l","PostsModel","getPosts","getThreadPosts","ArchivedThreads","Threads","keys","getThreadNumbers","options","getThread","threadNumbers","isArray","map","some","getSome","threads","toArray","mayBeArchivedThreadNumbers","index","filter","numbers","archivedThreads","forEach","series","getThreads","lastPostNumber","postCount","newPostCount","pn","bumpLimit","postLimit","bumpLimitReached","postLimitReached","closed","fixed","unbumpable","postingEnabled","pop","getThreadInfo","last","getThreadLastPostNumber","dateTme","setOne","setThreadUpdateTime","DeletedThreads","contains","isThreadDeleted","setThreadDeleted","delete","clearDeletedThreads","key","ThreadsPlannedForDeletion","updateTimeSource","setTimeout","postNumbersSource","removePost","removingThread","error","stack","removeThread","sortThreadsByDate","threadLimit","client","transaction","archivedThreadNumbers","removeLastArchivedThread","archiveLimit","commit","IPC","renderArchive","addSome","pushPostToArchive","archivePath","__dirname","oldThreadNumber","mkpath","sourceId","Cache","readFile","data","model","JSON","parse","write","stringify","renderThreadHTML","targetPath","removeFile","rollback","pushOutOldThread","req","fields","password","date","now","sha1","hashpass","BoardsModel","nextPostNumber","createdAt","toISOString","user","ip","level","setThreadNumber","createThread","sourceBoardName","targetBoardName","targetBoard","initialPostNumber","copyPosts","toRerender","toUpdate","postNumberMap","render","reduce","acc","ref","rerenderMovedThreadRelatedPosts","posts","updateMovedThreadRelatedPosts","sourceThreadNumber","targetThreadNumber","moveThread","setThreadFixed","setThreadClosed","setThreadUnbumpable","sortThreadsByCreationDate","sortThreadsByPostCount","Search","toString","t1","t2","localeCompare"],"mappings":"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","file":"models/threads.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\nimport promisify from 'promisify-node';\n\nimport * as BoardsModel from './boards';\nimport * as PostsModel from './posts';\nimport Board from '../boards/board';\nimport BoardController from '../controllers/board';\nimport * as Search from '../core/search';\nimport * as Cache from '../helpers/cache';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport redisClient from '../storage/redis-client-factory';\nimport sqlClient from '../storage/sql-client-factory';\nimport Hash from '../storage/hash';\nimport UnorderedSet from '../storage/unordered-set';\n\nconst mkpath = promisify('mkpath');\n\nlet ArchivedThreadPostNumbers = new UnorderedSet(sqlClient(), 'archivedThreadPostNumbers', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\nlet ArchivedThreads = new Hash(sqlClient(), 'archivedThreads');\nlet ArchivedThreadUpdateTimes = new Hash(sqlClient(), 'archivedThreadUpdateTimes', {\n  parse: false,\n  stringify: false\n});\nlet DeletedThreads = new UnorderedSet(redisClient(), 'deletedThreads', {\n  parse: false,\n  stringify: false\n});\nlet ThreadPostNumbers = new UnorderedSet(redisClient(), 'threadPostNumbers', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\nlet Threads = new Hash(redisClient(), 'threads');\nlet ThreadsPlannedForDeletion = new UnorderedSet(redisClient(), 'threadsPlannedForDeletion', {\n  parse: false,\n  stringify: false\n});\nlet ThreadUpdateTimes = new Hash(redisClient(), 'threadUpdateTimes', {\n  parse: false,\n  stringify: false\n});\n\nexport function sortThreadsByDate(t1, t2) {\n  if (!!t1.fixed === !!t2.fixed) {\n    return t2.updatedAt.localeCompare(t1.updatedAt);\n  } else {\n    return t1.fixed ? -1 : 1;\n  }\n}\n\nexport function sortThreadsByCreationDate(t1, t2) {\n  return t2.createdAt.localeCompare(t1.createdAt);\n}\n\nexport function sortThreadsByPostCount(t1, t2) {\n  return t2.postCount - t1.postCount;\n}\n\nexport async function getThreadPostCount(boardName, threadNumber, { archived } = {}) {\n  let source = archived ? ArchivedThreadPostNumbers : ThreadPostNumbers;\n  return await source.count(`${boardName}:${threadNumber}`);\n}\n\nexport async function getThreadPostNumbers(boardName, threadNumber) {\n  let postNumbers = await ThreadPostNumbers.getAll(`${boardName}:${threadNumber}`);\n  if (!postNumbers || postNumbers.length <= 0) {\n    postNumbers = await ArchivedThreadPostNumbers.getAll(`${boardName}:${threadNumber}`);\n  }\n  return postNumbers.sort((a, b) => { return a - b; });\n}\n\nexport async function addThreadPostNumber(boardName, threadNumber, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedThreadPostNumbers : ThreadPostNumbers;\n  await source.addOne(postNumber, `${boardName}:${threadNumber}`);\n}\n\nexport async function removeThreadPostNumber(boardName, threadNumber, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedThreadPostNumbers : ThreadPostNumbers;\n  await source.deleteOne(postNumber, `${boardName}:${threadNumber}`);\n}\n\nasync function addDataToThread(thread, { withPostNumbers } = {}) {\n  let source = thread.archived ? ArchivedThreadUpdateTimes : ThreadUpdateTimes;\n  thread.updatedAt = await source.getOne(thread.number, thread.boardName);\n  if (withPostNumbers) {\n    thread.postNumbers = await getThreadPostNumbers(thread.boardName, thread.number);\n  }\n}\n\nexport async function getThreadPosts(boardName, threadNumber,\n  { reverse, limit, notOP, withExtraData, withFileInfos, withReferences } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let threadPostNumbers = await getThreadPostNumbers(boardName, threadNumber);\n  let postNumbers = Tools.cloned(threadPostNumbers);\n  if (notOP) {\n    postNumbers.splice(0, 1);\n  }\n  if (reverse) {\n    postNumbers.reverse();\n  }\n  limit = Tools.option(limit, 'number', 0, { test: (l) => { return l > 0; } });\n  if (limit) {\n    postNumbers.splice(limit);\n  }\n  return await PostsModel.getPosts(boardName, postNumbers, { withExtraData, withFileInfos, withReferences });\n}\n\nexport async function getThreadNumbers(boardName, { archived } = {}) {\n  let source = archived ? ArchivedThreads : Threads;\n  return await source.keys(boardName);\n}\n\nexport async function getThread(boardName, threadNumber, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let thread = await Threads.getOne(threadNumber, boardName);\n  if (!thread) {\n    thread = await ArchivedThreads.getOne(threadNumber, boardName);\n  }\n  if (!thread) {\n    return Promise.reject(new Error(Tools.translate('No such thread')));\n  }\n  await addDataToThread(thread, options);\n  return thread;\n}\n\nexport async function getThreads(boardName, threadNumbers, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!_(threadNumbers).isArray()) {\n    threadNumbers = [threadNumbers];\n  }\n  threadNumbers = threadNumbers.map((threadNumber) => {\n    return Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  });\n  if (threadNumbers.some(threadNumber => !threadNumber)) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let threads = await Threads.getSome(threadNumbers, boardName);\n  threads = _(threads).toArray();\n  let mayBeArchivedThreadNumbers = threads.map((thread, index) => {\n    return {\n      thread: thread,\n      index: index\n    };\n  }).filter((thread) => !thread.thread).map((thread) => {\n    return {\n      index: thread.index,\n      threadNumber: threadNumbers[thread.index]\n    };\n  });\n  if (mayBeArchivedThreadNumbers.length > 0) {\n    let numbers = mayBeArchivedThreadNumbers.map(thread => thread.threadNumber);\n    let archivedThreads = await ArchivedThreads.getSome(numbers, boardName);\n    archivedThreads.forEach((thread, index) => {\n      threads[mayBeArchivedThreadNumbers[index].index] = thread;\n    });\n  }\n  if (threads.length <= 0) {\n    return [];\n  }\n  await Tools.series(threads, async function(thread) {\n    await addDataToThread(thread, options);\n  });\n  return threads;\n}\n\nexport async function getThreadInfo(boardName, threadNumber, { lastPostNumber }) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let thread = await getThread(boardName, threadNumber, { withPostNumbers: true });\n  if (!thread) {\n    return thread;\n  }\n  let postCount = thread.postNumbers.length;\n  lastPostNumber = Tools.option(lastPostNumber, 'number', 0, { test: Tools.testPostNumber });\n  let newPostCount = thread.postNumbers.filter((pn) => { return pn > lastPostNumber; }).length;\n  return {\n    number: thread.number,\n    bumpLimit: board.bumpLimit,\n    postLimit: board.postLimit,\n    bumpLimitReached: (postCount >= board.bumpLimit),\n    postLimitReached: (postCount >= board.postLimit),\n    closed: thread.closed,\n    fixed: thread.fixed,\n    unbumpable: thread.unbumpable,\n    postCount: postCount,\n    postingEnabled: (board.postingEnabled && !thread.closed),\n    lastPostNumber: thread.postNumbers.pop(),\n    newPostCount: newPostCount\n  };\n}\n\nexport async function getThreadLastPostNumber(boardName, threadNumber) {\n  if (!Board.board(boardName)) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid thread number')));\n  }\n  let threadPostNumbers = await getThreadPostNumbers(boardName, threadNumber);\n  return (threadPostNumbers.length > 0) ? _(threadPostNumbers).last() : 0;\n}\n\nexport async function setThreadUpdateTime(boardName, threadNumber, dateTme, { archived } = {}) {\n  let source = archived ? ArchivedThreadUpdateTimes : ThreadUpdateTimes;\n  await source.setOne(threadNumber, dateTme, boardName);\n}\n\nexport async function isThreadDeleted(boardName, threadNumber) {\n  return DeletedThreads.contains(`${boardName}:${threadNumber}`);\n}\n\nexport async function setThreadDeleted(boardName, threadNumber) {\n  return DeletedThreads.addOne(`${boardName}:${threadNumber}`);\n}\n\nexport async function clearDeletedThreads() {\n  return DeletedThreads.delete();\n}\n\nexport async function removeThread(boardName, threadNumber, { archived } = {}) {\n  let source = archived ? ArchivedThreads : Threads;\n  let key = `${boardName}:${threadNumber}`\n  await ThreadsPlannedForDeletion.addOne(key);\n  await source.deleteOne(threadNumber, boardName);\n  let updateTimeSource = archived ? ArchivedThreadUpdateTimes : ThreadUpdateTimes;\n  await updateTimeSource.deleteOne(threadNumber, boardName);\n  setTimeout(async function() {\n    try {\n      let postNumbers = await getThreadPostNumbers(boardName, threadNumber);\n      let postNumbersSource = archived ? ArchivedThreadPostNumbers : ThreadPostNumbers;\n      await postNumbersSource.delete(key);\n      await Tools.series(postNumbers, async function(postNumber) {\n        return await PostsModel.removePost(boardName, postNumber, { removingThread: true });\n      });\n      await ThreadsPlannedForDeletion.deleteOne(key);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  }, 5000); //TODO: This is not OK\n}\n\nasync function pushOutOldThread(boardName) {\n  try {\n    let board = Board.board(boardName);\n    if (!board) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    let threadNumbers = await getThreadNumbers(boardName);\n    let threads = await getThreads(boardName, threadNumbers);\n    threads.sort(sortThreadsByDate);\n    if (threads.length < board.threadLimit) {\n      return;\n    }\n    let client = await sqlClient();\n    await client.transaction();\n    let archivedThreadNumbers = await getThreadNumbers(boardName, { archived: true });\n    let archivedThreads = await getThreads(boardName, archivedThreadNumbers);\n    archivedThreads.sort(sortThreadsByDate);\n    let removeLastArchivedThread = (archivedThreads.length > 0) && (archivedThreads.length >= board.archiveLimit);\n    if (removeLastArchivedThread) {\n      await removeThread(boardName, archivedThreads.pop().number, { archived: true });\n    }\n    let thread = threads.pop();\n    if (board.archiveLimit <= 0) {\n      await removeThread(boardName, thread.number);\n      await client.commit();\n      if (removeLastArchivedThread) {\n        await IPC.renderArchive(boardName);\n      }\n      return;\n    }\n    await Threads.deleteOne(thread.number, boardName);\n    (async function() {\n      try {\n        ArchivedThreadUpdateTimes.setOne(thread.number, thread.updatedAt, boardName);\n        ThreadUpdateTimes.deleteOne(thread.number, boardName);\n        thread.archived = true;\n        delete thread.updatedAt;\n        await ArchivedThreads.setOne(thread.number, thread, boardName);\n        let key = `${boardName}:${thread.number}`;\n        let postNumbers = await getThreadPostNumbers(boardName, thread.number);\n        await ArchivedThreadPostNumbers.addSome(postNumbers, key);\n        await ThreadPostNumbers.delete(key);\n        await Tools.series(postNumbers, async function(postNumber) {\n          await PostsModel.pushPostToArchive(boardName, postNumber);\n        });\n        await client.commit();\n        let archivePath = `${__dirname}/../../public/${boardName}/arch`;\n        let oldThreadNumber = thread.number;\n        await mkpath(archivePath);\n        let sourceId = `${boardName}/res/${oldThreadNumber}.json`;\n        let data = await Cache.readFile(sourceId);\n        let model = JSON.parse(data);\n        model.thread.archived = true;\n        await FS.write(`${archivePath}/${oldThreadNumber}.json`, JSON.stringify(model));\n        await BoardController.renderThreadHTML(model.thread, {\n          targetPath: `${archivePath}/${oldThreadNumber}.html`,\n          archived: true\n        });\n        await Cache.removeFile(sourceId);\n        await Cache.removeFile(`${boardName}/res/${oldThreadNumber}.html`);\n        await IPC.renderArchive(boardName);\n      } catch (err) {\n        client.rollback();\n        Logger.error(err.stack || err);\n      }\n    })();\n    //NOTE: This is for the sake of speed.\n  } catch (err) {\n    client.rollback();\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function createThread(req, fields, transaction) {\n  let { boardName, password } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!board.postingEnabled) {\n    return Promise.reject(new Error(Tools.translate('Posting is disabled at this board')));\n  }\n  await pushOutOldThread(boardName);\n  let date = Tools.now();\n  password = Tools.sha1(password);\n  let hashpass = (req.hashpass || null);\n  let threadNumber = await BoardsModel.nextPostNumber(boardName);\n  let thread = {\n    archived: false,\n    boardName: boardName,\n    closed: false,\n    createdAt: date.toISOString(),\n    fixed: false,\n    unbumpable: false,\n    number: threadNumber,\n    user: {\n      hashpass: hashpass,\n      ip: req.ip,\n      level: req.level(boardName),\n      password: password\n    }\n  };\n  transaction.setThreadNumber(threadNumber);\n  await Threads.setOne(threadNumber, thread, boardName);\n  return thread;\n}\n\nexport async function moveThread(sourceBoardName, threadNumber, targetBoardName) {\n  let targetBoard = Board.board(targetBoardName);\n  if (!targetBoard || !Board.board(sourceBoardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!threadNumber) {\n    throw new Error(Tools.translate('Invalid thread number'));\n  }\n  let thread = await getThread(sourceBoardName, threadNumber, { withPostNumbers: true });\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  let postNumbers = thread.postNumbers;\n  delete thread.postNumbers;\n  delete thread.updatedAt;\n  thread.boardName = targetBoardName;\n  let lastPostNumber = await BoardsModel.nextPostNumber(targetBoardName, postNumbers.length);\n  let initialPostNumber = lastPostNumber - postNumbers.length + 1;\n  thread.number = initialPostNumber;\n  let { toRerender, toUpdate, postNumberMap } = await PostsModel.copyPosts({\n    sourceBoardName: sourceBoardName,\n    postNumbers: postNumbers,\n    targetBoardName: targetBoardName,\n    initialPostNumber: initialPostNumber\n  });\n  await ThreadPostNumbers.addSome(_(postNumberMap).toArray(), `${targetBoardName}:${thread.number}`);\n  await ThreadUpdateTimes.setOne(thread.number, Tools.now().toISOString(), targetBoardName);\n  await Threads.setOne(thread.number, thread, targetBoardName);\n  await IPC.render(targetBoardName, thread.number, thread.number, 'create');\n  toRerender = toRerender.reduce((acc, ref) => {\n    acc[`${ref.boardName}:${ref.postNumber}`] = ref;\n    return acc;\n  }, {});\n  toUpdate = toUpdate.reduce((acc, ref) => {\n    acc[`${ref.boardName}:${ref.threadNumber}`] = ref;\n    return acc;\n  }, {});\n  await PostsModel.rerenderMovedThreadRelatedPosts({\n    posts: toRerender,\n    sourceBoardName: sourceBoardName,\n    targetBoardName: targetBoardName,\n    postNumberMap: postNumberMap\n  });\n  await PostsModel.updateMovedThreadRelatedPosts({\n    posts: toUpdate,\n    sourceBoardName: sourceBoardName,\n    targetBoardName: targetBoardName,\n    sourceThreadNumber: threadNumber,\n    targetThreadNumber: initialPostNumber,\n    postNumberMap: postNumberMap\n  });\n  await Tools.series(toRerender, async function(ref) {\n    return await IPC.render(ref.boardName, ref.threadNumber, ref.postNumber, 'edit');\n  });\n  await Tools.series(toUpdate, async function(ref) {\n    return await IPC.render(ref.boardName, ref.threadNumber, ref.threadNumber, 'create');\n  });\n  await removeThread(sourceBoardName, threadNumber);\n  await IPC.render(sourceBoardName, threadNumber, threadNumber, 'delete');\n  return {\n    boardName: targetBoardName,\n    threadNumber: thread.number\n  };\n}\n\nexport async function setThreadFixed(boardName, threadNumber, fixed) {\n  let thread = await getThread(boardName, threadNumber);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  fixed = !!fixed;\n  if (fixed === !!thread.fixed) {\n    return;\n  }\n  thread.fixed = fixed;\n  await Threads.setOne(threadNumber, thread, boardName);\n  await IPC.render(boardName, threadNumber, threadNumber, 'edit');\n}\n\nexport async function setThreadClosed(boardName, threadNumber, closed) {\n  let thread = await getThread(boardName, threadNumber);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  closed = !!closed;\n  if (closed === !!thread.closed) {\n    return;\n  }\n  thread.closed = closed;\n  await Threads.setOne(threadNumber, thread, boardName);\n  await IPC.render(boardName, threadNumber, threadNumber, 'edit');\n}\n\nexport async function setThreadUnbumpable(boardName, threadNumber, unbumpable) {\n  let thread = await getThread(boardName, threadNumber);\n  if (!thread) {\n    throw new Error(Tools.translate('No such thread'));\n  }\n  unbumpable = !!unbumpable;\n  if (unbumpable === !!thread.unbumpable) {\n    return;\n  }\n  thread.unbumpable = unbumpable;\n  await Threads.setOne(threadNumber, thread, boardName);\n  await IPC.render(boardName, threadNumber, threadNumber, 'edit');\n}\n"],"sourceRoot":"/source/"}