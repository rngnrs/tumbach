{"version":3,"sources":["models/files.js"],"names":["name","client","collection","Post","findOne","post","Error","Tools","translate","fileInfos","getFileInfoByName","hash","getFileInfoByHash","count","fileInfoExistsByName","fileInfoExistsByHash","hashes","isArray","length","find","$in","toArray","posts","fileInfosAll","map","fileInfo","getFileInfosByHashes","boardName","postNumber","files","findOneAndUpdate","number","$push","$each","createFileInfos","projection","threadNumber","returnOriginal","result","value","IPC","render","addFilesToPost","thumb","path","__dirname","remove","error","stack","removeFile","series","removeFiles","archivePath","mkpath","sourceId","Cache","readFile","data","model","JSON","parse","thread","archived","write","stringify","BoardController","renderThreadHTML","targetPath","moveThreadFilesToArchive","suffix","removeArchivedThreadFiles","fileName","$pull","deleteFile","rating","FILE_RATINGS","indexOf","$set","editFileRating","fields","extraData","tagName","filter","reduce","acc","editAudioTags","fileInfoCount","getPostFileCount","sourceBoardName","targetBoardName","transaction","sourcePath","sourceThumbPath","targetThumbPath","oldFileName","oldThumbName","send","baseName","replace","newFilePath","newThumbPath","addFile","copy","copyFiles","createFileInfo","file"],"mappings":"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","file":"models/files.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\nimport promisify from 'promisify-node';\n\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport mongodbClient from '../storage/mongodb-client-factory';\nimport { AUDIO_TAGS } from '../file-types/audio';\n\nconst mkpath = promisify('mkpath');\n\nlet client = mongodbClient();\n\nexport async function getFileInfoByName(name) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({ 'fileInfos.name': name }, { 'fileInfos.$': 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  return post.fileInfos[0];\n}\n\nexport async function getFileInfoByHash(hash) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({ 'fileInfos.hash': hash }, { 'fileInfos.$': 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  return post.fileInfos[0];\n}\n\nexport async function fileInfoExistsByName(name) {\n  let Post = await client.collection('post');\n  let count = await Post.count({ 'fileInfos.name': name });\n  return (count > 0);\n}\n\nexport async function fileInfoExistsByHash(hash) {\n  let Post = await client.collection('post');\n  let count = await Post.count({ 'fileInfos.hash': hash });\n  return (count > 0);\n}\n\nexport async function getFileInfosByHashes(hashes) {\n  if (!hashes) {\n    return [];\n  }\n  if (!_(hashes).isArray()) {\n    hashes = [hashes];\n  }\n  if (hashes.length <= 0) {\n    return [];\n  }\n  let Post = await client.collection('post');\n  let posts = await Post.find({\n    'fileInfos.hash': { $in: hashes }\n  }, { 'fileInfos.$': 1 }).toArray();\n  let fileInfosAll = _(posts.map(({ fileInfos }) => fileInfos[0]));\n  return hashes.map((hash) => {\n    let fileInfo = fileInfosAll.find((fileInfo) => {\n      return hash === fileInfo.hash;\n    });\n    if (!fileInfo) {\n      throw new Error(Tools.translate('No such file'));\n    }\n    return fileInfo;\n  });\n}\n\nfunction createFileInfo(file, boardName, postNumber) {\n  file.boardName = boardName;\n  file.postNumber = postNumber;\n  return file;\n}\n\nexport function createFileInfos(files, boardName, postNumber) {\n  return files.map((file) => { return createFileInfo(file, boardName, postNumber); });\n}\n\nexport async function addFilesToPost(boardName, postNumber, files) {\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndUpdate({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    $push: {\n      fileInfos: { $each: createFileInfos(files, boardName, postNumber) }\n    }\n  }, {\n    projection: { threadNumber: 1 },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  await IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n}\n\nasync function removeFile({ boardName, name, thumb }) {\n  let path = `${__dirname}/../../public/${boardName}`;\n  try {\n    await FS.remove(`${path}/src/${name}`);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  try {\n    await FS.remove(`${path}/thumb/${thumb.name}`);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function removeFiles(fileInfos) {\n  await Tools.series(fileInfos, removeFile);\n}\n\nexport async function moveThreadFilesToArchive(boardName, threadNumber) {\n  let archivePath = `${__dirname}/../../public/${boardName}/arch`;\n  await mkpath(archivePath);\n  let sourceId = `${boardName}/res/${threadNumber}.json`;\n  let data = await Cache.readFile(sourceId);\n  let model = JSON.parse(data);\n  model.thread.archived = true;\n  await FS.write(`${archivePath}/${threadNumber}.json`, JSON.stringify(model));\n  await BoardController.renderThreadHTML(model.thread, {\n    targetPath: `${archivePath}/${threadNumber}.html`,\n    archived: true\n  });\n  await Cache.removeFile(sourceId);\n  await Cache.removeFile(`${boardName}/res/${threadNumber}.html`);\n}\n\nexport async function removeArchivedThreadFiles(boardName, threadNumber) {\n  await Tools.series(['json', 'html'], async function(suffix) {\n    try {\n      await FS.remove(`${__dirname}/../../public/${boardName}/arch/${threadNumber}.${suffix}`);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  });\n}\n\nexport async function deleteFile(fileName) {\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndUpdate({ 'fileInfos.name': fileName }, {\n    $pull: {\n      fileInfos: { name: fileName }\n    }\n  }, {\n    projection: {\n      boardName: 1,\n      number: 1,\n      threadNumber: 1,\n      'fileInfos.$': 1\n    },\n    returnOriginal: true\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  await IPC.render(post.boardName, post.threadNumber, post.number, 'edit');\n  removeFile(post.fileInfos[0]);\n}\n\nexport async function editFileRating(fileName, rating) {\n  let Post = await client.collection('post');\n  if (Tools.FILE_RATINGS.indexOf(rating) < 0) {\n    rating = Tools.FILE_RATINGS[0];\n  }\n  let result = await Post.findOneAndUpdate({ 'fileInfos.name': fileName }, {\n    $set: { 'fileInfos.$.rating': rating }\n  }, {\n    projection: {\n      boardName: 1,\n      number: 1,\n      threadNumber: 1\n    },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  await IPC.render(post.boardName, post.threadNumber, post.number, 'edit');\n}\n\nexport async function editAudioTags(fileName, fields) {\n  let Post = await client.collection('post');\n  let extraData = AUDIO_TAGS.map((tagName) => {\n    return {\n      tagName: tagName,\n      value: fields[tagName]\n    };\n  }).filter(({ value }) => {\n    return (value && (typeof value === 'string'));\n  }).reduce((acc, { tagName, value }) => {\n    acc[tagName] = value;\n    return acc;\n  }, {});\n  let result = await Post.findOneAndUpdate({ 'fileInfos.name': fileName }, {\n    $set: { 'fileInfos.$.extraData': extraData }\n  }, {\n    projection: {\n      boardName: 1,\n      number: 1,\n      threadNumber: 1\n    },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    throw new Error(Tools.translate('No such file'));\n  }\n  await IPC.render(post.boardName, post.threadNumber, post.number, 'edit');\n}\n\nexport async function getPostFileCount(boardName, postNumber, { archived } = {}) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, { fileInfoCount: 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  return post.fileInfoCount;\n}\n\nexport async function copyFiles(fileInfos, sourceBoardName, targetBoardName, transaction) {\n  let sourcePath = `${__dirname}/../../public/${sourceBoardName}/src`;\n  let sourceThumbPath = `${__dirname}/../../public/${sourceBoardName}/thumb`;\n  let targetPath = `${__dirname}/../../public/${targetBoardName}/src`;\n  let targetThumbPath = `${__dirname}/../../public/${targetBoardName}/thumb`;\n  await mkpath(targetPath);\n  await mkpath(targetThumbPath);\n  return await Tools.series(fileInfos, async function(fileInfo) {\n    let oldFileName = fileInfo.name;\n    let oldThumbName = fileInfo.thumb.name;\n    let baseName = await IPC.send('fileName');\n    fileInfo.name = fileInfo.name.replace(/^\\d+/, baseName);\n    fileInfo.thumb.name = fileInfo.thumb.name.replace(/^\\d+/, baseName);\n    let newFilePath = `${targetPath}/${fileInfo.name}`;\n    let newThumbPath = `${targetThumbPath}/${fileInfo.thumb.name}`;\n    transaction.addFile(newFilePath);\n    await FS.copy(`${sourcePath}/${oldFileName}`, newFilePath);\n    transaction.addFile(newThumbPath);\n    await FS.copy(`${sourceThumbPath}/${oldThumbName}`, newThumbPath);\n    return fileInfo;\n  }, true);\n}\n"],"sourceRoot":"/source/"}