{"version":3,"sources":["models/files.js"],"names":["name","hash","FileHashes","getOne","info","ArchivedFileHashes","Promise","reject","Error","Tools","translate","FileInfos","fileInfo","ArchivedFileInfos","getFileInfo","getFileInfoByName","getFileInfoByHash","existsOne","exists","fileInfoExistsByName","fileInfoExistsByHash","hashes","isArray","series","getFileInfosByHashes","archived","source","setOne","addFileInfo","fileInfos","filter","addOne","createFileHash","addFileHashes","length","deleteOne","count","size","delete","removeFileHashes","fileInfoNames","deleteSome","removeFileInfos","boardName","postNumber","files","ArchivedPostFileInfoNames","PostFileInfoNames","file","addFilesToPost","fileName","infosSource","namesSource","path","__dirname","thumb","remove","Logger","error","stack","deleteFile","rating","FILE_RATINGS","indexOf","editFileRating","fields","forEach","tag","value","extraData","hasOwnProperty","editAudioTags","getPostFileCount","getAll","fileNames","getSome","getPostFileInfos","key","paths","map","flatten","removePostFileInfos","addSome","setSome","fileHash","pushPostFileInfosToArchive","parse","stringify","mimeType"],"mappings":"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","file":"models/files.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\n\nimport * as Tools from '../helpers/tools';\nimport Hash from '../storage/hash';\nimport redisClient from '../storage/redis-client-factory';\nimport sqlClient from '../storage/sql-client-factory';\nimport UnorderedSet from '../storage/unordered-set';\nimport { AUDIO_TAGS } from '../file-types/audio';\n\nlet ArchivedFileHashes = new UnorderedSet(sqlClient(), 'archivedFileHashes');\nlet ArchivedFileInfos = new Hash(sqlClient(), 'archivedFileInfos');\nlet ArchivedPostFileInfoNames = new UnorderedSet(sqlClient(), 'archivedPostFileInfoNames', {\n  parse: false,\n  stringify: false\n});\nlet FileHashes = new UnorderedSet(redisClient(), 'fileHashes');\nlet FileInfos = new Hash(redisClient(), 'fileInfos');\nlet PostFileInfoNames = new UnorderedSet(redisClient(), 'postFileInfoNames', {\n  parse: false,\n  stringify: false\n});\n\nasync function getFileInfo(name, hash) {\n  if (!name && hash) {\n    let info = await FileHashes.getOne(hash);\n    if (!info) {\n      info = await ArchivedFileHashes.getOne(hash);\n    }\n    if (info) {\n      name = info.name;\n    }\n  }\n  if (!name) {\n    return Promise.reject(new Error(Tools.translate('No such file')));\n  }\n  let fileInfo = await FileInfos.getOne(name);\n  if (!fileInfo) {\n    fileInfo = ArchivedFileInfos.getOne(name);\n  }\n  if (!fileInfo) {\n    return Promise.reject(new Error(Tools.translate('No such file')));\n  }\n  return fileInfo;\n}\n\nexport async function getFileInfoByName(name) {\n  return await getFileInfo(name);\n}\n\nexport async function getFileInfoByHash(hash) {\n  return await getFileInfo(null, hash);\n}\n\nexport async function fileInfoExistsByName(name) {\n  let exists = await FileInfos.existsOne(name);\n  if (exists) {\n    return true;\n  }\n  return await ArchivedFileInfos.existsOne(name);\n}\n\nexport async function fileInfoExistsByHash(hash) {\n  let exists = await FileHashes.exists(hash);\n  if (exists) {\n    return true;\n  }\n  return await ArchivedFileHashes.exists(hash);\n}\n\nexport async function getFileInfosByHashes(hashes) {\n  if (!hashes) {\n    return [];\n  }\n  if (!_(hashes).isArray()) {\n    hashes = [hashes];\n  }\n  return await Tools.series(hashes, async function(hash) {\n    let fileInfo = await FileHashes.getOne(hash);\n    if (!fileInfo) {\n      fileInfo = await ArchivedFileHashes.getOne(hash);\n    }\n    if (fileInfo) {\n      fileInfo.hash = hash;\n    }\n    return fileInfo;\n  }, true);\n}\n\nexport async function addFileInfo(fileInfo, { archived } = {}) {\n  let source = archived ? ArchivedFileInfos : FileInfos;\n  await source.setOne(fileInfo.name, fileInfo);\n}\n\nexport function createFileHash(fileInfo) {\n  return {\n    name: fileInfo.name,\n    thumb: { name: fileInfo.thumb.name },\n    size: fileInfo.size,\n    boardName: fileInfo.boardName,\n    mimeType: fileInfo.mimeType,\n    rating: fileInfo.rating\n  };\n}\n\nexport async function addFileHashes(fileInfos) {\n  if (!_(fileInfos).isArray()) {\n    fileInfos = [fileInfos];\n  }\n  await Tools.series(fileInfos.filter(fileInfo => !!fileInfo), async function(fileInfo) {\n    let source = fileInfo.archived ? ArchivedFileHashes : FileHashes;\n    return await source.addOne(createFileHash(fileInfo), fileInfo.hash);\n  });\n}\n\nexport async function removeFileHashes(fileInfos) {\n  if (!_(fileInfos).isArray()) {\n    fileInfos = [fileInfos];\n  }\n  if (fileInfos.length <= 0) {\n    return;\n  }\n  await Tools.series(fileInfos, async function(fileInfo) {\n    let source = fileInfo.archived ? ArchivedFileHashes : FileHashes;\n    await source.deleteOne(createFileHash(fileInfo), fileInfo.hash);\n    let size = await source.count(fileInfo.hash);\n    if (size <= 0) {\n      await source.delete(fileInfo.hash);\n    }\n  });\n}\n\nexport async function removeFileInfos(fileInfoNames, { archived } = {}) {\n  if (!_(fileInfoNames).isArray()) {\n    fileInfoNames = [fileInfoNames];\n  }\n  if (fileInfoNames.length <= 0) {\n    return 0;\n  }\n  let source = archived ? ArchivedFileInfos : FileInfos;\n  await source.deleteSome(fileInfoNames);\n}\n\nexport async function addFilesToPost(boardName, postNumber, files, { archived } = {}) {\n  let source = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  await Tools.series(files, async function(file) {\n    file.boardName = boardName;\n    file.postNumber = postNumber;\n    await addFileInfo(file, { archived: archived });\n    await source.addOne(file.name, `${boardName}:${postNumber}`);\n  });\n  await addFileHashes(files);\n}\n\nexport async function deleteFile(fileName) {\n  let fileInfo = await getFileInfoByName(fileName);\n  let { boardName, postNumber, archived } = fileInfo;\n  let infosSource = archived ? ArchivedFileInfos : FileInfos;\n  let namesSource = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  await namesSource.deleteOne(fileName, `${boardName}:${postNumber}`);\n  await infosSource.deleteOne(fileName);\n  await removeFileHashes(fileInfo);\n  let path = `${__dirname}/../../public/${boardName}`;\n  Tools.series([`${path}/src/${fileInfo.name}`, `${path}/thumb/${fileInfo.thumb.name}`], async function() {\n    try {\n      await FS.remove(path);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  });\n}\n\nexport async function editFileRating(fileName, rating) {\n  let fileInfo = await getFileInfoByName(fileName);\n  if (Tools.FILE_RATINGS.indexOf(rating) < 0) {\n    rating = Tools.FILE_RATINGS[0];\n  }\n  fileInfo.rating = rating;\n  let source = fileInfo.archived ? ArchivedFileInfos : FileInfos;\n  await source.setOne(fileName, fileInfo);\n}\n\nexport async function editAudioTags(fileName, fields) {\n  let fileInfo = await getFileInfoByName(fileName);\n  AUDIO_TAGS.forEach((tag) => {\n    let value = fields[tag];\n    if (value && typeof value === 'string') {\n      fileInfo.extraData[tag] = value;\n    } else if (fileInfo.extraData.hasOwnProperty(tag)) {\n      delete fileInfo.extraData[tag];\n    }\n  });\n  let source = fileInfo.archived ? ArchivedFileInfos : FileInfos;\n  await source.setOne(fileName, fileInfo);\n}\n\nexport async function getPostFileCount(boardName, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  return await source.count(`${boardName}:${postNumber}`);\n}\n\nexport async function getPostFileInfos(boardName, postNumber, { archived } = {}) {\n  let namesSource = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  let infosSource = archived ? ArchivedFileInfos : FileInfos;\n  let fileNames = await namesSource.getAll(`${boardName}:${postNumber}`);\n  return await infosSource.getSome(fileNames);\n}\n\nexport async function removePostFileInfos(boardName, postNumber, { archived } = {}) {\n  let key = `${boardName}:${postNumber}`\n  let namesSource = archived ? ArchivedPostFileInfoNames : PostFileInfoNames;\n  let fileNames = await namesSource.getAll(key);\n  let fileInfos = await Tools.series(fileNames, async function(fileName) {\n    return await getFileInfoByName(fileName);\n  }, true);\n  fileInfos = fileInfos.filter(fileInfo => !!fileInfo);\n  let paths = fileInfos.map((fileInfo) => {\n    return [\n      `${__dirname}/../../public/${boardName}/src/${fileInfo.name}`,\n      `${__dirname}/../../public/${boardName}/thumb/${fileInfo.thumb.name}`\n    ];\n  });\n  await namesSource.delete(key);\n  await removeFileInfos(fileNames, { archived: archived });\n  await removeFileHashes(fileInfos);\n  Tools.series(_(paths).flatten(), async function(path) {\n    try {\n      await FS.remove(path);\n    } catch (err) {\n      Logger.error(err.stack || err);\n    }\n  });\n}\n\nexport async function pushPostFileInfosToArchive(boardName, postNumber) {\n  let key = `${boardName}:${postNumber}`\n  let fileNames = await PostFileInfoNames.getAll(key);\n  await ArchivedPostFileInfoNames.addSome(fileNames, key);\n  await PostFileInfoNames.delete(key);\n  let fileInfos = await Tools.series(fileNames, async function(fileName) {\n    return await getFileInfoByName(fileName);\n  }, {});\n  await ArchivedFileInfos.setSome(fileInfos);\n  await FileInfos.deleteSome(fileNames);\n  await Tools.series(fileInfos, async function(fileInfo) {\n    let fileHash = createFileHash(fileInfo);\n    await ArchivedFileHashes.addOne(fileHash, fileInfo.hash);\n    await FileHashes.deleteOne(fileHash, fileInfo.hash);\n    let size = await FileHashes.count(fileInfo.hash);\n    if (size <= 0) {\n      await FileHashes.delete(fileInfo.hash);\n    }\n  });\n}\n"],"sourceRoot":"/source/"}