{"version":3,"sources":["models/users.js"],"names":["boardName","userID","board","Error","Tools","translate","UserCaptchaQuotas","getOne","quota","option","test","q","getUserCaptchaQuota","setOne","setUserCaptchaQuota","key","incrementBy","incrementUserCaptchaQuotaBy","Promise","reject","captchaQuota","useCaptcha","UserPostQuotas","exists","exists1","exists2","get","getPostQuota","expireAt","postTimeQuota","setex","setPostQuota","incrementPostQuotaBy","postQuota","set","usePostQuota","checkPostQuota","postNumber","client","collection","Post","findOne","number","post","user","ip","getUserIP","boardNames","correctAddress","BannedUser","binaryAddress","$or","subnet","start","$lte","end","$gte","_id","bannedUser","bans","processBannedUser","getBannedUserBoardNames","getBannedUser","find","toArray","bannedUsers","map","bind","reduce","acc","getBannedUsers","query","full","User","projection","superuser","levels","processRegisteredUser","getRegisteredUserInternal","hashpass","getRegisteredUserLevels","push","$elemMatch","getRegisteredUserLevelsByIp","$exists","getRegisteredUser","users","getRegisteredUsers","ips","count","insertOne","processRegisteredUserData","registerUser","updateOne","$set","matchedCount","updateRegisteredUser","deleteOne","deletedCount","unregisterUser","processUserIPs","addSuperuser","removeSuperuser","SynchronizationData","getSynchronizationData","data","now","setSeconds","getSeconds","expiresAt","upsert","setSynchronizationData","write","geolocationInfo","ban","ipBans","level","checkGeoBan","checkUserBan","req","permission","password","threadNumber","isSuperuser","compareRegisteredUserLevels","Permissions","opModeration","Thread","thread","checkUserPermissions","bannedFor","testPostNumber","findOneAndUpdate","returnOriginal","result","value","IPC","render","updatePostBanInfo","newBans","oldBans","series","_1","UserBans","delete","isEmpty","pick","delay","Math","ceil","SECOND","getPostsToUpdate","postsBannedFor","postsNotBannedFor","banUser","message","split","slice","join","pop","$pull","length","$size","error","stack","updateBanOnMessage","config","BanExpiredChannel","subscribe","initializeUserBansMonitoring","parse","stringify","toString","transformIPBans","createWatchedResource","__dirname","path","require","read","JSON","transformGeoBans","isArray","Set","filter","toUpperCase","Map","geoBans","indexOf","some","invalidLevel","def","countryCode","has","forEach"],"mappings":";;;;;;;;;;wDAuEO,kBAAmCA,SAAnC,EAA8CC,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACA,gBAAMC,KAAN,CAAYF,SAAZ,CADA;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAFH;;AAAA;AAAA;AAAA,mBAIaC,kBAAkBC,MAAlB,CAAyBN,MAAzB,CAJb;;AAAA;AAIDO,iBAJC;;AAKLA,oBAAQJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CAAR;;AALK,kBAMDH,SAAS,CANR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOWF,kBAAkBC,MAAlB,CAA4BP,SAA5B,SAAyCC,MAAzC,CAPX;;AAAA;AAOHO,iBAPG;;AAAA;AAAA,8CASEJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,mB;;;;;;wDAYf,kBAAmCZ,SAAnC,EAA8CC,MAA9C,EAAsDO,KAAtD;AAAA;AAAA;AAAA;AAAA;AAAA,gBACA,gBAAMN,KAAN,CAAYF,SAAZ,CADA;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAFH;;AAAA;AAILG,oBAAQJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CAAR;AAJK;AAAA,mBAKQL,kBAAkBO,MAAlB,CAA4Bb,SAA5B,SAAyCC,MAAzC,EAAmDO,KAAnD,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeM,mB;;;;;;wDAQf,kBAA2Cb,MAA3C,EAAmDO,KAAnD,EAA0DR,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AACDe,eADC,GACKd,MADL;;AAAA,iBAEDD,SAFC;AAAA;AAAA;AAAA;;AAAA,gBAGE,gBAAME,KAAN,CAAYF,SAAZ,CAHF;AAAA;AAAA;AAAA;;AAAA,kBAIK,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAJL;;AAAA;AAMHU,kBAASf,SAAT,SAAsBC,MAAtB;;AANG;AAQLO,oBAAQJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAO,MAAMA,CAAb;AAAiB,eAAlC,EAAjC,CAAR;AARK;AAAA,mBASQL,kBAAkBU,WAAlB,CAA8BR,KAA9B,EAAqCO,GAArC,CATR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeE,2B;;;;;;wDAYf,kBAA0BjB,SAA1B,EAAqCC,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,iBADC,GACO,gBAAMA,KAAN,CAAYF,SAAZ,CADP;;AAAA,gBAEAE,KAFA;AAAA;AAAA;AAAA;;AAAA,8CAGIgB,QAAQC,MAAR,CAAe,IAAIhB,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAAf,CAHJ;;AAAA;AAAA,kBAKDH,MAAMkB,YAAN,GAAqB,CALpB;AAAA;AAAA;AAAA;;AAAA,8CAMI,CANJ;;AAAA;AAQDL,eARC,GAQKd,MARL;AAAA;AAAA,mBASSK,kBAAkBC,MAAlB,CAAyBN,MAAzB,CATT;;AAAA;AASLO,iBATK;;AAULA,oBAAQJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CAAR;AACA,gBAAIH,SAAS,CAAb,EAAgB;AACdO,oBAASf,SAAT,SAAsBC,MAAtB;AACD;AAbI;AAAA,mBAcaK,kBAAkBU,WAAlB,CAA8BD,GAA9B,EAAmC,CAAC,CAApC,CAdb;;AAAA;AAcDP,iBAdC;;AAAA,kBAeD,CAACA,KAAD,GAAS,CAfR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgBUF,kBAAkBO,MAAlB,CAAyBE,GAAzB,EAA8B,CAA9B,CAhBV;;AAAA;AAAA;;AAAA;AAAA,8CAkBEX,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeU,U;;;;;;wDAqBf,kBAA4BrB,SAA5B,EAAuCC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACA,gBAAMC,KAAN,CAAYF,SAAZ,CADA;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAFH;;AAAA;AAAA;AAAA,mBAIeiB,eAAeC,MAAf,CAAsBtB,MAAtB,CAJf;;AAAA;AAIDuB,mBAJC;AAAA;AAAA,mBAKeF,eAAeC,MAAf,CAAyBvB,SAAzB,SAAsCC,MAAtC,CALf;;AAAA;AAKDwB,mBALC;;AAAA,kBAMD,CAACD,OAAD,IAAY,CAACC,OANZ;AAAA;AAAA;AAAA;;AAAA,8CAOI,KAPJ;;AAAA;AAAA;AAAA,mBAQaH,eAAeI,GAAf,CAAmBF,UAASvB,MAAT,GAAqBD,SAArB,SAAkCC,MAArD,CARb;;AAAA;AAQDO,iBARC;AAAA,8CASEJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CATF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAegB,Y;;;;;;wDAYf,kBAA4B3B,SAA5B,EAAuCC,MAAvC,EAA+CO,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AACDN,iBADC,GACO,gBAAMA,KAAN,CAAYF,SAAZ,CADP;;AAAA,gBAEAE,KAFA;AAAA;AAAA;AAAA;;AAAA,kBAGG,IAAIC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAHH;;AAAA;AAKDuB,oBALC,GAKU1B,MAAM2B,aALhB;;AAMLrB,oBAAQJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CAAR;AANK;AAAA,mBAOQW,eAAeQ,KAAf,CAAqBtB,KAArB,EAA4BoB,QAA5B,EAAyC5B,SAAzC,SAAsDC,MAAtD,CAPR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe8B,Y;;;;;;wDAUf,kBAAoC9B,MAApC,EAA4CD,SAA5C,EAAuDQ,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AACDO,eADC,GACKd,MADL;;AAAA,iBAEDD,SAFC;AAAA;AAAA;AAAA;;AAAA,gBAGE,gBAAME,KAAN,CAAYF,SAAZ,CAHF;AAAA;AAAA;AAAA;;AAAA,kBAIK,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAJL;;AAAA;AAMHU,kBAASf,SAAT,SAAsBC,MAAtB;;AANG;AAQLO,oBAAQJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAO,MAAMA,CAAb;AAAiB,eAAlC,EAAjC,CAAR;AARK;AAAA,mBASQW,eAAeN,WAAf,CAA2BR,KAA3B,EAAkCO,GAAlC,CATR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeiB,oB;;;;;;yDAYf,mBAA4BhC,SAA5B,EAAuCC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,iBADC,GACO,gBAAMA,KAAN,CAAYF,SAAZ,CADP;;AAAA,gBAEAE,KAFA;AAAA;AAAA;AAAA;;AAAA,kBAGG,IAAIC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAHH;;AAAA;AAAA,kBAKDH,MAAM+B,SAAN,GAAkB,CALjB;AAAA;AAAA;AAAA;;AAAA,+CAMI,IANJ;;AAAA;AAQDlB,eARC,GAQKd,MARL;AAAA;AAAA,mBASaqB,eAAeI,GAAf,CAAmBX,GAAnB,CATb;;AAAA;AASDP,iBATC;;AAULA,oBAAQJ,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CAAR;AACA,gBAAIH,SAAS,CAAb,EAAgB;AACdO,oBAASf,SAAT,SAAsBC,MAAtB;AACD;AAbI;AAAA,mBAcSqB,eAAeN,WAAf,CAA2B,CAAC,CAA5B,EAA+BD,GAA/B,CAdT;;AAAA;AAcLP,iBAdK;;AAAA,kBAeD,CAACA,KAAD,GAAS,CAfR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgBUc,eAAeY,GAAf,CAAmB,CAAnB,EAAsBnB,GAAtB,CAhBV;;AAAA;AAAA;;AAAA;AAAA,+CAkBEX,MAAMK,MAAN,CAAaD,KAAb,EAAoB,QAApB,EAA8B,CAA9B,EAAiC,EAAEE,MAAM,cAACC,CAAD,EAAO;AAAE,uBAAOA,KAAK,CAAZ;AAAgB,eAAjC,EAAjC,CAlBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAewB,Y;;;;;;yDAqBf,mBAA8BnC,SAA9B,EAAyCC,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACDC,iBADC,GACO,gBAAMA,KAAN,CAAYF,SAAZ,CADP;;AAAA,gBAEAE,KAFA;AAAA;AAAA;AAAA;;AAAA,kBAGG,IAAIC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAHH;;AAAA;AAAA,kBAKDH,MAAM+B,SAAN,GAAkB,CALjB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMeN,aAAa3B,SAAb,EAAwBC,MAAxB,CANf;;AAAA;AAMCO,iBAND;;AAAA,kBAOCA,UAAU,KAPX;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQKuB,aAAa/B,SAAb,EAAwBC,MAAxB,EAAgCC,MAAM+B,SAAtC,CARL;;AAAA;AAAA;AAAA,mBASaN,aAAa3B,SAAb,EAAwBC,MAAxB,CATb;;AAAA;AASDO,iBATC;;AAAA;AAAA,kBAWA,CAACA,KAAD,IAAU,CAXV;AAAA;AAAA;AAAA;;AAAA,+CAYM,KAZN;;AAAA;AAAA;AAAA,mBAaG2B,aAAanC,SAAb,EAAwBC,MAAxB,CAbH;;AAAA;AAAA,+CAeE,IAfF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAemC,c;;;;;;yDAkBf,mBAAyBpC,SAAzB,EAAoCqC,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACYC,OAAOC,UAAP,CAAkB,MAAlB,CADZ;;AAAA;AACDC,gBADC;AAAA;AAAA,mBAEYA,KAAKC,OAAL,CAAa;AAC5BzC,yBAAWA,SADiB;AAE5B0C,sBAAQL;AAFoB,aAAb,EAGd,EAAE,WAAW,CAAb,EAHc,CAFZ;;AAAA;AAEDM,gBAFC;;AAAA,gBAMAA,IANA;AAAA;AAAA;AAAA;;AAAA,kBAOG,IAAIxC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,cAAhB,CAAV,CAPH;;AAAA;AAAA,+CASEsC,KAAKC,IAAL,CAAUC,EATZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,S;;;;;;yDAgCf,mBAA6BD,EAA7B,EAAiCE,UAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACLF,iBAAKzC,MAAM4C,cAAN,CAAqBH,EAArB,CAAL;AADK;AAAA,mBAEkBP,OAAOC,UAAP,CAAkB,YAAlB,CAFlB;;AAAA;AAEDU,sBAFC;AAGDC,yBAHC,GAGe9C,MAAM8C,aAAN,CAAoBL,EAApB,CAHf;AAAA;AAAA,mBAIkBI,WAAWR,OAAX,CAAmB;AACxCU,mBAAK,CACH,EAAEN,IAAIA,EAAN,EADG,EAEH;AACEO,wBAAQ;AACNC,yBAAO,EAAEC,MAAMJ,aAAR,EADD;AAENK,uBAAK,EAAEC,MAAMN,aAAR;AAFC;AADV,eAFG;AADmC,aAAnB,EAUpB,EAAEO,KAAK,CAAP,EAVoB,CAJlB;;AAAA;AAIDC,sBAJC;;AAAA,gBAeAA,UAfA;AAAA;AAAA;AAAA;;AAAA,+CAgBI;AACLb,kBAAIA,EADC;AAELc,oBAAM;AAFD,aAhBJ;;AAAA;AAAA,+CAqBEC,kBAAkBC,wBAAwBd,UAAxB,CAAlB,EAAuDW,UAAvD,CArBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,a;;;;;;yDAwBf,mBAA8Bf,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACkBT,OAAOC,UAAP,CAAkB,YAAlB,CADlB;;AAAA;AACDU,sBADC;AAAA;AAAA,mBAEmBA,WAAWc,IAAX,CAAgB,EAAhB,EAAoB,EAAEN,KAAK,CAAP,EAApB,EAAgCO,OAAhC,EAFnB;;AAAA;AAEDC,uBAFC;;AAGLlB,yBAAac,wBAAwBd,UAAxB,CAAb;AAHK,+CAIEkB,YAAYC,GAAZ,CAAgBN,kBAAkBO,IAAlB,CAAuB,IAAvB,EAA6BpB,UAA7B,CAAhB,EAA0DqB,MAA1D,CAAiE,UAACC,GAAD,EAAMX,UAAN,EAAqB;AAC3FW,kBAAIX,WAAWb,EAAf,IAAqBa,UAArB;AACA,qBAAOW,GAAP;AACD,aAHM,EAGJ,EAHI,CAJF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,c;;;;;;yDAyBtB,mBAAyCC,KAAzC;AAAA,qFAA2D,EAA3D;AAAA,QAAkDC,IAAlD,UAAkDA,IAAlD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACmBlC,OAAOC,UAAP,CAAkB,MAAlB,CADnB;;AAAA;AACMkC,gBADN;AAEMC,sBAFN,GAEmB,EAAEjB,KAAK,CAAP,EAFnB;;AAGE,gBAAI,CAACe,IAAL,EAAW;AACTE,2BAAa;AACXC,2BAAW,CADA;AAEXC,wBAAQ;AAFG,eAAb;AAID;AARH;AAAA,mBASmBH,KAAKhC,OAAL,CAAa8B,KAAb,EAAoBG,UAApB,CATnB;;AAAA;AASM9B,gBATN;;AAAA,gBAUOA,IAVP;AAAA;AAAA;AAAA;;AAAA,+CAWW,IAXX;;AAAA;AAAA,+CAaSiC,sBAAsBjC,IAAtB,CAbT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAekC,yB;;;;;;yDAgBR,mBAAuCC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACYD,0BAA0B,EAAEC,UAAUA,QAAZ,EAA1B,CADZ;;AAAA;AACDnC,gBADC;AAAA,+CAEEA,OAAOA,KAAKgC,MAAZ,GAAqB,EAFvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,uB;;;;;;yDAKf,mBAA2CnC,EAA3C,EAA+CO,MAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AACLP,iBAAKzC,MAAM4C,cAAN,CAAqBH,EAArB,CAAL;;AADK,gBAEAA,EAFA;AAAA;AAAA;AAAA;;AAAA,+CAGI,EAHJ;;AAAA;AAKD0B,iBALC,GAKO;AACVpB,mBAAK,CAAC,EAAE,UAAUN,EAAZ,EAAD;AADK,aALP;;AAQL,gBAAIO,MAAJ,EAAY;AACVmB,oBAAMpB,GAAN,CAAU8B,IAAV,CAAe;AACb,8BAAc;AACZC,8BAAY;AACV1B,0BAAMJ,OAAOC,KADH;AAEVC,0BAAMF,OAAOG;AAFH;AADA;AADD,eAAf;AAQD;AAjBI;AAAA,mBAkBYuB,0BAA0BP,KAA1B,CAlBZ;;AAAA;AAkBD3B,gBAlBC;AAAA,+CAmBEA,OAAOA,KAAKgC,MAAZ,GAAqB,EAnBvB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeO,2B;;;;;;yDAsBf,mBAAiCJ,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACYD,0BAA0B;AACzCC,wBAAUA,QAD+B;AAEzCJ,yBAAW,EAAES,SAAS,KAAX;AAF8B,aAA1B,EAGd,EAAEZ,MAAM,IAAR,EAHc,CADZ;;AAAA;AACD5B,gBADC;;AAAA,gBAKAA,IALA;AAAA;AAAA;AAAA;;AAAA,kBAMG,IAAIzC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,4BAAhB,CAAV,CANH;;AAAA;AAAA,+CAQEuC,IARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeyC,iB;;;;;;yDAWf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACY/C,OAAOC,UAAP,CAAkB,MAAlB,CADZ;;AAAA;AACDkC,gBADC;AAAA;AAAA,mBAEaA,KAAKV,IAAL,CAAU;AAC1BY,yBAAW,EAAES,SAAS,KAAX;AADe,aAAV,EAEf,EAAE3B,KAAK,CAAP,EAFe,EAEHO,OAFG,EAFb;;AAAA;AAEDsB,iBAFC;AAAA,+CAKEA,MAAMpB,GAAN,CAAUW,qBAAV,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeU,kB;;;;;;yDAiCf,mBAA4BR,QAA5B,EAAsCH,MAAtC,EAA8CY,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACYlD,OAAOC,UAAP,CAAkB,MAAlB,CADZ;;AAAA;AACDkC,gBADC;AAAA;AAAA,mBAEaA,KAAKgB,KAAL,CAAW,EAAEV,UAAUA,QAAZ,EAAX,CAFb;;AAAA;AAEDU,iBAFC;;AAAA,kBAGDA,QAAQ,CAHP;AAAA;AAAA;AAAA;;AAAA,kBAIG,IAAItF,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,iDAAhB,CAAV,CAJH;;AAAA;AAAA;AAAA,mBAMCoE,KAAKiB,SAAL,CAAe;AACnBX,wBAAUA,QADS;AAEnBH,sBAAQA,MAFW;AAGnBY,mBAAKG,0BAA0Bf,MAA1B,EAAkCY,GAAlC;AAHc,aAAf,CAND;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,Y;;;;;;yDAaf,mBAAoCb,QAApC,EAA8CH,MAA9C,EAAsDY,GAAtD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACYlD,OAAOC,UAAP,CAAkB,MAAlB,CADZ;;AAAA;AACDkC,gBADC;AAAA;AAAA,mBAEwBA,KAAKoB,SAAL,CAAe;AAC1Cd,wBAAUA;AADgC,aAAf,EAE1B;AACDe,oBAAM;AACJlB,wBAAQA,MADJ;AAEJY,qBAAKG,0BAA0Bf,MAA1B,EAAkCY,GAAlC;AAFD;AADL,aAF0B,CAFxB;;AAAA;AAAA;AAECO,wBAFD,UAECA,YAFD;;AAAA,kBAUDA,gBAAgB,CAVf;AAAA;AAAA;AAAA;;AAAA,kBAWG,IAAI5F,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,4BAAhB,CAAV,CAXH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe2F,oB;;;;;;yDAef,mBAA8BjB,QAA9B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACYzC,OAAOC,UAAP,CAAkB,MAAlB,CADZ;;AAAA;AACDkC,gBADC;AAAA;AAAA,mBAEwBA,KAAKwB,SAAL,CAAe,EAAElB,UAAUA,QAAZ,EAAf,CAFxB;;AAAA;AAAA;AAECmB,wBAFD,UAECA,YAFD;;AAAA,kBAGDA,gBAAgB,CAHf;AAAA;AAAA;AAAA;;AAAA,kBAIG,IAAI/F,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,4BAAhB,CAAV,CAJH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe8F,c;;;;;;yDAQf,mBAA4BpB,QAA5B,EAAsCS,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACAT,QADA;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAI5E,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,kBAAhB,CAAV,CAFH;;AAAA;AAAA;AAAA,mBAIYiC,OAAOC,UAAP,CAAkB,MAAlB,CAJZ;;AAAA;AAIDkC,gBAJC;AAAA;AAAA,mBAKaA,KAAKgB,KAAL,CAAW,EAAEV,UAAUA,QAAZ,EAAX,CALb;;AAAA;AAKDU,iBALC;;AAAA,kBAMDA,QAAQ,CANP;AAAA;AAAA;AAAA;;AAAA,kBAOG,IAAItF,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,iDAAhB,CAAV,CAPH;;AAAA;AAAA;AAAA,mBASCoE,KAAKiB,SAAL,CAAe;AACnBX,wBAAUA,QADS;AAEnBJ,yBAAW,IAFQ;AAGnBa,mBAAKY,eAAeZ,GAAf;AAHc,aAAf,CATD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAea,Y;;;;;;yDAgBf,mBAA+BtB,QAA/B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gBACAA,QADA;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAI5E,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,kBAAhB,CAAV,CAFH;;AAAA;AAAA;AAAA,mBAIYiC,OAAOC,UAAP,CAAkB,MAAlB,CAJZ;;AAAA;AAIDkC,gBAJC;AAAA;AAAA,mBAKwBA,KAAKwB,SAAL,CAAe,EAAElB,UAAUA,QAAZ,EAAf,CALxB;;AAAA;AAAA;AAKCmB,wBALD,UAKCA,YALD;;AAAA,kBAMDA,gBAAgB,CANf;AAAA;AAAA;AAAA;;AAAA,kBAOG,IAAI/F,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,4BAAhB,CAAV,CAPH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeiG,e;;;;;;yDAWf,mBAAsCvF,GAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BuB,OAAOC,UAAP,CAAkB,qBAAlB,CAD3B;;AAAA;AACDgE,+BADC;AAAA;AAAA,mBAEQA,oBAAoB9D,OAApB,CAA4B,EAAE1B,KAAKA,GAAP,EAA5B,CAFR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeyF,sB;;;;;;yDAKf,mBAAsCzF,GAAtC,EAA2C0F,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC2BnE,OAAOC,UAAP,CAAkB,qBAAlB,CAD3B;;AAAA;AACDgE,+BADC;AAED3E,oBAFC,GAEUxB,MAAMsG,GAAN,EAFV;;AAGL9E,qBAAS+E,UAAT,CAAoB/E,SAASgF,UAAT,KAAwB,sBAAO,gCAAP,CAA5C;AAHK;AAAA,mBAIOL,oBAAoBV,SAApB,CAA8B,EAAE9E,KAAKA,GAAP,EAA9B,EAA4C;AACtD+E,oBAAM;AACJW,sBAAMA,IADF;AAEJI,2BAAWjF;AAFP;AADgD,aAA5C,EAKT,EAAEkF,QAAQ,IAAV,EALS,CAJP;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,sB;;;;;;yDAoCf,mBAA4BlE,EAA5B,EAAgCE,UAAhC;AAAA,qFAAyE,EAAzE;AAAA,QAA8CiE,KAA9C,UAA8CA,KAA9C;AAAA,QAAqDC,eAArD,UAAqDA,eAArD;;AAAA;AAAA;AAAA;AAAA;AAAA;AACLpE,iBAAKzC,MAAM4C,cAAN,CAAqBH,EAArB,CAAL;AACIqE,eAFC,GAEKC,OAAOtE,EAAP,CAFL;;AAAA,kBAGDqE,QAAQF,SAAS,gBAAgBE,IAAIE,KAArC,CAHC;AAAA;AAAA;AAAA;;AAAA,kBAIG,EAAEF,KAAKA,GAAP,EAJH;;AAAA;AAAA,iBAMDnE,UANC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOoBe,cAAcjB,EAAd,EAAkBE,UAAlB,CAPpB;;AAAA;AAOCW,sBAPD;;AAQHwD,kBAAM,0BAAExD,WAAWC,IAAb,EAAmBI,IAAnB,CAAwB,UAACmD,GAAD,EAAS;AAAE,qBAAOA,QAAQF,SAAS,gBAAgBE,IAAIE,KAArC,CAAP;AAAqD,aAAxF,CAAN;;AARG,iBASCF,GATD;AAAA;AAAA;AAAA;;AAAA,kBAUK,EAAEA,KAAKA,GAAP,EAVL;;AAAA;AAAA,iBAaDD,eAbC;AAAA;AAAA;AAAA;;AAAA,+CAcII,YAAYJ,eAAZ,EAA6BpE,EAA7B,CAdJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeyE,Y;;;;;;yDAkBf,mBAAoCC,GAApC,EAAyCvH,SAAzC,EAAoDqC,UAApD,EAAgEmF,UAAhE,EAA4EC,QAA5E;AAAA;AAAA;AAAA;AAAA;AAAA;AACDvH,iBADC,GACO,gBAAMA,KAAN,CAAYF,SAAZ,CADP;;AAAA,gBAEAE,KAFA;AAAA;AAAA;AAAA;;AAAA,kBAGG,IAAIC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAHH;;AAAA;AAAA;AAAA,mBAKYiC,OAAOC,UAAP,CAAkB,MAAlB,CALZ;;AAAA;AAKDC,gBALC;AAAA;AAAA,mBAMYA,KAAKC,OAAL,CAAa;AAC5BzC,yBAAWA,SADiB;AAE5B0C,sBAAQL;AAFoB,aAAb,EAGd;AACDqF,4BAAc,CADb;AAED9E,oBAAM;AAFL,aAHc,CANZ;;AAAA;AAMDD,gBANC;;AAAA,gBAaAA,IAbA;AAAA;AAAA;AAAA;;AAAA,kBAcG,IAAIxC,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,qBAAhB,EAAuC,EAAvC,QAA+CL,SAA/C,SAA4DqC,UAA5D,CAAV,CAdH;;AAAA;AAgBCO,gBAhBD,GAgBwBD,IAhBxB,CAgBCC,IAhBD,EAgBO8E,YAhBP,GAgBwB/E,IAhBxB,CAgBO+E,YAhBP;;AAAA,iBAiBDH,IAAII,WAAJ,EAjBC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAoBDvH,MAAMwH,2BAAN,CAAkCL,IAAIH,KAAJ,CAAUpH,SAAV,CAAlC,EAAwD6H,YAAYL,UAAZ,GAAxD,KAAsF,CApBrF;AAAA;AAAA;AAAA;;AAAA,kBAqBCpH,MAAMwH,2BAAN,CAAkCL,IAAIH,KAAJ,CAAUpH,SAAV,CAAlC,EAAwD,MAAxD,IAAkE,CAAlE,IACCI,MAAMwH,2BAAN,CAAkCL,IAAIH,KAAJ,CAAUpH,SAAV,CAAlC,EAAwD4C,KAAKwE,KAA7D,IAAsE,CAtBxE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAyBCG,IAAIxC,QAAJ,IAAgBwC,IAAIxC,QAAJ,KAAiBnC,KAAKmC,QAzBvC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBA4BC0C,YAAYA,aAAa7E,KAAK6E,QA5B/B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,gBAgCAvH,MAAM4H,YAhCN;AAAA;AAAA;AAAA;;AAAA,kBAiCG,IAAI3H,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,mBAAhB,CAAV,CAjCH;;AAAA;AAAA;AAAA,mBAmCciC,OAAOC,UAAP,CAAkB,QAAlB,CAnCd;;AAAA;AAmCDwF,kBAnCC;AAAA;AAAA,mBAoCcA,OAAOtF,OAAP,CAAe;AAChCzC,yBAAWA,SADqB;AAEhC0C,sBAAQgF;AAFwB,aAAf,CApCd;;AAAA;AAoCDM,kBApCC;;AAAA,gBAwCAA,MAxCA;AAAA;AAAA;AAAA;;AAAA,kBAyCG,IAAI7H,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,uBAAhB,EAAyC,EAAzC,QAAiDL,SAAjD,SAA8D0H,YAA9D,CAAV,CAzCH;;AAAA;AAAA,kBA2CDM,OAAOpF,IAAP,CAAYC,EAAZ,KAAmB0E,IAAI1E,EAAvB,KAA8B,CAAC0E,IAAIxC,QAAL,IAAiBwC,IAAIxC,QAAJ,KAAiBiD,OAAOpF,IAAP,CAAYmC,QAA5E,CA3CC;AAAA;AAAA;AAAA;;AAAA,kBA4CG,IAAI5E,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,mBAAhB,CAAV,CA5CH;;AAAA;AAAA,kBA8CDD,MAAMwH,2BAAN,CAAkCL,IAAIH,KAAJ,CAAUpH,SAAV,CAAlC,EAAwD4C,KAAKwE,KAA7D,KAAuE,CA9CtE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAiDDG,IAAIxC,QAAJ,IAAgBwC,IAAIxC,QAAJ,KAAiBnC,KAAKmC,QAjDrC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAoDD0C,YAAYA,aAAa7E,KAAK6E,QApD7B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,kBAuDC,IAAItH,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,mBAAhB,CAAV,CAvDD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAe4H,oB;;;;;;yDA0Df,mBAAiCjI,SAAjC,EAA4CqC,UAA5C,EAAwD6F,SAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACA,gBAAMhI,KAAN,CAAYF,SAAZ,CADA;AAAA;AAAA;AAAA;;AAAA,kBAEG,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAFH;;AAAA;AAILgC,yBAAajC,MAAMK,MAAN,CAAa4B,UAAb,EAAyB,QAAzB,EAAmC,CAAnC,EAAsC,EAAE3B,MAAMN,MAAM+H,cAAd,EAAtC,CAAb;;AAJK,gBAKA9F,UALA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAQYC,OAAOC,UAAP,CAAkB,MAAlB,CARZ;;AAAA;AAQDC,gBARC;AAAA;AAAA,mBAScA,KAAK4F,gBAAL,CAAsB;AACvCpI,yBAAWA,SAD4B;AAEvC0C,sBAAQL;AAF+B,aAAtB,EAGhB;AACDyD,oBAAM,EAAE,qBAAqB,CAAC,CAACoC,SAAzB;AADL,aAHgB,EAKhB;AACDxD,0BAAY,EAAEgD,cAAc,CAAhB,EADX;AAEDW,8BAAgB;AAFf,aALgB,CATd;;AAAA;AASDC,kBATC;AAkBD3F,gBAlBC,GAkBM2F,OAAOC,KAlBb;;AAAA,gBAmBA5F,IAnBA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA,mBAsBC6F,IAAIC,MAAJ,CAAWzI,SAAX,EAAsB2C,KAAK+E,YAA3B,EAAyCrF,UAAzC,EAAqD,MAArD,CAtBD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeqG,iB;;;;;;yDAqDf,mBAAuB7F,EAAvB,EAA2B8F,OAA3B,EAAoCvF,MAApC;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLP,iBAAKzC,MAAM4C,cAAN,CAAqBH,EAArB,CAAL;;AADK,gBAEAA,EAFA;AAAA;AAAA;AAAA;;AAAA,kBAGG,IAAI1C,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,oBAAhB,CAAV,CAHH;;AAAA;AAAA;AAAA,mBAKkByD,cAAcjB,EAAd,CALlB;;AAAA;AAKDa,sBALC;AAMDkF,mBANC,GAMSlF,WAAWC,IANpB;AAAA;AAAA,mBAOCvD,MAAMyI,MAAN,CAAaD,OAAb;AAAA,qEAAsB,mBAAeE,EAAf,EAAmB9I,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACpB+I,SAASC,MAAT,CAAmBnG,EAAnB,SAAyB7C,SAAzB,CADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAtB;;AAAA;AAAA;AAAA;AAAA,gBAPD;;AAAA;AAAA;AAAA,mBAUkBsC,OAAOC,UAAP,CAAkB,YAAlB,CAVlB;;AAAA;AAUDU,sBAVC;;AAAA,iBAWD,0BAAE0F,OAAF,EAAWM,OAAX,EAXC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYGhG,WAAWgD,SAAX,CAAqB,EAAEpD,IAAIA,EAAN,EAArB,CAZH;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAcGI,WAAW4C,SAAX,CAAqB,EAAEhD,IAAIA,EAAN,EAArB,EAAiC;AACrCiD,oBAAM;AACJ1C,wBAAQA,MADJ;AAEJO,sBAAM,0BAAEgF,OAAF,EAAW3E,OAAX;AAFF;AAD+B,aAAjC,EAKH,EAAE8C,QAAQ,IAAV,EALG,CAdH;;AAAA;AAAA;AAAA,mBAoBG1G,MAAMyI,MAAN,CAAa,0BAAEF,OAAF,EAAWO,IAAX,CAAgB,UAAChC,GAAD,EAAS;AAC1C,qBAAOA,IAAIL,SAAX;AACD,aAFkB,CAAb;AAAA,qEAEF,mBAAeK,GAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACEiC,6BADF,GACUC,KAAKC,IAAL,CAAU,CAAC,CAACnC,IAAIL,SAAL,GAAiB,CAACzG,MAAMsG,GAAN,EAAnB,IAAkCtG,MAAMkJ,MAAlD,CADV;AAAA;AAAA,+BAEIP,SAASjH,KAAT,CAAeoF,GAAf,EAAoBiC,KAApB,EAA8BtG,EAA9B,SAAoCqE,IAAIlH,SAAxC,CAFJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFE;;AAAA;AAAA;AAAA;AAAA,gBApBH;;AAAA;AAAA,gCA2BuCuJ,iBAAiBX,OAAjB,EAA0BD,OAA1B,CA3BvC,EA2BCa,cA3BD,qBA2BCA,cA3BD,EA2BiBC,iBA3BjB,qBA2BiBA,iBA3BjB;AAAA;AAAA,mBA4BCrJ,MAAMyI,MAAN,CAAaW,cAAb,EAA6B,kBAA+B;AAAA,kBAA5BnH,UAA4B,UAA5BA,UAA4B;AAAA,kBAAhBrC,SAAgB,UAAhBA,SAAgB;;AAChE,qBAAO0I,kBAAkB1I,SAAlB,EAA6BqC,UAA7B,EAAyC,IAAzC,CAAP;AACD,aAFK,CA5BD;;AAAA;AAAA;AAAA,mBA+BCjC,MAAMyI,MAAN,CAAaY,iBAAb,EAAgC,kBAA+B;AAAA,kBAA5BpH,UAA4B,UAA5BA,UAA4B;AAAA,kBAAhBrC,SAAgB,UAAhBA,SAAgB;;AACnE,qBAAO0I,kBAAkB1I,SAAlB,EAA6BqC,UAA7B,EAAyC,KAAzC,CAAP;AACD,aAFK,CA/BD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeqH,O;;;;;;yDAoCtB,mBAAkCC,OAAlC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,kBAEQA,QAAQC,KAAR,CAAc,GAAd,EAAmB,CAAnB,MAA0B,UAFlC;AAAA;AAAA;AAAA;;AAAA,+CAGa,KAHb;;AAAA;AAKQ/G,cALR,GAKazC,MAAM4C,cAAN,CAAqB2G,QAAQC,KAAR,CAAc,GAAd,EAAmBC,KAAnB,CAAyB,CAAzB,EAA4B,CAAC,CAA7B,EAAgCC,IAAhC,CAAqC,GAArC,CAArB,CALb;;AAAA,gBAMSjH,EANT;AAAA;AAAA;AAAA;;AAAA,kBAOY,IAAI1C,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,oBAAhB,CAAV,CAPZ;;AAAA;AASQL,qBATR,GASoB2J,QAAQC,KAAR,CAAc,GAAd,EAAmBG,GAAnB,EATpB;;AAAA,gBAUS,gBAAM7J,KAAN,CAAYF,SAAZ,CAVT;AAAA;AAAA;AAAA;;AAAA,kBAWY,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,eAAhB,CAAV,CAXZ;;AAAA;AAAA;AAAA,mBAa2BiC,OAAOC,UAAP,CAAkB,YAAlB,CAb3B;;AAAA;AAaQU,sBAbR;AAAA;AAAA,mBAcsCA,WAAWmF,gBAAX,CAA4B,EAAEvF,IAAIA,EAAN,EAA5B,EAAwC;AACxEmH,qBAAO;AACLrG,sBAAM,EAAE3D,WAAWA,SAAb;AADD;AADiE,aAAxC,EAI/B;AACD0E,0BAAY;AACVf,sBAAM;AACJuB,8BAAY,EAAElF,WAAWA,SAAb;AADR;AADI,eADX;AAMDqI,8BAAgB;AANf,aAJ+B,CAdtC;;AAAA;AAAA;AAciB3E,sBAdjB,UAcU6E,KAdV;;AAAA,kBA0BQ,CAAC7E,UAAD,IAAgBA,WAAWC,IAAX,CAAgBsG,MAAhB,KAA2B,CA1BnD;AAAA;AAAA;AAAA;;AAAA,kBA2BY,IAAI9J,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,mCAAhB,CAAV,CA3BZ;;AAAA;AAAA;AAAA,mBA6BU4C,WAAWgD,SAAX,CAAqB;AACzBpD,kBAAIA,EADqB;AAEzBc,oBAAM,EAAEuG,OAAO,CAAT;AAFmB,aAArB,CA7BV;;AAAA;AAiCQ7H,sBAjCR,GAiCqBjC,MAAMK,MAAN,CAAaiD,WAAWC,IAAX,CAAgB,CAAhB,EAAmBtB,UAAhC,EAA4C,QAA5C,EAAsD,CAAtD,EAAyD,EAAE3B,MAAMN,MAAM+H,cAAd,EAAzD,CAjCrB;;AAAA,iBAkCQ9F,UAlCR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmCYqG,kBAAkB1I,SAAlB,EAA6BqC,UAA7B,EAAyC,KAAzC,CAnCZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAsCI,6BAAO8H,KAAP,CAAa,cAAIC,KAAJ,iBAAb;;AAtCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,kB;;;;;;yDA0CR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEC,oCAAcC,MAAd,CAAqB,KAArB,EAA4B,wBAA5B,EAAsD,IAAtD,CAFD;;AAAA;AAAA;AAAA,mBAGCC,kBAAkBC,SAAlB,CAA4BH,kBAA5B,CAHD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeI,4B;;;;;AApqBtB;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;AACA;;IAAYjC,G;;AACZ;;;;AACA;;IAAYX,W;;AACZ;;IAAYzH,K;;AACZ;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAIkC,SAAS,qCAAb;;AAEA,IAAIiI,oBAAoB,sBAAY,kCAAY,aAAZ,CAAZ,kBAAsD,sBAAO,iBAAP,CAAtD,iBAA6F;AACnHG,SAAO,KAD4G;AAEnHC,aAAW;AAFwG,CAA7F,CAAxB;AAIA,IAAI5B,WAAW,kBAAQ,mCAAR,EAAuB,UAAvB,CAAf;AACA,IAAIzI,oBAAoB,mBAAS,mCAAT,EAAwB,eAAxB,EAAyC;AAC/DoK,SAAO;AAAA,WAAS,CAAClK,KAAV;AAAA,GADwD;AAE/DmK,aAAW;AAAA,WAASnK,MAAMoK,QAAN,EAAT;AAAA;AAFoD,CAAzC,CAAxB;AAIA,IAAItJ,iBAAiB,kBAAQ,mCAAR,EAAuB,YAAvB,EAAqC;AACxDoJ,SAAO;AAAA,WAAS,CAAClK,KAAV;AAAA,GADiD;AAExDmK,aAAW;AAAA,WAASnK,MAAMoK,QAAN,EAAT;AAAA;AAF6C,CAArC,CAArB;;AAKA,SAASC,eAAT,CAAyBlH,IAAzB,EAA+B;AAC7B,SAAO,0BAAEA,IAAF,EAAQS,MAAR,CAAe,UAACC,GAAD,EAAM6C,GAAN,EAAWrE,EAAX,EAAkB;AACtCA,SAAKzC,MAAM4C,cAAN,CAAqBH,EAArB,CAAL;AACA,QAAIA,EAAJ,EAAQ;AACNwB,UAAIxB,EAAJ,IAAUqE,GAAV;AACD;AACD,WAAO7C,GAAP;AACD,GANM,EAMJ,EANI,CAAP;AAOD;;AAED,IAAI8C,SAAS,oBAAU2D,qBAAV,CAAmCC,SAAnC,iCAA0E,UAACC,IAAD,EAAU;AAC/F,SAAOH,gBAAgBI,QAAQD,IAAR,CAAhB,CAAP;AACD,CAFY;AAAA,uDAEV,iBAAeA,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,aAAGE,IAAH,CAAQF,IAAR,CADhB;;AAAA;AACGvE,gBADH;;AAEDU,qBAAS0D,gBAAgBM,KAAKT,KAAL,CAAWjE,IAAX,CAAhB,CAAT;;AAFC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFU;;AAAA;AAAA;AAAA;AAAA,QAKP,EALN;;AAOA,SAAS2E,gBAAT,CAA0BzH,IAA1B,EAAgC;AAC9B,SAAO,0BAAEA,IAAF,EAAQS,MAAR,CAAe,UAACC,GAAD,EAAMkE,KAAN,EAAaxH,GAAb,EAAqB;AACzC,QAAI,OAAOwH,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,cAAQ,CAACA,KAAD,CAAR;AACD;AACD,QAAI,0BAAEA,KAAF,EAAS8C,OAAT,EAAJ,EAAwB;AACtB9C,cAAQ,IAAI+C,GAAJ,CAAQ/C,MAAMrE,GAAN,CAAU;AAAA,eAAM9D,MAAM4C,cAAN,CAAqBH,EAArB,CAAN;AAAA,OAAV,EAA0C0I,MAA1C,CAAiD;AAAA,eAAM,CAAC,CAAC1I,EAAR;AAAA,OAAjD,CAAR,CAAR;AACD,KAFD,MAEO;AACL0F,cAAQ,CAAC,CAACA,KAAV;AACD;AACDlE,QAAInC,GAAJ,CAAQnB,IAAIyK,WAAJ,EAAR,EAA2BjD,KAA3B;AACA,WAAOlE,GAAP;AACD,GAXM,EAWJ,IAAIoH,GAAJ,EAXI,CAAP;AAYD;;AAED,IAAIC,UAAU,oBAAUZ,qBAAV,CAAmCC,SAAnC,gCAAyE,UAACC,IAAD,EAAU;AAC/F,SAAOI,iBAAiBH,QAAQD,IAAR,CAAjB,CAAP;AACD,CAFa;AAAA,wDAEX,kBAAeA,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACgB,aAAGE,IAAH,CAAQF,IAAR,CADhB;;AAAA;AACGvE,gBADH;;AAEDiF,sBAAUN,iBAAiBD,KAAKT,KAAL,CAAWjE,IAAX,CAAjB,CAAV;;AAFC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAFW;;AAAA;AAAA;AAAA;AAAA,QAKR,IAAIgF,GAAJ,EALN;;AAiJA,SAAS5H,uBAAT,CAAiCd,UAAjC,EAA6C;AAC3C,MAAI,CAACA,UAAL,EAAiB;AACf,WAAO,gBAAMA,UAAN,EAAP;AACD,GAFD,MAEO,IAAI,CAAC,0BAAEA,UAAF,EAAcsI,OAAd,EAAL,EAA8B;AACnC,WAAO,CAACtI,UAAD,CAAP;AACD,GAFM,MAEA;AACL,WAAOA,UAAP;AACD;AACF;;AAED,SAASa,iBAAT,CAA2Bb,UAA3B,EAAuCW,UAAvC,EAAmD;AACjDA,aAAWC,IAAX,GAAkBD,WAAWC,IAAX,CAAgB4H,MAAhB,CAAuB,UAACrE,GAAD,EAAS;AAChD,WAAOnE,WAAW4I,OAAX,CAAmBzE,IAAIlH,SAAvB,KAAqC,CAA5C;AACD,GAFiB,EAEfoE,MAFe,CAER,UAACC,GAAD,EAAM6C,GAAN,EAAc;AACtB7C,QAAI6C,IAAIlH,SAAR,IAAqBkH,GAArB;AACA,WAAO7C,GAAP;AACD,GALiB,EAKf,EALe,CAAlB;AAMA,SAAOX,UAAP;AACD;;AAoCD,SAASmB,qBAAT,CAA+BjC,IAA/B,EAAqC;AACnC,MAAIA,KAAK+B,SAAT,EAAoB;AAClB/B,SAAKgC,MAAL,GAAc,gBAAM7B,UAAN,GAAmBqB,MAAnB,CAA0B,UAACC,GAAD,EAAMrE,SAAN,EAAoB;AAC1DqE,UAAIrE,SAAJ,IAAiB,WAAjB;AACA,aAAOqE,GAAP;AACD,KAHa,EAGX,EAHW,CAAd;AAID,GALD,MAKO;AACLzB,SAAKgC,MAAL,GAAchC,KAAKgC,MAAL,CAAYR,MAAZ,CAAmB,UAACC,GAAD,EAAM+C,KAAN,EAAgB;AAC/C/C,UAAI+C,MAAMpH,SAAV,IAAuBoH,MAAMA,KAA7B;AACA,aAAO/C,GAAP;AACD,KAHa,EAGX,EAHW,CAAd;AAID;AACD,SAAOzB,IAAP;AACD;;AAgED,SAASwD,cAAT,CAAwBZ,GAAxB,EAA6B;AAC3B,MAAI,0BAAEA,GAAF,EAAO6F,OAAP,EAAJ,EAAsB;AACpB7F,UAAMA,IAAItB,GAAJ,CAAQ;AAAA,aAAM9D,MAAM4C,cAAN,CAAqBH,EAArB,CAAN;AAAA,KAAR,CAAN;AACA,QAAI2C,IAAIoG,IAAJ,CAAS;AAAA,aAAM,CAAC/I,EAAP;AAAA,KAAT,CAAJ,EAAyB;AACvB,YAAM,IAAI1C,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,oBAAhB,CAAV,CAAN;AACD;AACF;AACD,SAAOmF,GAAP;AACD;;AAED,SAASG,yBAAT,CAAmCf,MAAnC,EAA2CY,GAA3C,EAAgD;AAC9C,MAAIZ,OAAOqF,MAAP,IAAiB,CAArB,EAAwB;AACtB,UAAM,IAAI9J,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,6CAAhB,CAAV,CAAN;AACD;AACDuE,WAASA,OAAO2G,MAAP,CAAc;AAAA,WAAS,CAAC,CAAC,gBAAMrL,KAAN,CAAYkH,MAAMpH,SAAlB,CAAX;AAAA,GAAd,CAAT;AACA,MAAI6L,eAAe,0BAAEjH,MAAF,EAAUgH,IAAV,CAAe,UAACxE,KAAD,EAAW;AAC3C,WAAQhH,MAAMwH,2BAAN,CAAkCR,MAAMA,KAAxC,EAA+C,MAA/C,IAAyD,CAA1D,IACDhH,MAAMwH,2BAAN,CAAkCR,MAAMA,KAAxC,EAA+C,WAA/C,KAA+D,CADrE;AAED,GAHkB,CAAnB;AAIA,MAAIyE,YAAJ,EAAkB;AAChB,UAAM,IAAI1L,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,sBAAhB,CAAV,CAAN;AACD;AACD,SAAO+F,eAAeZ,GAAf,CAAP;AACD;;AAkFD,SAAS6B,WAAT,CAAqBJ,eAArB,EAAsCpE,EAAtC,EAA0C;AACxC,MAAIiJ,MAAMJ,QAAQhK,GAAR,CAAY,GAAZ,CAAV;AACA,MAAIoK,GAAJ,EAAS;AACP7E,sBAAkBA,mBAAmB,EAArC;AACD,GAFD,MAEO,IAAI,CAACA,eAAD,IAAoB,CAACA,gBAAgB8E,WAAzC,EAAsD;AAC3D;AACD;AACD,MAAIA,cAAc9E,gBAAgB8E,WAAlC;AACA,MAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnCA,kBAAc,EAAd;AACD;AACD,MAAInJ,OAAO8I,QAAQhK,GAAR,CAAYqK,YAAYP,WAAZ,EAAZ,CAAX;AACA,MAAI3I,OAAQ,QAAOD,IAAP,yCAAOA,IAAP,OAAgB,QAAhB,IAA4BA,KAAKoJ,GAAL,CAASnJ,EAAT,CAA7B,IAA+C,QAAOiJ,GAAP,yCAAOA,GAAP,OAAe,QAAf,IAA2BA,IAAIE,GAAJ,CAAQnJ,EAAR,CAAjF,CAAJ,EAAoG;AAClG;AACD;AACD,MAAI,OAAOD,IAAP,KAAgB,SAAhB,IAA6B,CAACA,IAAlC,EAAwC;AACtC;AACD;AACD,MAAI,CAACA,IAAD,IAAS,CAACkJ,GAAd,EAAmB;AACjB;AACD;AACD,QAAM,IAAI3L,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,sCAAhB,CAAV,CAAN;AACD;;AAuGD,SAASkJ,gBAAT,CAA0BX,OAA1B,EAAmCD,OAAnC,EAA4C;AAC1C,MAAIa,iBAAiB,EAArB;AACA,MAAIC,oBAAoB,EAAxB;AACA,kBAAM1G,UAAN,GAAmBkJ,OAAnB,CAA2B,UAACjM,SAAD,EAAe;AACxC,QAAIkH,MAAMyB,QAAQ3I,SAAR,CAAV;AACA,QAAIkH,GAAJ,EAAS;AACP,UAAIA,IAAI7E,UAAR,EAAoB;AAClBmH,uBAAevE,IAAf,CAAoB;AAClBjF,qBAAWA,SADO;AAElBqC,sBAAY6E,IAAI7E;AAFE,SAApB;AAID;AACF,KAPD,MAOO;AACL6E,YAAM0B,QAAQ5I,SAAR,CAAN;AACA,UAAIkH,OAAOA,IAAI7E,UAAf,EAA2B;AACzBoH,0BAAkBxE,IAAlB,CAAuB;AACrBjF,qBAAWA,SADU;AAErBqC,sBAAY6E,IAAI7E;AAFK,SAAvB;AAID;AACF;AACF,GAlBD;AAmBA,SAAO;AACLmH,oBAAgBA,cADX;AAELC,uBAAmBA;AAFd,GAAP;AAID","file":"users.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\n\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport FSWatcher from '../helpers/fs-watcher';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Permissions from '../helpers/permissions';\nimport * as Tools from '../helpers/tools';\nimport Channel from '../storage/channel';\nimport Hash from '../storage/hash';\nimport Key from '../storage/key';\nimport mongodbClient from '../storage/mongodb-client-factory';\nimport redisClient from '../storage/redis-client-factory';\n\nlet client = mongodbClient();\n\nlet BanExpiredChannel = new Channel(redisClient('BAN_EXPIRED'), `__keyevent@${config('system.redis.db')}__:expired`, {\n  parse: false,\n  stringify: false\n});\nlet UserBans = new Key(redisClient(), 'userBans');\nlet UserCaptchaQuotas = new Hash(redisClient(), 'captchaQuotas', {\n  parse: quota => +quota,\n  stringify: quota => quota.toString()\n});\nlet UserPostQuotas = new Key(redisClient(), 'postQuotas', {\n  parse: quota => +quota,\n  stringify: quota => quota.toString()\n});\n\nfunction transformIPBans(bans) {\n  return _(bans).reduce((acc, ban, ip) => {\n    ip = Tools.correctAddress(ip);\n    if (ip) {\n      acc[ip] = ban;\n    }\n    return acc;\n  }, {});\n}\n\nlet ipBans = FSWatcher.createWatchedResource(`${__dirname}/../../misc/user-bans.json`, (path) => {\n  return transformIPBans(require(path));\n}, async function(path) {\n  let data = await FS.read(path);\n  ipBans = transformIPBans(JSON.parse(data));\n}) || {};\n\nfunction transformGeoBans(bans) {\n  return _(bans).reduce((acc, value, key) => {\n    if (typeof value === 'string') {\n      value = [value];\n    }\n    if (_(value).isArray()) {\n      value = new Set(value.map(ip => Tools.correctAddress(ip)).filter(ip => !!ip));\n    } else {\n      value = !!value;\n    }\n    acc.set(key.toUpperCase(), value);\n    return acc;\n  }, new Map());\n}\n\nlet geoBans = FSWatcher.createWatchedResource(`${__dirname}/../../misc/geo-bans.json`, (path) => {\n  return transformGeoBans(require(path));\n}, async function(path) {\n  let data = await FS.read(path);\n  geoBans = transformGeoBans(JSON.parse(data));\n}) || new Map();\n\nexport async function getUserCaptchaQuota(boardName, userID) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let quota = await UserCaptchaQuotas.getOne(userID);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  if (quota <= 0) {\n    quota = await UserCaptchaQuotas.getOne(`${boardName}:${userID}`);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function setUserCaptchaQuota(boardName, userID, quota) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  return await UserCaptchaQuotas.setOne(`${boardName}:${userID}`, quota);\n}\n\nexport async function incrementUserCaptchaQuotaBy(userID, quota, boardName) {\n  let key = userID;\n  if (boardName) {\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    key = `${boardName}:${userID}`;\n  }\n  quota = Tools.option(quota, 'number', 1, { test: (q) => { return 0 !== q; } });\n  return await UserCaptchaQuotas.incrementBy(quota, key);\n}\n\nexport async function useCaptcha(boardName, userID) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (board.captchaQuota < 1) {\n    return 0;\n  }\n  let key = userID;\n  quota = await UserCaptchaQuotas.getOne(userID);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  if (quota <= 0) {\n    key = `${boardName}:${userID}`;\n  }\n  let quota = await UserCaptchaQuotas.incrementBy(key, -1);\n  if (+quota < 0) {\n    return await UserCaptchaQuotas.setOne(key, 0);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function getPostQuota(boardName, userID) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let exists1 = await UserPostQuotas.exists(userID),\n      exists2 = await UserPostQuotas.exists(`${boardName}:${userID}`);\n  if (!exists1 && !exists2)\n    return false;\n  let quota = await UserPostQuotas.get(exists1? userID : `${boardName}:${userID}`);\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function setPostQuota(boardName, userID, quota) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let expireAt = board.postTimeQuota;\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  return await UserPostQuotas.setex(quota, expireAt, `${boardName}:${userID}`);\n}\n\nexport async function incrementPostQuotaBy(userID, boardName, quota) {\n  let key = userID;\n  if (boardName) {\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    key = `${boardName}:${userID}`;\n  }\n  quota = Tools.option(quota, 'number', 1, { test: (q) => { return 0 !== q; } });\n  return await UserPostQuotas.incrementBy(quota, key);\n}\n\nexport async function usePostQuota(boardName, userID) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (board.postQuota < 1) {\n    return true;\n  }\n  let key = userID;\n  let quota = await UserPostQuotas.get(key);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  if (quota <= 0) {\n    key = `${boardName}:${userID}`;\n  }\n  quota = await UserPostQuotas.incrementBy(-1, key);\n  if (+quota < 0) {\n    return await UserPostQuotas.set(0, key);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function checkPostQuota(boardName, userID) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  if (board.postQuota > 0) {\n    let quota = await getPostQuota(boardName, userID);\n    if (quota === false) {\n      await setPostQuota(boardName, userID, board.postQuota);\n      quota = await getPostQuota(boardName, userID);\n    }\n    if(+quota <= 0)\n      return false;\n    await usePostQuota(boardName, userID);\n  }\n  return true;\n}\n\nexport async function getUserIP(boardName, postNumber) {\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, { 'user.ip': 1 });\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  return post.user.ip;\n}\n\nfunction getBannedUserBoardNames(boardNames) {\n  if (!boardNames) {\n    return Board.boardNames();\n  } else if (!_(boardNames).isArray()) {\n    return [boardNames];\n  } else {\n    return boardNames;\n  }\n}\n\nfunction processBannedUser(boardNames, bannedUser) {\n  bannedUser.bans = bannedUser.bans.filter((ban) => {\n    return boardNames.indexOf(ban.boardName) >= 0;\n  }).reduce((acc, ban) => {\n    acc[ban.boardName] = ban;\n    return acc;\n  }, {});\n  return bannedUser;\n}\n\nexport async function getBannedUser(ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  let BannedUser = await client.collection('bannedUser');\n  let binaryAddress = Tools.binaryAddress(ip);\n  let bannedUser = await BannedUser.findOne({\n    $or: [\n      { ip: ip },\n      {\n        subnet: {\n          start: { $lte: binaryAddress },\n          end: { $gte: binaryAddress }\n        }\n      }\n    ]\n  }, { _id: 0 });\n  if (!bannedUser) {\n    return {\n      ip: ip,\n      bans: {}\n    };\n  }\n  return processBannedUser(getBannedUserBoardNames(boardNames), bannedUser);\n}\n\nexport async function getBannedUsers(boardNames) {\n  let BannedUser = await client.collection('bannedUser');\n  let bannedUsers = await BannedUser.find({}, { _id: 0 }).toArray();\n  boardNames = getBannedUserBoardNames(boardNames);\n  return bannedUsers.map(processBannedUser.bind(null, boardNames)).reduce((acc, bannedUser) => {\n    acc[bannedUser.ip] = bannedUser;\n    return acc;\n  }, {});\n}\n\nfunction processRegisteredUser(user) {\n  if (user.superuser) {\n    user.levels = Board.boardNames().reduce((acc, boardName) => {\n      acc[boardName] = 'SUPERUSER';\n      return acc;\n    }, {});\n  } else {\n    user.levels = user.levels.reduce((acc, level) => {\n      acc[level.boardName] = level.level;\n      return acc;\n    }, {});\n  }\n  return user;\n}\n\nasync function getRegisteredUserInternal(query, { full } = {}) {\n  let User = await client.collection('user');\n  let projection = { _id: 0 };\n  if (!full) {\n    projection = {\n      superuser: 1,\n      levels: 1\n    };\n  }\n  let user = await User.findOne(query, projection);\n  if (!user) {\n    return null;\n  }\n  return processRegisteredUser(user);\n}\n\nexport async function getRegisteredUserLevels(hashpass) {\n  let user = await getRegisteredUserInternal({ hashpass: hashpass });\n  return user ? user.levels : {};\n}\n\nexport async function getRegisteredUserLevelsByIp(ip, subnet) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return {};\n  }\n  let query = {\n    $or: [{ 'ips.ip': ip }]\n  };\n  if (subnet) {\n    query.$or.push({\n      'ips.binary': {\n        $elemMatch: {\n          $gte: subnet.start,\n          $lte: subnet.end\n        }\n      }\n    });\n  }\n  let user = await getRegisteredUserInternal(query);\n  return user ? user.levels : {};\n}\n\nexport async function getRegisteredUser(hashpass) {\n  let user = await getRegisteredUserInternal({\n    hashpass: hashpass,\n    superuser: { $exists: false }\n  }, { full: true });\n  if (!user) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n  return user;\n}\n\nexport async function getRegisteredUsers() {\n  let User = await client.collection('user');\n  let users = await User.find({\n    superuser: { $exists: false }\n  }, { _id: 0 }).toArray();\n  return users.map(processRegisteredUser);\n}\n\nfunction processUserIPs(ips) {\n  if (_(ips).isArray()) {\n    ips = ips.map(ip => Tools.correctAddress(ip));\n    if (ips.some(ip => !ip)) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n  }\n  return ips;\n}\n\nfunction processRegisteredUserData(levels, ips) {\n  if (levels.length <= 0) {\n    throw new Error(Tools.translate('Access level is not specified for any board'));\n  }\n  levels = levels.filter(level => !!Board.board(level.boardName));\n  let invalidLevel = _(levels).some((level) => {\n    return (Tools.compareRegisteredUserLevels(level.level, 'USER') < 0)\n      || (Tools.compareRegisteredUserLevels(level.level, 'SUPERUSER') >= 0);\n  });\n  if (invalidLevel) {\n    throw new Error(Tools.translate('Invalid access level'));\n  }\n  return processUserIPs(ips);\n}\n\nexport async function registerUser(hashpass, levels, ips) {\n  let User = await client.collection('user');\n  let count = await User.count({ hashpass: hashpass });\n  if (count > 0) {\n    throw new Error(Tools.translate('A user with this hashpass is already registered'));\n  }\n  await User.insertOne({\n    hashpass: hashpass,\n    levels: levels,\n    ips: processRegisteredUserData(levels, ips)\n  });\n}\n\nexport async function updateRegisteredUser(hashpass, levels, ips) {\n  let User = await client.collection('user');\n  let { matchedCount } = await User.updateOne({\n    hashpass: hashpass\n  }, {\n    $set: {\n      levels: levels,\n      ips: processRegisteredUserData(levels, ips)\n    }\n  });\n  if (matchedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function unregisterUser(hashpass) {\n  let User = await client.collection('user');\n  let { deletedCount } = await User.deleteOne({ hashpass: hashpass });\n  if (deletedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function addSuperuser(hashpass, ips) {\n  if (!hashpass) {\n    throw new Error(Tools.translate('Invalid hashpass'));\n  }\n  let User = await client.collection('user');\n  let count = await User.count({ hashpass: hashpass });\n  if (count > 0) {\n    throw new Error(Tools.translate('A user with this hashpass is already registered'));\n  }\n  await User.insertOne({\n    hashpass: hashpass,\n    superuser: true,\n    ips: processUserIPs(ips)\n  });\n}\n\nexport async function removeSuperuser(hashpass) {\n  if (!hashpass) {\n    throw new Error(Tools.translate('Invalid hashpass'));\n  }\n  let User = await client.collection('user');\n  let { deletedCount } = await User.deleteOne({ hashpass: hashpass });\n  if (deletedCount <= 0) {\n    throw new Error(Tools.translate('No user with this hashpass'));\n  }\n}\n\nexport async function getSynchronizationData(key) {\n  let SynchronizationData = await client.collection('synchronizationData');\n  return await SynchronizationData.findOne({ key: key });\n}\n\nexport async function setSynchronizationData(key, data) {\n  let SynchronizationData = await client.collection('synchronizationData');\n  let expireAt = Tools.now();\n  expireAt.setSeconds(expireAt.getSeconds() + config('server.synchronizationData.ttl'));\n  await await SynchronizationData.updateOne({ key: key }, {\n    $set: {\n      data: data,\n      expiresAt: expireAt\n    }\n  }, { upsert: true });\n}\n\nfunction checkGeoBan(geolocationInfo, ip) {\n  let def = geoBans.get('*');\n  if (def) {\n    geolocationInfo = geolocationInfo || {};\n  } else if (!geolocationInfo || !geolocationInfo.countryCode) {\n    return;\n  }\n  let countryCode = geolocationInfo.countryCode;\n  if (typeof countryCode !== 'string') {\n    countryCode = '';\n  }\n  let user = geoBans.get(countryCode.toUpperCase());\n  if (ip && ((typeof user === 'object' && user.has(ip)) || (typeof def === 'object' && def.has(ip)))) {\n    return;\n  }\n  if (typeof user === 'boolean' && !user) {\n    return;\n  }\n  if (!user && !def) {\n    return;\n  }\n  throw new Error(Tools.translate('Posting is disabled for this country'));\n}\n\nexport async function checkUserBan(ip, boardNames, { write, geolocationInfo } = {}) {\n  ip = Tools.correctAddress(ip);\n  let ban = ipBans[ip];\n  if (ban && (write || 'NO_ACCESS' === ban.level)) {\n    throw { ban: ban };\n  }\n  if (boardNames) {\n    let bannedUser = await getBannedUser(ip, boardNames);\n    ban = _(bannedUser.bans).find((ban) => { return ban && (write || 'NO_ACCESS' === ban.level); });\n    if (ban) {\n      throw { ban: ban };\n    }\n  }\n  if (geolocationInfo) {\n    return checkGeoBan(geolocationInfo, ip);\n  }\n}\n\nexport async function checkUserPermissions(req, boardName, postNumber, permission, password) {\n  let board = Board.board(boardName);\n  if (!board) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let Post = await client.collection('post');\n  let post = await Post.findOne({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    threadNumber: 1,\n    user: 1\n  });\n  if (!post) {\n    throw new Error(Tools.translate('Not such post: $[1]', '', `/${boardName}/${postNumber}`));\n  }\n  let { user, threadNumber } = post;\n  if (req.isSuperuser()) {\n    return;\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), Permissions[permission]()) >= 0) {\n    if (Tools.compareRegisteredUserLevels(req.level(boardName), 'USER') > 0\n      && Tools.compareRegisteredUserLevels(req.level(boardName), user.level) > 0) {\n      return;\n    }\n    if (req.hashpass && req.hashpass === user.hashpass) {\n      return;\n    }\n    if (password && password === user.password) {\n      return;\n    }\n  }\n  if (!board.opModeration) {\n    throw new Error(Tools.translate('Not enough rights'));\n  }\n  let Thread = await client.collection('thread');\n  let thread = await Thread.findOne({\n    boardName: boardName,\n    number: threadNumber\n  });\n  if (!thread) {\n    throw new Error(Tools.translate('Not such thread: $[1]', '', `/${boardName}/${threadNumber}`));\n  }\n  if (thread.user.ip !== req.ip && (!req.hashpass || req.hashpass !== thread.user.hashpass)) {\n    throw new Error(Tools.translate('Not enough rights'));\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), user.level) >= 0) {\n    return;\n  }\n  if (req.hashpass && req.hashpass === user.hashpass) {\n    return;\n  }\n  if (password && password === user.password) {\n    return;\n  }\n  throw new Error(Tools.translate('Not enough rights'));\n}\n\nexport async function updatePostBanInfo(boardName, postNumber, bannedFor) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return;\n  }\n  let Post = await client.collection('post');\n  let result = await Post.findOneAndUpdate({\n    boardName: boardName,\n    number: postNumber\n  }, {\n    $set: { 'options.bannedFor': !!bannedFor }\n  }, {\n    projection: { threadNumber: 1 },\n    returnOriginal: false\n  });\n  let post = result.value;\n  if (!post) {\n    return;\n  }\n  await IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n}\n\nfunction getPostsToUpdate(oldBans, newBans) {\n  let postsBannedFor = [];\n  let postsNotBannedFor = [];\n  Board.boardNames().forEach((boardName) => {\n    let ban = newBans[boardName];\n    if (ban) {\n      if (ban.postNumber) {\n        postsBannedFor.push({\n          boardName: boardName,\n          postNumber: ban.postNumber\n        });\n      }\n    } else {\n      ban = oldBans[boardName];\n      if (ban && ban.postNumber) {\n        postsNotBannedFor.push({\n          boardName: boardName,\n          postNumber: ban.postNumber\n        });\n      }\n    }\n  });\n  return {\n    postsBannedFor: postsBannedFor,\n    postsNotBannedFor: postsNotBannedFor\n  };\n}\n\nexport async function banUser(ip, newBans, subnet) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    throw new Error(Tools.translate('Invalid IP address'));\n  }\n  let bannedUser = await getBannedUser(ip);\n  let oldBans = bannedUser.bans;\n  await Tools.series(oldBans, async function(_1, boardName) {\n    await UserBans.delete(`${ip}:${boardName}`);\n  });\n  let BannedUser = await client.collection('bannedUser');\n  if (_(newBans).isEmpty()) {\n    await BannedUser.deleteOne({ ip: ip });\n  } else {\n    await BannedUser.updateOne({ ip: ip }, {\n      $set: {\n        subnet: subnet,\n        bans: _(newBans).toArray()\n      }\n    }, { upsert: true });\n    await Tools.series(_(newBans).pick((ban) => {\n      return ban.expiresAt;\n    }), async function(ban) {\n      let delay = Math.ceil((+ban.expiresAt - +Tools.now()) / Tools.SECOND);\n      await UserBans.setex(ban, delay, `${ip}:${ban.boardName}`);\n    });\n  }\n  let { postsBannedFor, postsNotBannedFor } = getPostsToUpdate(oldBans, newBans);\n  await Tools.series(postsBannedFor, ({ postNumber, boardName }) => {\n    return updatePostBanInfo(boardName, postNumber, true);\n  });\n  await Tools.series(postsNotBannedFor, ({ postNumber, boardName }) => {\n    return updatePostBanInfo(boardName, postNumber, false);\n  });\n}\n\nasync function updateBanOnMessage(message) {\n  try {\n    if (message.split(':')[0] !== 'userBans') {\n      return false;\n    }\n    let ip = Tools.correctAddress(message.split(':').slice(1, -1).join(':'));\n    if (!ip) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n    let boardName = message.split(':').pop();\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    let BannedUser = await client.collection('bannedUser');\n    let { value: bannedUser } = await BannedUser.findOneAndUpdate({ ip: ip }, {\n      $pull: {\n        bans: { boardName: boardName }\n      }\n    }, {\n      projection: {\n        bans: {\n          $elemMatch: { boardName: boardName }\n        }\n      },\n      returnOriginal: true\n    });\n    if (!bannedUser || (bannedUser.bans.length !== 1)) {\n      throw new Error(Tools.translate('Internal error: no user ban found'));\n    }\n    await BannedUser.deleteOne({\n      ip: ip,\n      bans: { $size: 0 }\n    });\n    let postNumber = Tools.option(bannedUser.bans[0].postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (postNumber) {\n      await updatePostBanInfo(boardName, postNumber, false);\n    }\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function initializeUserBansMonitoring() {\n  //NOTE: Enabling \"key expired\" notifications\n  await redisClient().config('SET', 'notify-keyspace-events', 'Ex');\n  await BanExpiredChannel.subscribe(updateBanOnMessage);\n}\n"]}