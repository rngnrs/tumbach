{"version":3,"sources":["models/users.js"],"names":["boardName","userID","board","Promise","reject","Error","Tools","translate","UserCaptchaQuotas","getOne","quota","option","test","q","getUserCaptchaQuota","setOne","setUserCaptchaQuota","captchaQuota","key","incrementBy","useCaptcha","postNumber","PostsModel","getPost","post","user","ip","getUserIP","boardNames","correctAddress","isArray","series","UserBans","get","bans","pick","ban","getBannedUserBans","BannedUserIPs","getAll","ips","getBannedUsers","hashpass","mayBeHashpass","SuperuserHashes","contains","exists","RegisteredUserLevels","level","getRegisteredUserLevel","RegisteredUserHashes","getRegisteredUserLevelByIp","reduce","acc","levels","getRegisteredUserLevels","getRegisteredUserLevelsByIp","isEmpty","RegisteredUserIPs","getRegisteredUser","find","keys","map","split","getRegisteredUsers","some","processUserIPs","Object","invalidLevel","compareRegisteredUserLevels","processRegisteredUserData","addOne","addUserIPs","length","deleteSome","delete","removeUserIPs","existingUserLevel","existingSuperuserHash","setSome","registerUser","updateRegisteredUser","count","unregisterUser","addSuperuser","password","deleteOne","removeSuperuser","SynchronizationData","getSynchronizationData","data","set","expire","setSynchronizationData","UserPostNumbers","getUserPostNumbers","addUserPostNumber","removeUserPostNumber","write","geolocationInfo","ipBans","checkGeoBan","checkUserBan","req","permission","threadNumber","isSuperuser","Permissions","opModeration","ThreadsModel","getThread","thread","checkUserPermissions","testPostNumber","IPC","render","updatePostBanInfo","newBans","oldBans","expiresAt","Math","ceil","now","UserBanPostNumbers","banUser","message","slice","join","pop","Logger","error","stack","updateBanOnMessage","config","BanExpiredChannel","subscribe","initializeUserBansMonitoring","parse","stringify","number","toString","transformIPBans","createWatchedResource","__dirname","path","require","read","JSON","transformGeoBans","value","Set","filter","toUpperCase","Map","geoBans","def","countryCode","has"],"mappings":"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","file":"models/users.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\n\nimport * as PostsModel from './posts';\nimport * as ThreadsModel from './threads';\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport FSWatcher from '../helpers/fs-watcher';\nimport * as IPC from '../helpers/ipc';\nimport * as Permissions from '../helpers/permissions';\nimport * as Tools from '../helpers/tools';\nimport Channel from '../storage/channel';\nimport Hash from '../storage/hash';\nimport Key from '../storage/key';\nimport redisClient from '../storage/redis-client-factory';\nimport UnorderedSet from '../storage/unordered-set';\n\nlet BanExpiredChannel = new Channel(redisClient('BAN_EXPIRED'), `__keyevent@${config('system.redis.db')}__:expired`, {\n  parse: false,\n  stringify: false\n});\nlet BannedUserIPs = new UnorderedSet(redisClient(), 'bannedUserIps', {\n  parse: false,\n  stringify: false\n});\nlet RegisteredUserHashes = new Hash(redisClient(), 'registeredUserHashes', {\n  parse: false,\n  stringify: false\n});\nlet RegisteredUserIPs = new UnorderedSet(redisClient(), 'registeredUserIps', {\n  parse: false,\n  stringify: false\n});\nlet RegisteredUserLevels = new Hash(redisClient(), 'registeredUserLevels', {\n  parse: false,\n  stringify: false\n});\nlet SuperuserHashes = new UnorderedSet(redisClient(), 'superuserHashes', {\n  parse: false,\n  stringify: false\n});\nlet SynchronizationData = new Key(redisClient(), 'synchronizationData');\nlet UserBanPostNumbers = new Hash(redisClient(), 'userBanPostNumbers', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\nlet UserBans = new Key(redisClient(), 'userBans');\nlet UserCaptchaQuotas = new Hash(redisClient(), 'captchaQuotas', {\n  parse: quota => +quota,\n  stringify: quota => quota.toString()\n});\nlet UserPostNumbers = new UnorderedSet(redisClient(), 'userPostNumbers', {\n  parse: number => +number,\n  stringify: number => number.toString()\n});\n\nfunction transformIPBans(bans) {\n  return _(bans).reduce((acc, ban, ip) => {\n    ip = Tools.correctAddress(ip);\n    if (ip) {\n      acc[ip] = ban;\n    }\n    return acc;\n  }, {});\n}\n\nlet ipBans = FSWatcher.createWatchedResource(`${__dirname}/../../misc/user-bans.json`, (path) => {\n  return transformIPBans(require(path));\n}, async function(path) {\n  let data = await FS.read(path);\n  ipBans = transformIPBans(JSON.parse(data));\n}) || {};\n\nfunction transformGeoBans(bans) {\n  return _(bans).reduce((acc, value, key) => {\n    if (typeof value === 'string') {\n      value = [value];\n    }\n    if (_(value).isArray()) {\n      value = new Set(value.map(ip => Tools.correctAddress(ip)).filter(ip => !!ip));\n    } else {\n      value = !!value;\n    }\n    acc.set(key.toUpperCase(), value);\n    return acc;\n  }, new Map());\n}\n\nlet geoBans = FSWatcher.createWatchedResource(`${__dirname}/../../misc/geo-bans.json`, (path) => {\n  return transformGeoBans(require(path));\n}, async function(path) {\n  let data = await FS.read(path);\n  geoBans = transformGeoBans(JSON.parse(data));\n}) || new Map();\n\nexport async function getUserCaptchaQuota(boardName, userID) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let quota = await UserCaptchaQuotas.getOne(userID);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  if (quota <= 0) {\n    quota = await UserCaptchaQuotas.getOne(`${boardName}:${userID}`);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function setUserCaptchaQuota(boardName, userID, quota) {\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n  return await UserCaptchaQuotas.setOne(`${boardName}:${userID}`, quota);\n}\n\nexport async function useCaptcha(boardName, userID) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (board.captchaQuota < 1) {\n    return 0;\n  }\n  let key = userID;\n  quota = await UserCaptchaQuotas.getOne(userID);\n  quota = Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } })\n  if (quota <= 0) {\n    key = `${boardName}:${userID}`;\n  }\n  let quota = await UserCaptchaQuotas.incrementBy(key, -1);\n  if (+quota < 0) {\n    return await UserCaptchaQuotas.setOne(key, 0);\n  }\n  return Tools.option(quota, 'number', 0, { test: (q) => { return q >= 0; } });\n}\n\nexport async function getUserIP(boardName, postNumber) {\n  let post = await PostsModel.getPost(boardName, postNumber);\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('No such post')));\n  }\n  return post.user.ip;\n}\n\nexport async function getBannedUserBans(ip, boardNames) {\n  ip = Tools.correctAddress(ip);\n  if (!boardNames) {\n    boardNames = Board.boardNames();\n  } else if (!_(boardNames).isArray()) {\n    boardNames = [boardNames];\n  }\n  let bans = await Tools.series(boardNames, async function(boardName) {\n    return await UserBans.get(`${ip}:${boardName}`);\n  }, {});\n  return _(bans).pick(ban => !!ban);\n}\n\nexport async function getBannedUsers(boardNames) {\n  let ips = await BannedUserIPs.getAll();\n  return await Tools.series(ips, async function(ip) {\n    return await getBannedUserBans(ip, boardNames);\n  }, {});\n}\n\nexport async function getRegisteredUserLevel(hashpass, boardName) {\n  if (!hashpass || !Tools.mayBeHashpass(hashpass)) {\n    return Promise.reject(new Error(Tools.translate('Invalid hashpass')));\n  }\n  if (!Board.board(boardName)) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let exists = await SuperuserHashes.contains(hashpass);\n  if (exists) {\n    return 'SUPERUSER';\n  }\n  let level = await RegisteredUserLevels.getOne(boardName, hashpass);\n  return level || null;\n}\n\nexport async function getRegisteredUserLevelByIp(ip, boardName) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return Promise.reject(new Error(Tools.translate('Invalid IP address')));\n  }\n  let hashpass = await RegisteredUserHashes.getOne(ip);\n  if (!hashpass) {\n    return null;\n  }\n  return await getRegisteredUserLevel(hashpass, boardName);\n}\n\nexport async function getRegisteredUserLevels(hashpass) {\n  if (!hashpass || !Tools.mayBeHashpass(hashpass)) {\n    return {};\n  }\n  let exists = await SuperuserHashes.contains(hashpass);\n  if (exists) {\n    return Board.boardNames().reduce((acc, boardName) => {\n      acc[boardName] = 'SUPERUSER';\n      return acc;\n    }, {});\n  }\n  let levels = await RegisteredUserLevels.getAll(hashpass);\n  return levels || {};\n}\n\nexport async function getRegisteredUserLevelsByIp(ip) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return {};\n  }\n  let hashpass = await RegisteredUserHashes.getOne(ip);\n  if (!hashpass) {\n    return {};\n  }\n  return await getRegisteredUserLevels(hashpass);\n}\n\nexport async function getRegisteredUser(hashpass) {\n  let user = { hashpass: hashpass };\n  let levels = await RegisteredUserLevels.getAll(hashpass);\n  if (_(levels).isEmpty()) {\n    return Promise.reject(new Error(Tools.translate('No user with this hashpass')));\n  }\n  user.levels = levels;\n  let ips = await RegisteredUserIPs.getAll(hashpass);\n  user.ips = ips || [];\n  return user;\n}\n\nexport async function getRegisteredUsers() {\n  let keys = await RegisteredUserLevels.find();\n  return await Tools.series(keys.map((key) => {\n    return key.split(':')[1];\n  }), async function(hashpass) {\n    return await getRegisteredUser(hashpass);\n  }, true);\n}\n\nasync function processUserIPs(ips) {\n  if (_(ips).isArray()) {\n    ips = ips.map(ip => Tools.correctAddress(ip));\n    if (ips.some(ip => !ip)) {\n      return Promise.reject(new Error(Tools.translate('Invalid IP address')));\n    }\n  }\n  return ips;\n}\n\nasync function processRegisteredUserData(levels, ips) {\n  if (_(levels).isEmpty()) {\n    return Promise.reject(new Error(Tools.translate('Access level is not specified for any board')));\n  }\n  if (Object.keys(levels).some(boardName => !Board.board(boardName))) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let invalidLevel = _(levels).some((level) => {\n    return (Tools.compareRegisteredUserLevels(level, 'USER') < 0)\n      || (Tools.compareRegisteredUserLevels(level, 'SUPERUSER') >= 0);\n  });\n  if (invalidLevel) {\n    return Promise.reject(new Error(Tools.translate('Invalid access level')));\n  }\n  return await processUserIPs(ips);\n}\n\nasync function addUserIPs(hashpass, ips) {\n  //TODO: May be optimised (hmset)\n  await Tools.series(ips, async function(ip) {\n    await RegisteredUserHashes.setOne(ip, hashpass);\n    await RegisteredUserIPs.addOne(ip, hashpass);\n  });\n}\n\nasync function removeUserIPs(hashpass) {\n  let ips = await RegisteredUserIPs.getAll(hashpass);\n  if (ips && ips.length > 0) {\n    await RegisteredUserHashes.deleteSome(ips);\n  }\n  await RegisteredUserIPs.delete(hashpass);\n}\n\nexport async function registerUser(hashpass, levels, ips) {\n  ips = await processRegisteredUserData(levels, ips);\n  let existingUserLevel = await RegisteredUserLevels.exists(hashpass);\n  if (existingUserLevel) {\n    return Promise.reject(new Error(Tools.translate('A user with this hashpass is already registered')));\n  }\n  let existingSuperuserHash = await SuperuserHashes.contains(hashpass);\n  if (existingSuperuserHash) {\n    return Promise.reject(new Error(Tools.translate('A user with this hashpass is already registered as superuser')));\n  }\n  await RegisteredUserLevels.setSome(levels, hashpass);\n  if (_(ips).isArray()) {\n    await addUserIPs(hashpass, ips);\n  }\n}\n\nexport async function updateRegisteredUser(hashpass, levels, ips) {\n  ips = await processRegisteredUserData(levels, ips);\n  let existingUserLevel = await RegisteredUserLevels.exists(hashpass);\n  if (!existingUserLevel) {\n    return Promise.reject(new Error(Tools.translate('No user with this hashpass')));\n  }\n  await RegisteredUserLevels.setSome(levels, hashpass);\n  await removeUserIPs(hashpass);\n  if (_(ips).isArray()) {\n    await addUserIPs(hashpass, ips);\n  }\n}\n\nexport async function unregisterUser(hashpass) {\n  let count = await RegisteredUserLevels.delete(hashpass);\n  if (count <= 0) {\n    return Promise.reject(new Error(Tools.translate('No user with this hashpass')));\n  }\n  await removeUserIPs(hashpass);\n}\n\nexport async function addSuperuser(hashpass, ips) {\n  if (!hashpass) {\n    return Promise.reject(new Error(Tools.translate('Invalid hashpass')));\n  }\n  ips = await processUserIPs(ips);\n  let existingUserLevel = await RegisteredUserLevels.exists(hashpass);\n  if (existingUserLevel) {\n    return Promise.reject(new Error(Tools.translate('A user with this hashpass is already registered')));\n  }\n  let count = await SuperuserHashes.addOne(hashpass);\n  if (count <= 0) {\n    return Promise.reject(new Error(Tools.translate('A user with this hashpass is already registered')));\n  }\n  if (_(ips).isArray()) {\n    await addUserIPs(hashpass, ips);\n  }\n}\n\nexport async function removeSuperuser(password) {\n  if (!password)\n    return Promise.reject(new Error(Tools.translate('Invalid hashpass')));\n  let count = await SuperuserHashes.deleteOne(password);\n  if (count <= 0)\n    return Promise.reject(new Error(Tools.translate('No user with this hashpass')));\n  await removeUserIPs();\n}\n\nexport async function getSynchronizationData(key) {\n  return await SynchronizationData.get(key);\n}\n\nexport async function setSynchronizationData(key, data) {\n  await SynchronizationData.set(data, key);\n  await SynchronizationData.expire(config('server.synchronizationData.ttl'), key);\n}\n\nexport async function getUserPostNumbers(ip, boardName) {\n  ip = Tools.correctAddress(ip) || '*';\n  boardName = boardName || '*';\n  return await UserPostNumbers.find(`${ip}:${boardName}`);\n}\n\nexport async function addUserPostNumber(ip, boardName, postNumber) {\n  ip = Tools.correctAddress(ip);\n  await UserPostNumbers.addOne(postNumber, `${ip}:${boardName}`);\n}\n\nexport async function removeUserPostNumber(ip, boardName, postNumber) {\n  ip = Tools.correctAddress(ip);\n  await UserPostNumbers.deleteOne(postNumber, `${ip}:${boardName}`);\n}\n\nfunction checkGeoBan(geolocationInfo, ip) {\n  let def = geoBans.get('*');\n  if (def) {\n    geolocationInfo = geolocationInfo || {};\n  } else if (!geolocationInfo || !geolocationInfo.countryCode) {\n    return;\n  }\n  let countryCode = geolocationInfo.countryCode;\n  if (typeof countryCode !== 'string') {\n    countryCode = '';\n  }\n  let user = geoBans.get(countryCode.toUpperCase());\n  if (ip && ((typeof user === 'object' && user.has(ip)) || (typeof def === 'object' && def.has(ip)))) {\n    return;\n  }\n  if (typeof user === 'boolean' && !user) {\n    return;\n  }\n  if (!user && !def) {\n    return;\n  }\n  return Promise.reject(new Error(Tools.translate('Posting is disabled for this country')));\n}\n\nexport async function checkUserBan(ip, boardNames, { write, geolocationInfo } = {}) {\n  ip = Tools.correctAddress(ip);\n  let ban = ipBans[ip];\n  if (ban && (write || 'NO_ACCESS' === ban.level)) {\n    return Promise.reject({ ban: ban });\n  }\n  if (boardNames) {\n    let bans = await getBannedUserBans(ip, boardNames);\n    ban = _(bans).find((ban) => { return ban && (write || 'NO_ACCESS' === ban.level); });\n    if (ban) {\n      return Promise.reject({ ban: ban });\n    }\n  }\n  if (geolocationInfo) {\n    return checkGeoBan(geolocationInfo, ip);\n  }\n}\n\nexport async function checkUserPermissions(req, boardName, postNumber, permission, password) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let post = await PostsModel.getPost(boardName, postNumber);\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('Not such post: $[1]', '', `/${boardName}/${postNumber}`)));\n  }\n  let { user, threadNumber } = post;\n  if (req.isSuperuser()) {\n    return;\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), Permissions[permission]()) >= 0) {\n    if (Tools.compareRegisteredUserLevels(req.level(boardName), 'USER') > 0\n      && Tools.compareRegisteredUserLevels(req.level(boardName), user.level) > 0) {\n      return;\n    }\n    if (req.hashpass && req.hashpass === user.hashpass) {\n      return;\n    }\n    if (password && password === user.password) {\n      return;\n    }\n  }\n  if (!board.opModeration) {\n    return Promise.reject(new Error(Tools.translate('Not enough rights')));\n  }\n  let thread = await ThreadsModel.getThread(boardName, threadNumber);\n  if (!thread) {\n    return Promise.reject(new Error(Tools.translate('Not such thread: $[1]', '', `/${boardName}/${threadNumber}`)));\n  }\n  if (thread.user.ip !== req.ip && (!req.hashpass || req.hashpass !== thread.user.hashpass)) {\n    return Promise.reject(new Error(Tools.translate('Not enough rights')));\n  }\n  if (Tools.compareRegisteredUserLevels(req.level(boardName), user.level) >= 0) {\n    return;\n  }\n  if (req.hashpass && req.hashpass === user.hashpass) {\n    return;\n  }\n  if (password && password === user.password) {\n    return;\n  }\n  return Promise.reject(new Error(Tools.translate('Not enough rights')));\n}\n\nexport async function updatePostBanInfo(boardName, postNumber) {\n  if (!Board.board(boardName)) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return;\n  }\n  let post = await PostsModel.getPost(boardName, postNumber);\n  if (!post) {\n    return;\n  }\n  await IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n}\n\nexport async function banUser(ip, newBans) {\n  ip = Tools.correctAddress(ip);\n  if (!ip) {\n    return Promise.reject(new Error(Tools.translate('Invalid IP address')));\n  }\n  let oldBans = await getBannedUserBans(ip);\n  await Tools.series(Board.boardNames(), async function(boardName) {\n    let key = `${ip}:${boardName}`;\n    let ban = newBans[boardName];\n    if (ban) {\n      await UserBans.set(ban, key);\n      if (ban.expiresAt) {\n        await UserBans.expire(Math.ceil((+ban.expiresAt - +Tools.now()) / 1000), key);\n      }\n      if (ban.postNumber) {\n        await UserBanPostNumbers.setOne(key, ban.postNumber);\n        await updatePostBanInfo(boardName, ban.postNumber);\n      }\n    } else {\n      ban = oldBans[boardName];\n      if (!ban) {\n        return;\n      }\n      await UserBans.delete(key);\n      if (ban.postNumber) {\n        UserBanPostNumbers.deleteOne(ban.postNumber, key);\n        await updatePostBanInfo(boardName, ban.postNumber);\n      }\n    }\n  });\n  await BannedUserIPs[_(newBans).isEmpty() ? 'deleteOne' : 'addOne'](ip);\n}\n\nasync function updateBanOnMessage(message) {\n  try {\n    let ip = Tools.correctAddress(message.split(':').slice(1, -1).join(':'));\n    if (!ip) {\n      throw new Error(Tools.translate('Invalid IP address'));\n    }\n    let boardName = message.split(':').pop();\n    if (!Board.board(boardName)) {\n      throw new Error(Tools.translate('Invalid board'));\n    }\n    let postNumber = await UserBanPostNumbers.getOne(message);\n    postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n    if (!postNumber) {\n      throw new Error(Tools.translate('Invalid post number'));\n    }\n    await UserBanPostNumbers.deleteOne(message);\n    let keys = await UserBans.find(`${ip}:*`);\n    if (!keys || keys.length <= 0) {\n      await BannedUserIPs.deleteOne(ip);\n    }\n    await updatePostBanInfo(boardName, postNumber);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function initializeUserBansMonitoring() {\n  //NOTE: Enabling \"key expired\" notifications\n  await redisClient().config('SET', 'notify-keyspace-events', 'Ex');\n  await BanExpiredChannel.subscribe(updateBanOnMessage);\n}\n"],"sourceRoot":"/source/"}