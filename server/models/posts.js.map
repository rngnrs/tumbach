{"version":3,"sources":["models/posts.js"],"names":["board","post","withExtraData","withFileInfos","withReferences","UserBans","get","user","ip","boardName","ban","bannedFor","postNumber","number","loadExtraData","archived","extraData","FilesModel","getPostFileInfos","fileInfos","PostReferencesModel","addReferencesToPost","addDataToPost","options","Promise","reject","Error","Tools","translate","option","test","testPostNumber","key","Posts","getOne","ArchivedPosts","ThreadsModel","getThreadPostNumbers","threadNumber","threadPostNumbers","sequenceNumber","indexOf","getPost","postNumbers","isArray","map","some","getSome","posts","toArray","mayBeArchivedPostNumbers","index","filter","length","numbers","archivedPosts","forEach","uniqueThreadNumbers","uniq","series","threadsPostNumbers","reduce","acc","list","getPosts","nonArchived","archivedKeys","nonArchivedKeys","keys","concat","getPostKeys","req","fields","files","transaction","date","text","markupMode","name","subject","sage","signAsOp","tripcode","password","postingEnabled","now","rawText","markupModes","referencedPosts","sha1","hashpass","getThread","thread","closed","unbumpable","accessLevel","level","getThreadPostCount","postCount","postLimit","postExtraData","BoardsModel","nextPostNumber","plainText","Renderer","brToNewline","createdAt","toISOString","geolocation","geolocationInfo","markup","showTripcode","updatedAt","setPostNumber","setOne","storeExtraData","addReferencedPosts","UsersModel","addUserPostNumber","addFilesToPost","Search","indexPost","addThreadPostNumber","bumpLimit","setThreadUpdateTime","createPost","nogenerate","source","removeReferencedPosts","IPC","render","rerenderPost","removingThread","PostsPlannedForDeletion","addOne","removeThreadPostNumber","deleteOne","rerenderReferringPosts","error","stack","removeReferences","removeUserPostNumber","removePostFileInfos","removeExtraData","removePostIndex","removePost","hasOwnProperty","updatePostIndex","body","editPost","isThread","removeThread","suffix","remove","__dirname","renderArchive","deletePost","targets","action","boardNames","postKeys","split","set","Set","add","Map","Array","from","has","forEachPost","console","log","rerenderPosts","rebuildPostSearchIndex","rebuildSearchIndex","sourceBoardName","targetBoardName","initialPostNumber","targetBoard","postNumberMap","sourcePath","sourceThumbPath","targetPath","targetThumbPath","mkpath","toUpdate","toRerender","referringPosts","replacePostLinks","replacePostReferences","fileInfo","oldFileName","oldThumbName","thumb","send","baseName","replace","copy","storeReferencedPosts","storeReferringPosts","copyPosts","replaceRelatedPostLinks","postBoardName","rerenderMovedThreadRelatedPosts","sourceThreadNumber","targetThreadNumber","target","replaceRelatedPostReferences","removeReferringPosts","updateMovedThreadRelatedPosts","pushPostFileInfosToArchive","pushPostToArchive","parse","stringify"],"mappings":"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","file":"models/posts.js","sourcesContent":["import _ from 'underscore';\nimport FS from 'q-io/fs';\nimport promisify from 'promisify-node';\n\nimport * as BoardsModel from './boards';\nimport * as FilesModel from './files';\nimport * as PostReferencesModel from './post-references';\nimport * as ThreadsModel from './threads';\nimport * as UsersModel from './users';\nimport Board from '../boards/board';\nimport * as Renderer from '../core/renderer';\nimport * as Search from '../core/search';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport markup from '../markup';\nimport Hash from '../storage/hash';\nimport Key from '../storage/key';\nimport redisClient from '../storage/redis-client-factory';\nimport sqlClient from '../storage/sql-client-factory';\nimport UnorderedSet from '../storage/unordered-set';\n\nconst mkpath = promisify('mkpath');\n\nlet ArchivedPosts = new Hash(sqlClient(), 'archivedPosts');\nlet Posts = new Hash(redisClient(), 'posts');\nlet PostsPlannedForDeletion = new UnorderedSet(redisClient(), 'postsPlannedForDeletion', {\n  parse: false,\n  stringify: false\n});\nlet UserBans = new Key(redisClient(), 'userBans');\n\nasync function addDataToPost(board, post, { withExtraData, withFileInfos, withReferences } = {}) {\n  let ban = await UserBans.get(`${post.user.ip}:${post.boardName}`);\n  post.bannedFor = !!(ban && ban.postNumber === post.number);\n  if (withExtraData) {\n    let extraData = await board.loadExtraData(post.number, !!post.archived);\n    post.extraData = extraData;\n  }\n  if (withFileInfos) {\n    post.fileInfos = await FilesModel.getPostFileInfos(post.boardName, post.number, { archived: post.archived });\n  }\n  if (withReferences) {\n    await PostReferencesModel.addReferencesToPost(post)\n  }\n}\n\nexport async function getPost(boardName, postNumber, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid post number')));\n  }\n  let key = `${boardName}:${postNumber}`;\n  let post = await Posts.getOne(key);\n  if (!post) {\n    post = await ArchivedPosts.getOne(key);\n  }\n  if (!post) {\n    return post;\n  }\n  let threadPostNumbers = await ThreadsModel.getThreadPostNumbers(boardName, post.threadNumber);\n  post.sequenceNumber = threadPostNumbers.indexOf(post.number) + 1;\n  await addDataToPost(board, post, options);\n  return post;\n}\n\nexport async function getPosts(boardName, postNumbers, options) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!_(postNumbers).isArray()) {\n    postNumbers = [postNumbers];\n  }\n  postNumbers = postNumbers.map((postNumber) => {\n    return Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  });\n  if (postNumbers.some(postNumber => !postNumber)) {\n    return Promise.reject(new Error(Tools.translate('Invalid post number')));\n  }\n  let posts = await Posts.getSome(postNumbers.map(postNumber => `${boardName}:${postNumber}`));\n  posts = _(posts).toArray();\n  let mayBeArchivedPostNumbers = posts.map((post, index) => {\n    return {\n      post: post,\n      index: index\n    };\n  }).filter((post) => !post.post).map((post) => {\n    return {\n      index: post.index,\n      postNumber: postNumbers[post.index]\n    };\n  });\n  if (mayBeArchivedPostNumbers.length > 0) {\n    let numbers = mayBeArchivedPostNumbers.map(post => post.postNumber);\n    let archivedPosts = await ArchivedPosts.getSome(numbers.map(postNumber => `${boardName}:${postNumber}`));\n    archivedPosts.forEach((post, index) => {\n      posts[mayBeArchivedPostNumbers[index].index] = post;\n    });\n  }\n  if (posts.length <= 0) {\n    return [];\n  }\n  let uniqueThreadNumbers = _(posts.map(post => post.threadNumber)).uniq();\n  let threadsPostNumbers = await Tools.series(uniqueThreadNumbers, async function(threadNumber) {\n    return await ThreadsModel.getThreadPostNumbers(boardName, threadNumber);\n  }, true);\n  threadsPostNumbers = threadsPostNumbers.reduce((acc, list, index) => {\n    acc[uniqueThreadNumbers[index]] = list;\n    return acc;\n  }, {});\n  await Tools.series(posts, async function(post, index) {\n    if (!post) {\n      return;\n    }\n    post.sequenceNumber = threadsPostNumbers[post.threadNumber].indexOf(post.number) + 1;\n    await addDataToPost(board, post, options);\n  });\n  return posts;\n}\n\nexport async function getPostKeys({ archived, nonArchived } = {}) {\n  let archivedKeys = [];\n  let nonArchivedKeys = [];\n  if (archived) {\n    archivedKeys = await ArchivedPosts.keys();\n  }\n  if (nonArchived || (!archived && !nonArchived)) {\n    nonArchivedKeys = await Posts.keys();\n  }\n  return nonArchivedKeys.concat(archivedKeys);\n}\n\nexport async function createPost(req, fields, files, transaction, { postNumber, date } = {}) {\n  let { boardName, threadNumber, text, markupMode, name, subject, sage, signAsOp, tripcode, password } = fields;\n  threadNumber = Tools.option(threadNumber, 'number', 0, { test: Tools.testPostNumber });\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  if (!board.postingEnabled) {\n    return Promise.reject(new Error(Tools.translate('Posting is disabled at this board')));\n  }\n  date = date || Tools.now();\n  if (postNumber) {\n    threadNumber = postNumber;\n  }\n  let rawText = text || null;\n  let markupModes = markup.markupModes(markupMode);\n  let referencedPosts = {};\n  sage = ('true' === sage);\n  tripcode = ('true' === tripcode);\n  signAsOp = ('true' === signAsOp);\n  password = Tools.sha1(password);\n  let hashpass = (req.hashpass || null);\n  let thread = await ThreadsModel.getThread(boardName, threadNumber);\n  if (!thread) {\n    return Promise.reject(new Error(Tools.translate('No such thread')));\n  }\n  if (thread.closed) {\n    return Promise.reject(new Error(Tools.translate('Posting is disabled in this thread')));\n  }\n  let unbumpable = !!thread.unbumpable;\n  let accessLevel = req.level(boardName) || null;\n  let postCount = await ThreadsModel.getThreadPostCount(boardName, threadNumber);\n  if (postCount >= board.postLimit) {\n    return Promise.reject(new Error(Tools.translate('Post limit reached')));\n  }\n  text = await markup(boardName, rawText, {\n    markupModes: markupModes,\n    referencedPosts: referencedPosts,\n    accessLevel: accessLevel\n  });\n  let extraData = await board.postExtraData(req, fields, files);\n  if (typeof extraData === 'undefined') {\n    extraData = null;\n  }\n  if (!postNumber) {\n    postNumber = await BoardsModel.nextPostNumber(boardName);\n  }\n  let plainText = text ? Renderer.plainText(text, { brToNewline: true }) : null;\n  let post = {\n    bannedFor: false,\n    boardName: boardName,\n    createdAt: date.toISOString(),\n    geolocation: req.geolocationInfo,\n    markup: markupModes,\n    name: name || null,\n    number: postNumber,\n    options: {\n      sage: sage,\n      showTripcode: !!req.hashpass && tripcode,\n      signAsOp: signAsOp\n    },\n    rawText: rawText,\n    subject: subject || null,\n    text: text || null,\n    plainText: plainText,\n    threadNumber: threadNumber,\n    updatedAt: null,\n    user: {\n      hashpass: hashpass,\n      ip: req.ip,\n      level: accessLevel,\n      password: password\n    }\n  };\n  transaction.setPostNumber(postNumber);\n  await Posts.setOne(`${boardName}:${postNumber}`, post);\n  await board.storeExtraData(postNumber, extraData, false);\n  await PostReferencesModel.addReferencedPosts(post, referencedPosts);\n  await UsersModel.addUserPostNumber(req.ip, boardName, postNumber);\n  await FilesModel.addFilesToPost(boardName, postNumber, files);\n  await Search.indexPost({\n    boardName: boardName,\n    postNumber: postNumber,\n    threadNumber: threadNumber,\n    plainText: plainText,\n    subject: subject\n  });\n  await ThreadsModel.addThreadPostNumber(boardName, threadNumber, postNumber);\n  if (!sage && postCount < board.bumpLimit && !unbumpable) {\n    await ThreadsModel.setThreadUpdateTime(boardName, threadNumber, date.toISOString());\n  }\n  post.referencedPosts = referencedPosts;\n  post.fileInfos = files;\n  return post;\n}\n\nexport async function rerenderPost(boardName, postNumber, { nogenerate } = {}) {\n  let post = await getPost(boardName, postNumber);\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('No such post')));\n  }\n  let referencedPosts = {};\n  let text = await markup(boardName, post.rawText, {\n    markupModes: post.markup,\n    referencedPosts: referencedPosts,\n    accessLevel: post.user.level\n  });\n  post.text = text;\n  let source = post.archived ? ArchivedPosts : Posts;\n  await source.setOne(`${boardName}:${postNumber}`, post);\n  await PostReferencesModel.removeReferencedPosts(post, { nogenerate: nogenerate });\n  await PostReferencesModel.addReferencedPosts(post, referencedPosts, {\n    nogenerate: nogenerate,\n    archived: post.archived\n  });\n  if (!nogenerate) {\n    IPC.render(boardName, post.threadNumber, postNumber, 'edit');\n  }\n}\n\nexport async function removePost(boardName, postNumber, { removingThread } = {}) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let key = `${boardName}:${postNumber}`\n  await PostsPlannedForDeletion.addOne(key);\n  let post = await getPost(boardName, postNumber, { withReferences: true });\n  await ThreadsModel.removeThreadPostNumber(boardName, post.threadNumber, postNumber, { archived: post.archived });\n  let source = post.archived ? ArchivedPosts : Posts;\n  await source.deleteOne(key);\n  try {\n    await PostReferencesModel.rerenderReferringPosts(post, { removingThread: removingThread });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  try {\n    await PostReferencesModel.removeReferences(post);\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  await UsersModel.removeUserPostNumber(post.user.ip, boardName, postNumber);\n  await FilesModel.removePostFileInfos(boardName, postNumber, { archived: post.archived });\n  await board.removeExtraData(postNumber, !!post.archived);\n  await Search.removePostIndex(boardName, postNumber);\n  await PostsPlannedForDeletion.deleteOne(key);\n}\n\nexport async function editPost(req, fields) {\n  let { boardName, postNumber, text, name, subject, sage, markupMode } = fields;\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid post number')));\n  }\n  let date = Tools.now();\n  let rawText = text || null;\n  let markupModes = markup.markupModes(markupMode);\n  let referencedPosts = {};\n  sage = ('true' === sage);\n  let post = await getPost(boardName, postNumber, { withExtraData: true });\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('Invalid post')));\n  }\n  let key = `${boardName}:${postNumber}`;\n  text = await markup(board.name, rawText, {\n    markupModes: markupModes,\n    referencedPosts: referencedPosts,\n    accessLevel: req.level(board.name)\n  });\n  let plainText = text ? Renderer.plainText(text, { brToNewline: true }) : null;\n  let extraData = await board.postExtraData(req, fields, null, post);\n  if (post.hasOwnProperty('extraData')) {\n    delete post.extraData;\n  }\n  if (post.hasOwnProperty('bannedFor')) {\n    delete post.bannedFor;\n  }\n  post.markup = markupModes;\n  post.name = name || null;\n  post.plainText = plainText;\n  post.rawText = rawText;\n  post.subject = subject || null;\n  post.text = text || null;\n  post.updatedAt = date.toISOString();\n  let source = post.archived ? ArchivedPosts : Posts;\n  await source.setOne(key, post);\n  await board.removeExtraData(postNumber, !!post.archived);\n  await board.storeExtraData(postNumber, extraData, !!post.archived);\n  await PostReferencesModel.removeReferencedPosts(post);\n  await PostReferencesModel.addReferencedPosts(post, referencedPosts, { archived: post.archived });\n  await Search.updatePostIndex(boardName, postNumber, (body) => {\n    body.plainText = plainText;\n    body.subject = subject;\n    return body;\n  });\n  return post;\n}\n\nexport async function deletePost(req, { boardName, postNumber, archived }) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    return Promise.reject(new Error(Tools.translate('Invalid post number')));\n  }\n  let post = await getPost(boardName, postNumber);\n  if (!post) {\n    return Promise.reject(new Error(Tools.translate('No such post')));\n  }\n  let isThread = post.threadNumber === post.number;\n  archived = ('true' === archived);\n  if (archived && !isThread) {\n    return Promise.reject(new Error(Tools.translate('Deleting posts from archived threads is not allowed')));\n  }\n  if (isThread) {\n    await ThreadsModel.removeThread(boardName, postNumber, { archived: archived });\n  } else {\n    await removePost(boardName, postNumber);\n  }\n  if (isThread && archived) {\n    await Tools.series(['json', 'html'], async function(suffix) {\n      return await FS.remove(`${__dirname}/../../public/${boardName}/arch/${postNumber}.${suffix}`);\n    });\n    await IPC.renderArchive(boardName);\n  } else if (!archived) {\n    await IPC.render(boardName, post.threadNumber, postNumber, isThread ? 'delete' : 'edit');\n  }\n}\n\nasync function forEachPost(targets, action) {\n  if (typeof targets !== 'object') {\n    return;\n  }\n  if (_(targets).toArray().length <= 0) {\n    targets = Board.boardNames();\n  }\n  if (_(targets).isArray()) {\n    targets = targets.reduce((acc, boardName) => {\n      acc[boardName] = '*';\n      return acc;\n    }, {});\n  }\n  let postKeys = await getPostKeys({\n    archived: true,\n    nonArchived: true\n  });\n  postKeys = postKeys.reduce((acc, key) => {\n    let [boardName, postNumber] = key.split(':');\n    let set = acc.get(boardName);\n    if (!set) {\n      set = new Set();\n      acc.set(boardName, set);\n    }\n    set.add(+postNumber);\n    return acc;\n  }, new Map());\n  await Tools.series(targets, async function(postNumbers, boardName) {\n    if (typeof postNumbers !== 'string' && !_(postNumbers).isArray()) {\n      return;\n    }\n    if (!Board.board(boardName)) {\n      Logger.error(new Error(Tools.translate('Invalid board name: $[1]', '', boardName)));\n      return;\n    }\n    let set = postKeys.get(boardName);\n    if ('*' === postNumbers) {\n      postNumbers = set ? Array.from(set) : [];\n    } else {\n      postNumbers = set ? postNumbers.filter(postNumber => set.has(postNumber)) : [];\n    }\n    return await Tools.series(postNumbers, async function(postNumber) {\n      try {\n        return await action(boardName, postNumber);\n      } catch (err) {\n        Logger.error(err.stack || err);\n      }\n    });\n  });\n}\n\nexport async function rerenderPosts(targets) {\n  return await forEachPost(targets, async function(boardName, postNumber) {\n    console.log(Tools.translate('Rendering post: >>/$[1]/$[2]', '', boardName, postNumber));\n    return await rerenderPost(boardName, postNumber, { nogenerate: true });\n  });\n}\n\nasync function rebuildPostSearchIndex(boardName, postNumber) {\n  let key = `${boardName}:${postNumber}`;\n  let post = await getPost(boardName, postNumber);\n  await Search.updatePostIndex(boardName, postNumber, (body) => {\n    body.plainText = post.plainText;\n    body.subject = post.subject;\n    body.archived = !!post.archived;\n    return body;\n  });\n}\n\nexport async function rebuildSearchIndex(targets) {\n  return await forEachPost(targets || {}, async function(boardName, postNumber) {\n    console.log(Tools.translate('Rebuilding post search index: >>/$[1]/$[2]', '', boardName, postNumber));\n    return await rebuildPostSearchIndex(boardName, postNumber);\n  });\n}\n\nexport async function copyPosts({ sourceBoardName, postNumbers, targetBoardName, initialPostNumber }) {\n  let targetBoard = Board.board(targetBoardName);\n  if (!targetBoard) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  let posts = await getPosts(sourceBoardName, postNumbers, {\n    withFileInfos: true,\n    withReferences: true,\n    withExtraData: true\n  });\n  let postNumberMap = posts.reduce((acc, post, index) => {\n    acc[post.number] = initialPostNumber + index;\n    return acc;\n  }, {});\n  let sourcePath = `${__dirname}/../../public/${sourceBoardName}/src`;\n  let sourceThumbPath = `${__dirname}/../../public/${sourceBoardName}/thumb`;\n  let targetPath = `${__dirname}/../../public/${targetBoardName}/src`;\n  let targetThumbPath = `${__dirname}/../../public/${targetBoardName}/thumb`;\n  await mkpath(targetPath);\n  await mkpath(targetThumbPath);\n  let toUpdate = [];\n  let toRerender = [];\n  await Tools.series(posts, async function(post) {\n    post.number = postNumberMap[post.number];\n    post.boardName = targetBoardName;\n    post.threadNumber = initialPostNumber;\n    let { fileInfos, referencedPosts, referringPosts, extraData } = post;\n    delete post.fileInfos;\n    delete post.referencedPosts;\n    delete post.referringPosts;\n    delete post.extraData;\n    if (post.hasOwnProperty('bannedFor')) {\n      delete post.bannedFor;\n    }\n    if (post.rawText) {\n      let text = PostReferencesModel.replacePostLinks(post.rawText, sourceBoardName, referencedPosts, postNumberMap);\n      if (text !== post.rawText) {\n        post.text = await markup(targetBoardName, text, {\n          markupModes: post.markup,\n          accessLevel: post.user.level\n        });\n        post.plainText = Renderer.plainText(text, { brToNewline: true });\n      }\n    }\n    referencedPosts = PostReferencesModel.replacePostReferences(referencedPosts, {\n      boardName: sourceBoardName,\n      threadNumber: post.threadNumber\n    }, {\n      boardName: targetBoardName,\n      threadNumber: initialPostNumber\n    }, postNumberMap, toUpdate);\n    referringPosts = PostReferencesModel.replacePostReferences(referringPosts, {\n      boardName: sourceBoardName,\n      threadNumber: post.threadNumber\n    }, {\n      boardName: targetBoardName,\n      threadNumber: initialPostNumber\n    }, postNumberMap, toRerender);\n    await Tools.series(fileInfos, async function(fileInfo) {\n      let oldFileName = fileInfo.name;\n      let oldThumbName = fileInfo.thumb.name;\n      let baseName = await IPC.send('fileName');\n      fileInfo.name = fileInfo.name.replace(/^\\d+/, baseName);\n      fileInfo.thumb.name = fileInfo.thumb.name.replace(/^\\d+/, baseName);\n      await FS.copy(`${sourcePath}/${oldFileName}`, `${targetPath}/${fileInfo.name}`);\n      await FS.copy(`${sourceThumbPath}/${oldThumbName}`, `${targetThumbPath}/${fileInfo.thumb.name}`);\n    });\n    await FilesModel.addFilesToPost(targetBoardName, post.number, fileInfos);\n    await PostReferencesModel.storeReferencedPosts(targetBoardName, post.number, referencedPosts);\n    await PostReferencesModel.storeReferringPosts(targetBoardName, post.number, referringPosts);\n    await targetBoard.storeExtraData(post.number, extraData, false);\n    await Posts.setOne(`${targetBoardName}:${post.number}`, post);\n    await UsersModel.addUserPostNumber(post.user.ip, targetBoardName, post.number);\n    await Search.indexPost({\n      boardName: targetBoardName,\n      postNumber: post.number,\n      threadNumber: initialPostNumber,\n      plainText: post.plainText,\n      subject: post.subject\n    });\n  });\n  return {\n    postNumberMap: postNumberMap,\n    toUpdate: toUpdate,\n    toRerender: toRerender\n  };\n}\n\nexport async function rerenderMovedThreadRelatedPosts({ posts, sourceBoardName, targetBoardName, postNumberMap }) {\n  await Tools.series(posts, async function(post) {\n    post = await getPost(post.boardName, post.postNumber, { withReferences: true });\n    if (!post || !post.rawText) {\n      return;\n    }\n    let { referencedPosts } = post;\n    delete post.referencedPosts;\n    delete post.referringPosts;\n    if (post.hasOwnProperty('bannedFor')) {\n      delete post.bannedFor;\n    }\n    if (!post.rawText) {\n      return;\n    }\n    let text = PostReferencesModel.replaceRelatedPostLinks({\n      text: post.rawText,\n      sourceBoardName: sourceBoardName,\n      targetBoardName: targetBoardName,\n      postBoardName: post.boardName,\n      referencedPosts: referencedPosts,\n      postNumberMap: postNumberMap\n    });\n    if (text !== post.rawText) {\n      post.text = await markup(targetBoardName, text, {\n        markupModes: post.markup,\n        accessLevel: post.user.level\n      });\n      post.plainText = Renderer.plainText(text, { brToNewline: true });\n    }\n    let source = post.archived ? ArchivedPosts : Posts;\n    await source.setOne(`${post.boardName}:${post.number}`, post);\n    await Search.updatePostIndex(post.boardName, post.number, (body) => {\n      body.plainText = post.plainText;\n      return body;\n    });\n  });\n}\n\nexport async function updateMovedThreadRelatedPosts({ posts, sourceBoardName, targetBoardName, sourceThreadNumber,\n  targetThreadNumber, postNumberMap }) {\n  await Tools.series(posts, async function(post) {\n    post = await getPost(post.boardName, post.postNumber, { withReferences: true });\n    if (!post) {\n      return;\n    }\n    let { referencedPosts, referringPosts } = post;\n    let source = {\n      boardName: sourceBoardName,\n      threadNumber: sourceThreadNumber\n    };\n    let target = {\n      boardName: targetBoardName,\n      threadNumber: targetThreadNumber\n    };\n    referencedPosts = PostReferencesModel.replaceRelatedPostReferences(referencedPosts, source, target, postNumberMap);\n    referringPosts = PostReferencesModel.replaceRelatedPostReferences(referringPosts, source, target, postNumberMap);\n    await PostReferencesModel.removeReferencedPosts(post.boardName, post.number, { archived: post.archived });\n    await PostReferencesModel.removeReferringPosts(post.boardName, post.number, { archived: post.archived });\n    await PostReferencesModel.storeReferencedPosts(post.boardName, post.number, referencedPosts,\n      { archived: post.archived });\n    await PostReferencesModel.storeReferringPosts(post.boardName, post.number, referringPosts,\n      { archived: post.archived });\n  });\n}\n\nexport async function pushPostToArchive(boardName, postNumber) {\n  let board = Board.board(boardName);\n  if (!board) {\n    return Promise.reject(new Error(Tools.translate('Invalid board')));\n  }\n  let key = `${boardName}:${postNumber}`;\n  let post = await Posts.getOne(key);\n  post.archived = true;\n  await ArchivedPosts.setOne(key, post);\n  await Posts.deleteOne(key);\n  let extraData = await board.loadExtraData(postNumber, false);\n  await board.storeExtraData(postNumber, extraData, true);\n  await board.removeExtraData(postNumber, false);\n  await Search.updatePostIndex(boardName, postNumber, (body) => {\n    body.archived = true;\n    return body;\n  });\n  await FilesModel.pushPostFileInfosToArchive(boardName, postNumber);\n}\n"],"sourceRoot":"/source/"}