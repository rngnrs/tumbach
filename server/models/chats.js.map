{"version":3,"sources":["models/chats.js"],"names":["user","lastRequestDate","Date","hash","createUserHash","date","Tools","now","toISOString","Chats","getAll","keys","series","key","Chat","getSomeByScore","Infinity","list","map","msg","text","type","senderHash","chats","pick","length","getChatMessages","boardName","postNumber","chatNumber","board","Error","translate","option","test","testPostNumber","n","chatCountKey","ChatSubchatCount","incrementBy","PostsModel","getPost","post","receiver","receiverHash","getSome","messages","ChatMembers","members","addSome","ip","hashpass","member","find","addOne","valueOf","ttl","SECOND","expire","message","addChatMessage","deleteOne","deleteChatMessages","parse","stringify","crypto"],"mappings":"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","file":"models/chats.js","sourcesContent":["import _ from 'underscore';\nimport Crypto from 'crypto';\n\nimport * as PostsModel from './posts';\nimport Board from '../boards/board';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\nimport Key from '../storage/key';\nimport OrderedSet from '../storage/ordered-set';\nimport redisClient from '../storage/redis-client-factory';\nimport UnorderedSet from '../storage/unordered-set';\n\nlet Chat = new OrderedSet(redisClient(), 'chat');\nlet ChatMembers = new UnorderedSet(redisClient(), 'chatMembers');\nlet Chats = new UnorderedSet(redisClient(), 'chats', {\n  parse: false,\n  stringify: false\n});\nlet ChatSubchatCount = new Key(redisClient(), 'chatSubchatCount');\n\nfunction createUserHash(user) {\n  return Tools.crypto('sha256', user.hashpass || user.ip);\n}\n\nexport async function getChatMessages(user, lastRequestDate) {\n  lastRequestDate = +(new Date(lastRequestDate)) || 0;\n  let hash = createUserHash(user);\n  let date = Tools.now().toISOString();\n  let keys = await Chats.getAll(hash);\n  let chats = await Tools.series(keys, async function(key) {\n    let list = await Chat.getSomeByScore(lastRequestDate, Infinity, key);\n    return (list || []).map((msg) => {\n      return {\n        text: msg.text,\n        date: msg.date,\n        type: ((hash === msg.senderHash) ? 'out' : 'in')\n      };\n    });\n  }, {});\n  return {\n    lastRequestDate: date,\n    chats: _(chats).pick((list) => { return list.length > 0; })\n  };\n}\n\nexport async function addChatMessage({ user, boardName, postNumber, chatNumber, text } = {}) {\n  if (!Board.board(boardName)) {\n    throw new Error(Tools.translate('Invalid board'));\n  }\n  postNumber = Tools.option(postNumber, 'number', 0, { test: Tools.testPostNumber });\n  if (!postNumber) {\n    throw new Error(Tools.translate('Invalid post number'));\n  }\n  if (!text || typeof text !== 'string') {\n    throw new Error(Tools.translate('Message is empty'));\n  }\n  chatNumber = Tools.option(chatNumber, 'number', 0, { test: (n) => { return n > 0; } });\n  let chatCountKey = `${boardName}:${postNumber}`;\n  if (!chatNumber) {\n    chatNumber = await ChatSubchatCount.incrementBy(1, chatCountKey);\n  }\n  let key = `${boardName}:${postNumber}:${chatNumber}`;\n  let senderHash = createUserHash(user);\n  let date = Tools.now();\n  let post = await PostsModel.getPost(boardName, postNumber);\n  if (!post) {\n    throw new Error(Tools.translate('No such post'));\n  }\n  let receiver = post.user;\n  let receiverHash = createUserHash(receiver);\n  let messages = await Chat.getSome(0, 0, key);\n  if (messages.length > 0 && messages[0].senderHash !== senderHash && messages[0].receiverHash !== senderHash) {\n    throw new Error(Tools.translate('Somebody is chatting here already'));\n  }\n  let members = await ChatMembers.getAll(key);\n  if (members.length < 2) {\n    await ChatMembers.addSome([{\n      hash: senderHash,\n      ip: user.ip,\n      hashpass: user.hashpass\n    }, {\n      hash: receiverHash,\n      ip: receiver.ip,\n      hashpass: receiver.hashpass\n    }], key);\n  } else {\n    if (senderHash === receiverHash) {\n      let member = _(members).find((member) => { return member.hash !== senderHash; });\n      if (member) {\n        receiverHash = member.hash;\n        receiver = {\n          ip: member.ip,\n          hashpass: member.hashpass\n        };\n      }\n    }\n    await Chats.addOne(key, senderHash);\n  }\n  await Chats.addOne(key, receiverHash);\n  await Chat.addOne({\n    text: text,\n    date: date.toISOString(),\n    senderHash: senderHash,\n    receiverHash: receiverHash\n  }, date.valueOf(), key);\n  let ttl = config('server.chat.ttl') * Tools.SECOND;\n  await Chats.expire(ttl, senderHash);\n  await Chats.expire(ttl, receiverHash);\n  await Chat.expire(ttl, key);\n  await ChatMembers.expire(ttl, key);\n  await ChatSubchatCount.expire(ttl, chatCountKey);\n  return {\n    message: {\n      text: text,\n      date: date.toISOString()\n    },\n    chatNumber: chatNumber,\n    senderHash: senderHash,\n    receiverHash: receiverHash,\n    receiver: receiver\n  };\n}\n\nexport async function deleteChatMessages({ user, boardName, postNumber, chatNumber } = {}) {\n  await Chats.deleteOne(`${boardName}:${postNumber}:${chatNumber}`, createUserHash(user));\n}\n"],"sourceRoot":"/source/"}