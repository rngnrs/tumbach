{"version":3,"sources":["models/post-references.js"],"names":["post","key","boardName","number","referringSource","archived","ArchivedReferringPosts","ReferringPosts","referencedSource","ArchivedReferencedPosts","ReferencedPosts","getAll","referringPosts","referencedPosts","sortedReferences","addReferencesToPost","nogenerate","Tools","series","ref","refKey","setOne","postNumber","threadNumber","createdAt","each","IPC","render","addReferencedPosts","deleteOne","filter","forEach","delete","removeReferences","removingThread","PostsModel","rerenderPost","rerenderReferringPosts","source","storeReferencedPosts","storeReferringPosts","removeReferencedPosts","removeReferringPosts","replacePostLinks","replaceRelatedPostLinks","replacePostReferences","replaceRelatedPostReferences","references","toArray","sort","a","b","localeCompare","map","reference","text","sourceBoardName","postNumberMap","newPostNumber","replacement","replace","RegExp","targetBoardName","postBoardName","hasOwnProperty","target","related","sourceThreadNumber","targetThreadNumber","push"],"mappings":"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","file":"models/post-references.js","sourcesContent":["import _ from 'underscore';\n\nimport * as IPC from '../helpers/ipc';\nimport * as Tools from '../helpers/tools';\nimport * as PostsModel from './posts';\nimport Hash from '../storage/hash';\nimport redisClient from '../storage/redis-client-factory';\nimport sqlClient from '../storage/sql-client-factory';\n\nlet ArchivedReferringPosts = new Hash(sqlClient(), 'archivedReferringPosts');\nlet ArchivedReferencedPosts = new Hash(sqlClient(), 'archivedReferencedPosts');\nlet ReferringPosts = new Hash(redisClient(), 'referringPosts');\nlet ReferencedPosts = new Hash(redisClient(), 'referencedPosts');\n\nfunction sortedReferences(references) {\n  return _(references).toArray().sort((a, b) => {\n    return (a.createdAt && b.createdAt && a.createdAt.localeCompare(b.createdAt))\n      || a.boardName.localeCompare(b.boardName) || (a.postNumber - b.postNumber);\n  }).map((reference) => {\n    delete reference.createdAt;\n    return reference;\n  });\n}\n\nexport async function addReferencesToPost(post) {\n  let key = `${post.boardName}:${post.number}`;\n  let referringSource = post.archived ? ArchivedReferringPosts : ReferringPosts;\n  let referencedSource = post.archived ? ArchivedReferencedPosts : ReferencedPosts;\n  let referringPosts = await referringSource.getAll(key);\n  let referencedPosts = await referencedSource.getAll(key);\n  post.referringPosts = sortedReferences(referringPosts);\n  post.referencedPosts = sortedReferences(referencedPosts);\n}\n\nexport async function addReferencedPosts(post, referencedPosts, { nogenerate, archived } = {}) {\n  let key = `${post.boardName}:${post.number}`;\n  let referringSource = post.archived ? ArchivedReferringPosts : ReferringPosts;\n  let referencedSource = post.archived ? ArchivedReferencedPosts : ReferencedPosts;\n  //TODO: Optimise (hmset)\n  await Tools.series(referencedPosts, async function(ref, refKey) {\n    await referencedSource.setOne(refKey, ref, key);\n    await referringSource.setOne(key, {\n      boardName: post.boardName,\n      postNumber: post.number,\n      threadNumber: post.threadNumber,\n      createdAt: refKey.createdAt\n    }, refKey);\n  });\n  if (!nogenerate) {\n    _(referencedPosts).each((ref, refKey) => {\n      if (ref.boardName !== post.boardName || ref.threadNumber !== post.threadNumber) {\n        IPC.render(ref.boardName, ref.threadNumber, ref.postNumber, 'edit');\n      }\n    });\n  }\n}\n\nexport async function removeReferences({ boardName, number, threadNumber, archived }, { nogenerate } = {}) {\n  let key = `${boardName}:${number}`;\n  let referencedSource = archived ? ArchivedReferencedPosts : ReferencedPosts;\n  let referencedPosts = await referencedSource.getAll(key);\n  await Tools.series(referencedPosts, async function(ref, refKey) {\n    await ReferringPosts.deleteOne(key, refKey);\n    await ArchivedReferringPosts.deleteOne(key, refKey);\n  });\n  if (!nogenerate) {\n    _(referencedPosts).filter((ref) => {\n      return (ref.boardName !== boardName) || (ref.threadNumber !== threadNumber);\n    }).forEach((ref) => {\n      IPC.render(ref.boardName, ref.threadNumber, ref.postNumber, 'edit');\n    });\n  }\n  referencedSource.delete(key);\n}\n\nexport async function rerenderReferringPosts({ boardName, number, threadNumber, archived }, { removingThread } = {}) {\n  let referringSource = archived ? ArchivedReferringPosts : ReferringPosts;\n  let referringPosts = await referringSource.getAll(`${boardName}:${number}`);\n  referringPosts = _(referringPosts).filter((ref) => {\n    return !removingThread || ref.boardName !== boardName || ref.threadNumber !== threadNumber;\n  });\n  await Tools.series(referringPosts, async function(ref) {\n    return await PostsModel.rerenderPost(ref.boardName, ref.postNumber);\n  });\n}\n\nexport function replacePostLinks(text, sourceBoardName, referencedPosts, postNumberMap) {\n  if (!text) {\n    return text;\n  }\n  referencedPosts.filter((ref) => { return ref.boardName === sourceBoardName; }).forEach((ref) => {\n    let newPostNumber = postNumberMap[ref.postNumber];\n    let replacement = newPostNumber ? `>>${newPostNumber}` : `>>/${sourceBoardName}/${ref.postNumber}`;\n    text = text.replace(new RegExp(`>>${ref.postNumber}`, 'g'), replacement);\n  });\n  return text;\n}\n\nexport function replaceRelatedPostLinks({ text, sourceBoardName, targetBoardName, postBoardName, referencedPosts,\n  postNumberMap }) {\n  if (!text) {\n    return text;\n  }\n  referencedPosts.filter(ref => postNumberMap.hasOwnProperty(ref.postNumber)).forEach((ref) => {\n    let replacement = `>>/${targetBoardName}/${postNumberMap[ref.postNumber]}`;\n    if (postBoardName === sourceBoardName) {\n      text = text.replace(new RegExp(`>>${ref.postNumber}`, 'g'), replacement);\n    }\n    text = text.replace(new RegExp(`>>/${sourceBoardName}/${ref.postNumber}`, 'g'), replacement);\n  });\n  return text;\n}\n\nexport function replacePostReferences(references, source, target, postNumberMap, related) {\n  let sourceBoardName = source.boardName;\n  let sourceThreadNumber = source.threadNumber;\n  let targetBoardName = target.boardName;\n  let targetThreadNumber = target.threadNumber;\n  return references.map((ref) => {\n    if (ref.boardName === sourceBoardName && ref.threadNumber === sourceThreadNumber) {\n      return {\n        boardName: targetBoardName,\n        threadNumber: targetThreadNumber,\n        postNumber: postNumberMap[ref.postNumber]\n      };\n    } else {\n      related.push(ref);\n      return ref;\n    }\n  });\n}\n\nexport function replaceRelatedPostReferences(references, source, target, postNumberMap) {\n  let sourceBoardName = source.boardName;\n  let sourceThreadNumber = source.threadNumber;\n  let targetBoardName = target.boardName;\n  let targetThreadNumber = target.threadNumber;\n  return references.map((ref) => {\n    if (ref.boardName === sourceBoardName && ref.threadNumber === sourceThreadNumber) {\n      return {\n        boardName: targetBoardName,\n        threadNumber: targetThreadNumber,\n        postNumber: postNumberMap[ref.postNumber]\n      };\n    } else {\n      return ref;\n    }\n  });\n}\n\nexport async function storeReferencedPosts(boardName, postNumber, referencedPosts, { archived } = {}) {\n  let source = archived ? ArchivedReferencedPosts : ReferencedPosts;\n  await Tools.series(referencedPosts, async function(ref) {\n    await source.setOne(`${ref.boardName}:${ref.postNumber}`, ref, `${boardName}:${postNumber}`);\n  });\n}\n\nexport async function storeReferringPosts(boardName, postNumber, referringPosts, { archived } = {}) {\n  let source = archived ? ArchivedReferringPosts : ReferringPosts;\n  await Tools.series(referringPosts, async function(ref) {\n    source.setOne(`${ref.boardName}:${ref.postNumber}`, ref, `${boardName}:${postNumber}`);\n  });\n}\n\nexport async function removeReferencedPosts(boardName, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedReferencedPosts : ReferencedPosts;\n  source.delete(`${boardName}:${postNumber}`);\n}\n\nexport async function removeReferringPosts(boardName, postNumber, { archived } = {}) {\n  let source = archived ? ArchivedReferringPosts : ReferringPosts;\n  source.delete(`${boardName}:${postNumber}`);\n}\n"],"sourceRoot":"/source/"}