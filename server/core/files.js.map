{"version":3,"sources":["core/files.js"],"names":["url","formFieldName","fields","path","__dirname","v4","proxy","options","timeout","test","audios","split","result","response","recursive","host","port","headers","auth","optons","request","status","Promise","reject","Error","Tools","translate","body","read","data","length","writeFile","file","name","pop","size","setFileRating","substr","getMimeType","mimeType","downloadFile","files","series","filter","remove","catch","err","error","req","stack","fieldName","pick","_1","key","downloadedFiles","concat","hashes","fileHashes","hash","FilesModel","getFileInfosByHashes","fileInfos","existingFiles","map","fileInfo","index","fi","thumbName","thumb","boardName","rating","copy","getFiles","filePath","exists","retry","resolve","setTimeout","delay","f","waitForFile","plugin","IPC","send","baseName","suffix","extname","canonicalSuffix","toLowerCase","suffixMatchesMimeType","defaultSuffixForMimeType","thumbSuffix","thumbnailSuffixForMimeType","generateFileName","thumbPath","dirname","createThumbnail","dimensions","extraData","thumbDimensions","ihash","createFileThumb","post","sizeKB","sizeText","toFixed","selectThumbnailingPlugin","renderPostFileInfo","renderPostFileInfos","transaction","fn","targetFilePath","targetThumbPath","addFile","sourceFilePath","sourceThumbPath","getFileInfoByName","sha1","move","processFile","mkpath","processFiles","diskUsage","tmpFilePath","slice","join","makeTree","write","rename","dir","fileName","isDir","makeDirectory","createFile","content","editFile","oldFileName","oldPath","renameFile","removeTree","deleteFile","canvas","ctx","getContext","drawIcon","img","Image","src","drawImage","pngStream","pipe","createWriteStream","on","generateRandomImage","exec","encoding","stdio","out","replace","value","getImageSize","width","height","resize","quality","resizeImage","parseForm","isAudioType","isVideoType","isPdfType","isImageType","FILE_RATINGS","Set","sync","fileTypePlugins","loadPlugins","id","has","find","match","formFields","formFiles","form","Form","uploadDir","autoFields","autoFiles","maxFieldsSize","parse","mapObject","toArray","flatten","originalFilename"],"mappings":"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","file":"core/files.js","sourcesContent":["import _ from 'underscore';\nimport Canvas from 'canvas';\nimport ChildProcess from 'child_process';\nimport du from 'du';\nimport FS from 'q-io/fs';\nimport FSSync from 'fs';\nimport gm from 'gm';\nimport HTTP from 'q-io/http';\nimport Jdenticon from 'jdenticon';\nimport merge from 'merge';\nimport mkpathSync from 'mkpath';\nimport Multiparty from 'multiparty';\nimport Path from 'path';\nimport promisify from 'promisify-node';\nimport UUID from 'uuid';\n\nimport Board from '../boards/board';\nimport * as FilesModel from '../models/files';\nimport config from '../helpers/config';\nimport * as IPC from '../helpers/ipc';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\nimport vk from '../helpers/vk';\n\nconst mkpath = promisify('mkpath');\n\nconst FILE_RATINGS = new Set(['SFW', 'R-15', 'R-18', 'R-18G']);\n\nmkpathSync.sync(config('system.tmpPath') + '/form');\n\nlet fileTypePlugins = Tools.loadPlugins([`${__dirname}/../file-types`, `${__dirname}/../file-types/custom`]);\n\nfunction setFileRating(file, id, fields) {\n  let rating = fields[`file_${id}_rating`];\n  if (FILE_RATINGS.has(rating)) {\n    file.rating = rating;\n  } else {\n    file.rating = 'SFW';\n  }\n}\n\nasync function downloadFile(url, formFieldName, fields) {\n  let path = `${__dirname}/../../tmp/upload_${UUID.v4()}`;\n  let proxy = config.proxy();\n  let options = { timeout: config('system.httpRequestTimeout') };\n  if (/^vk\\:\\/\\//.test(url)) {\n    let result = await vk('audio.getById', { audios: url.split('/')[2] });\n    options.url = result.response[0].url;\n  } else if (proxy) {\n    options = merge.recursive(options, {\n      host: proxy.host,\n      port: proxy.port,\n      headers: { 'Proxy-Authorization': proxy.auth },\n      path: url,\n    });\n  } else {\n    optons.url = url;\n  }\n  let response = await HTTP.request(options);\n  if (200 !== response.status) {\n    return Promise.reject(new Error(Tools.translate('Failed to download file')));\n  }\n  let data = await response.body.read();\n  if (data.length < 1) {\n    return Promise.reject(new Error(Tools.translate('File is empty')));\n  }\n  await writeFile(path, data);\n  let file = {\n    name: url.split('/').pop(),\n    size: data.length,\n    path: path\n  };\n  setFileRating(file, formFieldName.substr(9), fields);\n  let mimeType = await getMimeType(path);\n  file.mimeType = mimeType;\n  return file;\n}\n\nexport async function getFiles(fields, files) {\n  files = await Tools.series(files.filter((file) => {\n    if (file.size < 1) {\n      FS.remove(file.path).catch((err) => { Logger.error(req, err.stack || err); });\n      return false;\n    }\n    return true;\n  }), async function(file) {\n    setFileRating(file, file.fieldName.substr(5), fields);\n    let mimeType = await getMimeType(file.path);\n    file.mimeType = mimeType;\n    return file;\n  }, true);\n  let downloadedFiles = await Tools.series(_(fields).pick((_1, key) => {\n    return /^file_url_\\S+$/.test(key);\n  }), async function(url, formFieldName) {\n    return await downloadFile(url, formFieldName, fields);\n  }, true);\n  files = files.concat(downloadedFiles);\n  let hashes = (typeof fields.fileHashes === 'string') ? fields.fileHashes.split(',').filter(hash => !!hash) : [];\n  let fileInfos = await FilesModel.getFileInfosByHashes(hashes);\n  let existingFiles = fileInfos.map((fileInfo, index) => {\n    let fi = {\n      name: fileInfo.name,\n      thumbName: fileInfo.thumb.name,\n      size: fileInfo.size,\n      boardName: fileInfo.boardName,\n      mimeType: fileInfo.mimeType,\n      rating: fileInfo.rating,\n      copy: true\n    };\n    setFileRating(fi, hashes[index], fields);\n    return fi;\n  });\n  return files.concat(existingFiles);\n}\n\nasync function waitForFile(filePath, options) { //TODO: That is not okay\n  let delay = 50;\n  let retry = 4;\n  async function f() {\n    let exists = await FS.exists(filePath);\n    if (!exists) {\n      if (!retry) {\n        return Promise.reject(new Error(Tools.translate('Failed to copy file')));\n      }\n      --retry;\n      await new Promise((resolve, reject) => {\n        setTimeout(resolve, delay);\n      });\n      await f();\n    }\n  }\n  await f();\n}\n\nasync function generateFileName(file, plugin) {\n  let baseName = await IPC.send('fileName');\n  let suffix = Path.extname(file.name);\n  if (typeof suffix === 'string') {\n    suffix = suffix.substr(1);\n  }\n  let canonicalSuffix = suffix ? suffix.toLowerCase() : '';\n  if (!suffix || !plugin.suffixMatchesMimeType(canonicalSuffix, file.mimeType)) {\n    suffix = plugin.defaultSuffixForMimeType(file.mimeType);\n  }\n  let thumbSuffix = suffix;\n  if (typeof plugin.thumbnailSuffixForMimeType === 'function') {\n    thumbSuffix = plugin.thumbnailSuffixForMimeType(file.mimeType) || canonicalSuffix;\n  }\n  return {\n    name: `${baseName}.${suffix}`,\n    thumbName: `${baseName}s.${thumbSuffix}`\n  };\n}\n\nasync function createFileThumb(file, plugin) {\n  let thumbPath = `${Path.dirname(file.path)}/${UUID.v4()}`;\n  file.thumbPath = thumbPath;\n  let result = await plugin.createThumbnail(file, thumbPath, file.path) || {};\n  file.dimensions = result.dimensions || null;\n  file.extraData = result.extraData || null;\n  file.thumbDimensions = result.thumbDimensions;\n  if (result.ihash) {\n    file.ihash = result.ihash;\n  }\n}\n\nexport function selectThumbnailingPlugin(mimeType) {\n  //TODO: Cache\n  return _(fileTypePlugins).find(plugin => plugin.match(mimeType));\n}\n\nexport async function renderPostFileInfos(post) {\n  if (!post) {\n    return;\n  }\n  await Tools.series(post.fileInfos || [], async function(fileInfo) {\n    if (!fileInfo) {\n      return;\n    }\n    fileInfo.sizeKB = fileInfo.size / 1024;\n    fileInfo.sizeText = fileInfo.sizeKB.toFixed(2) + ' ' + Tools.translate('KB');\n    let plugin = selectThumbnailingPlugin(fileInfo.mimeType);\n    if (!plugin) {\n      let err = new Error(Tools.translate('Unsupported file type: $[1]', '', fileInfo.mimeType));\n      Logger.error(err.stack || err);\n      return;\n    }\n    if (typeof plugin.renderPostFileInfo !== 'function') {\n      return;\n    }\n    await plugin.renderPostFileInfo(fileInfo);\n  });\n}\n\nexport function parseForm(req = {}) {\n  let { formFields, formFiles } = req;\n  if (formFields) {\n    return {\n      fields: formFields,\n      files: formFiles || []\n    };\n  }\n  let form = new Multiparty.Form();\n  form.uploadDir = config('system.tmpPath') + '/form';\n  form.autoFields = true;\n  form.autoFiles = true;\n  form.maxFieldsSize = config('system.maxFormFieldsSize');\n  return new Promise((resolve, reject) => {\n    form.parse(req, (err, fields, files) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve({\n        fields: _(fields).mapObject((value, key) => { return (1 === value.length) ? value[0] : value; }),\n        files: _(_(files).toArray()).flatten().map((file) => {\n          file.name = file.originalFilename;\n          return file;\n        })\n      });\n    });\n  });\n}\n\nasync function processFile(boardName, file, transaction) {\n  let plugin = selectThumbnailingPlugin(file.mimeType);\n  if (!plugin) {\n    return Promise.reject(new Error(Tools.translate('Unsupported file type: $[1]', '', file.mimeType)));\n  }\n  let fn = await generateFileName(file, plugin);\n  let targetFilePath = `${__dirname}/../../public/${boardName}/src/${fn.name}`;\n  var targetThumbPath = `${__dirname}/../../public/${boardName}/thumb/${fn.thumbName}`;\n  transaction.addFile(targetFilePath);\n  transaction.addFile(targetThumbPath);\n  if (file.copy) {\n    let sourceFilePath = `${__dirname}/../../public/${file.boardName}/src/${file.name}`;\n    let sourceThumbPath = `${__dirname}/../../public/${file.boardName}/thumb/${file.thumbName}`;\n    await FS.copy(sourceFilePath, targetFilePath);\n    await FS.copy(sourceThumbPath, targetThumbPath);\n    await waitForFile(targetThumbPath); //TODO: Fix\n    let fileInfo = await FilesModel.getFileInfoByName(file.name);\n    return {\n      dimensions: fileInfo.dimensions,\n      extraData: fileInfo.extraData,\n      hash: fileInfo.hash,\n      ihash: fileInfo.ihash || null,\n      mimeType: fileInfo.mimeType,\n      name: fn.name,\n      rating: file.rating,\n      size: fileInfo.size,\n      thumb: {\n        dimensions: fileInfo.thumb.dimensions,\n        name: fn.thumbName\n      }\n    };\n  } else {\n    let sourceFilePath = file.path;\n    if (!file.hash) {\n      let data = await FS.read(file.path, 'b');\n      file.hash = Tools.sha1(data);\n    }\n    await createFileThumb(file, plugin);\n    await FS.move(sourceFilePath, targetFilePath);\n    transaction.addFile(file.thumbPath);\n    await FS.move(file.thumbPath, targetThumbPath);\n    await waitForFile(targetThumbPath); //TODO: Fix\n    return {\n      dimensions: file.dimensions,\n      extraData: file.extraData,\n      hash: file.hash,\n      ihash: file.ihash || null,\n      mimeType: file.mimeType,\n      name: fn.name,\n      rating: file.rating,\n      size: file.size,\n      thumb: {\n        dimensions: file.thumbDimensions,\n        name: fn.thumbName\n      }\n    };\n  }\n}\n\nexport async function processFiles(boardName, files, transaction) {\n  if (files.length < 1) {\n    return [];\n  }\n  let path = `${__dirname}/../../public/${boardName}`;\n  await mkpath(`${path}/src`);\n  await mkpath(`${path}/thumb`);\n  return await Tools.series(files, async function(file) {\n    return await processFile(boardName, file, transaction);\n  }, true);\n}\n\nexport async function diskUsage(path) {\n  return await new Promise((resolve, reject) => {\n    du(path, (err, size) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(size);\n    });\n  });\n}\n\nexport async function writeFile(filePath, data) {\n  let tmpFilePath = `${filePath}.tmp`;\n  let path = filePath.split('/').slice(0, -1).join('/');\n  let exists = await FS.exists(path);\n  if (!exists) {\n    await FS.makeTree(path);\n  }\n  await FS.write(tmpFilePath, data);\n  await FS.rename(tmpFilePath, filePath);\n}\n\nexport async function createFile(dir, fileName, { file, isDir } = {}) {\n  if (dir.slice(-1)[0] !== '/') {\n    dir += '/';\n  }\n  let path = `${__dirname}/../../${dir}${fileName}`;\n  if (isDir) {\n    await FS.makeDirectory(path);\n  }\n  if (file) {\n    await FS.move(file.path, path);\n  } else {\n    await writeFile(path, '');\n  }\n}\n\nexport async function editFile(fileName, content) {\n  await writeFile(`${__dirname}/../../${fileName}`, content);\n}\n\nexport async function renameFile(oldFileName, fileName) {\n  let oldPath = `${__dirname}/../../${oldFileName}`;\n  await FS.rename(oldPath, oldPath.split('/').slice(0, -1).join('/') + '/' + fileName);\n}\n\nexport async function deleteFile(fileName) {\n  await FS.removeTree(`${__dirname}/../../${fileName}`);\n}\n\nexport async function generateRandomImage(hash, mimeType, thumbPath) {\n  let canvas = new Canvas(200, 200);\n  let ctx = canvas.getContext('2d');\n  Jdenticon.drawIcon(ctx, hash, 200);\n  let data = await FS.read(`${__dirname}/../../misc/thumbs/${mimeType}.png`, 'b');\n  let img = new Canvas.Image();\n  img.src = data;\n  ctx.drawImage(img, 0, 0, 200, 200);\n  return await new Promise((resolve, reject) => {\n    canvas.pngStream().pipe(FSSync.createWriteStream(thumbPath).on('error', reject).on('finish', resolve));\n  });\n}\n\nexport async function getMimeType(fileName) {\n  if (!fileName || typeof fileName !== 'string') {\n    return null;\n  }\n  try {\n    return await new Promise((resolve, reject) => {\n      ChildProcess.exec(`file --brief --mime-type ${fileName}`, {\n        timeout: config('system.mimeTypeRetrievingTimeout'),\n        encoding: 'utf8',\n        stdio: [0, 'pipe', null]\n      }, (err, out) => {\n        if (err) {\n          return reject(err);\n        }\n        resolve(out ? out.replace(/\\r*\\n+/g, '') : null);\n      });\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n    return null;\n  }\n}\n\nexport function isAudioType(mimeType) {\n  return 'application/ogg' === mimeType || /^audio\\//.test(mimeType);\n}\n\nexport function isVideoType(mimeType) {\n  return /^video\\//.test(mimeType);\n}\n\nexport function isPdfType(mimeType) {\n  return 'application/pdf' === mimeType;\n}\n\nexport function isImageType(mimeType) {\n  return /^image\\//.test(mimeType);\n}\n\nexport async function getImageSize(fileName) {\n  return new Promise((resolve, reject) => {\n    gm(fileName).size((err, value) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(value);\n    });\n  });\n}\n\nexport async function resizeImage(fileName, width, height, options) {\n  return new Promise((resolve, reject) => {\n    gm(fileName).resize(width, height, options).quality(100).write(fileName, (err) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve();\n    });\n  });\n}\n"],"sourceRoot":"/source/"}