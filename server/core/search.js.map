{"version":3,"sources":["core/search.js"],"names":["boardName","postNumber","threadNumber","plainText","subject","es","index","INDEX_NAME","type","id","body","error","stack","indexPost","get","data","_source","getPostIndex","transformer","updatePostIndex","delete","removePostIndex","requiredPhrases","excludedPhrases","possiblePhrases","page","Tools","option","test","p","limit","startFrom","query","bool","isArray","length","must","map","mapPhrase","concat","match_phrase","must_not","should","search","from","size","result","posts","hits","hit","_id","split","archived","number","total","max","findPosts","Client","host","err","phrase"],"mappings":"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","file":"search.js","sourcesContent":["import _ from 'underscore';\nimport Elasticsearch from 'elasticsearch';\n\nimport config from '../helpers/config';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\ntry {\n  var es = new Elasticsearch.Client({ host: config('system.elasticsearch.host') });\n} catch (err) {\n  var es = null;\n}\n\nconst INDEX_NAME = 'ololord.js';\n\nexport async function indexPost({ boardName, postNumber, threadNumber, plainText, subject }) {\n  try {\n    await es.index({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`,\n      body: {\n        plainText: plainText,\n        subject: subject,\n        boardName: boardName,\n        threadNumber: threadNumber\n      }\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nexport async function getPostIndex(boardName, postNumber) {\n  try {\n    let data = await es.get({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`\n    });\n    return data._source;\n  } catch (err) {\n    Logger.error(err.stack || err);\n    return { _source: {} };\n  }\n}\n\nexport async function updatePostIndex(boardName, postNumber, transformer) {\n  if (typeof transformer !== 'function') {\n    return;\n  }\n  try {\n    let body = await getPostIndex(boardName, postNumber);\n    body = await transformer(body);\n    await es.index({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`,\n      body: body\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\n\nexport async function removePostIndex(boardName, postNumber) {\n  try {\n    await es.delete({\n      index: INDEX_NAME,\n      type: 'posts',\n      id: `${boardName}:${postNumber}`\n    });\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n}\n\nfunction mapPhrase(phrase) {\n  return {\n    bool: {\n      should: [\n        { match_phrase: { plainText: phrase } },\n        { match_phrase: { subject: phrase } }\n      ]\n    }\n  };\n}\n\nexport async function findPosts({ requiredPhrases, excludedPhrases, possiblePhrases }, { boardName, page }) {\n  page = Tools.option(page, 'number', 0, { test: (p) => { return p >= 0; } });\n  let limit = config('system.search.maxResultCount');\n  let startFrom = page * limit;\n  let query = { bool: {} };\n  if (_(requiredPhrases).isArray() && requiredPhrases.length > 0) {\n    query.bool.must = requiredPhrases.map(mapPhrase);\n  }\n  if (boardName && typeof boardName === 'string') {\n    query.bool.must = (query.bool.must || []).concat({ match_phrase: { boardName: boardName } });\n  }\n  if (_(excludedPhrases).isArray() && excludedPhrases.length > 0) {\n    query.bool.must_not = excludedPhrases.map(mapPhrase);\n  }\n  if (_(possiblePhrases).isArray() && possiblePhrases.length > 0) {\n      if (_(requiredPhrases).isArray() && requiredPhrases.length > 0) {\n        query.bool.should = possiblePhrases.map(mapPhrase);\n      } else {\n        query.bool.must = (query.bool.must || []).concat({ bool: { should: possiblePhrases.map(mapPhrase) } });\n      }\n  }\n  let result = await es.search({\n    index: INDEX_NAME,\n    type: 'posts',\n    from: startFrom,\n    size: limit,\n    body: { query: query }\n  });\n  return {\n    posts: result.hits.hits.map((hit) => {\n      let [boardName, postNumber] = hit._id.split(':');\n      let { threadNumber, plainText, subject, archived } = hit._source;\n      return {\n        boardName: boardName,\n        number: +postNumber,\n        threadNumber: +threadNumber,\n        plainText: plainText,\n        subject: subject,\n        archived: !!archived\n      };\n    }),\n    total: result.hits.total,\n    max: limit\n  };\n}\n"]}