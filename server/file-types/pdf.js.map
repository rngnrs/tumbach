{"version":3,"sources":["file-types/pdf.js"],"names":["file","thumbPath","path","Promise","resolve","reject","png","progressive","force","resize","max","toFile","err","thumbInfo","Files","getImageSize","Error","Tools","translate","thumbDimensions","width","height","createThumbnail","match","suffixMatchesMimeType","defaultSuffixForMimeType","thumbnailSuffixForMimeType","mimeType","isPdfType","suffix"],"mappings":";;;;;;;;uDAqBO,iBAA+BA,IAA/B,EAAqCC,SAArC,EAAgDC,IAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACC,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACrC,mCAAMH,IAAN,EACGI,GADH,CACO,EAACC,aAAa,IAAd,EAAoBC,OAAO,IAA3B,EADP,EAEGC,MAFH,CAEU,GAFV,EAEe,GAFf,EAGGC,GAHH,GAIGC,MAJH,CAIUV,SAJV,EAIqB,UAACW,GAAD,EAAS;AAC1B,oBAAIA,GAAJ,EAAS;AACP,yBAAOP,OAAOO,GAAP,CAAP;AACD;AACDR;AACD,eATH;AAUD,aAXK,CADD;;AAAA;AAaDS,qBAbC,GAaWC,MAAMC,YAAN,CAAmBd,SAAnB,CAbX;;AAAA,gBAcAY,SAdA;AAAA;AAAA;AAAA;;AAAA,kBAeG,IAAIG,KAAJ,CAAUC,MAAMC,SAAN,CAAgB,qCAAhB,EAAuD,EAAvD,EAA2DjB,SAA3D,CAAV,CAfH;;AAAA;AAAA,6CAiBE;AACLkB,+BAAiB;AACfC,uBAAOP,UAAUO,KADF;AAEfC,wBAAQR,UAAUQ;AAFH;AADZ,aAjBF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;kBAAeC,e;;;;;QAhBNC,K,GAAAA,K;QAIAC,qB,GAAAA,qB;QAIAC,wB,GAAAA,wB;QAIAC,0B,GAAAA,0B;;AAjBhB;;;;AAEA;;IAAYZ,K;;AACZ;;IAAYG,K;;;;;;;;AAEL,SAASM,KAAT,CAAeI,QAAf,EAAyB;AAC9B,SAAOb,MAAMc,SAAN,CAAgBD,QAAhB,CAAP;AACD;;AAEM,SAASH,qBAAT,CAA+BK,MAA/B,EAAuCF,QAAvC,EAAiD;AACtD,SAAO,UAAUE,MAAV,IAAoB,sBAAsBF,QAAjD;AACD;;AAEM,SAASF,wBAAT,CAAkCE,QAAlC,EAA4C;AACjD,SAAQ,sBAAsBA,QAAvB,GAAmC,KAAnC,GAA2C,IAAlD;AACD;;AAEM,SAASD,0BAAT,CAAoCC,QAApC,EAA8C;AACnD,SAAQ,sBAAsBA,QAAvB,GAAmC,KAAnC,GAA2C,IAAlD;AACD","file":"pdf.js","sourcesContent":["import sharp from 'sharp';\n\nimport * as Files from '../core/files';\nimport * as Tools from '../helpers/tools';\n\nexport function match(mimeType) {\n  return Files.isPdfType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return 'pdf' === suffix && 'application/pdf' === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return ('application/pdf' === mimeType) ? 'pdf' : null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return ('application/pdf' === mimeType) ? 'png' : null;\n}\n\nexport async function createThumbnail(file, thumbPath, path) {\n  await new Promise((resolve, reject) => {\n    sharp(path)\n      .png({progressive: true, force: true})\n      .resize(200, 200)\n      .max()\n      .toFile(thumbPath, (err) => {\n        if (err) {\n          return reject(err);\n        }\n        resolve();\n      });\n  });\n  let thumbInfo = Files.getImageSize(thumbPath);\n  if (!thumbInfo) {\n    throw new Error(Tools.translate('Failed to identify image file: $[1]', '', thumbPath));\n  }\n  return {\n    thumbDimensions: {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    }\n  };\n}\n"]}