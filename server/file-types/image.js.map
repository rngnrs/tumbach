{"version":3,"sources":["file-types/image.js"],"names":["file","thumbPath","Files","getImageSize","path","info","Error","Tools","translate","Promise","resolve","reject","FSSync","readFile","err","buffer","resize","background","r","g","b","alpha","embed","max","toFormat","thumbnailSuffixForMimeType","mimeType","toFile","thumbInfo","result","dimensions","width","height","thumbDimensions","hash","ihash","toString","createThumbnail","fileInfo","sizeText","renderPostFileInfo","match","suffixMatchesMimeType","defaultSuffixForMimeType","MIME_TYPES_FOR_SUFFIXES","Map","DEFAULT_SUFFIXES_FOR_MIME_TYPES","THUMB_SUFFIXES_FOR_MIME_TYPE","defineMimeTypeSuffixes","extensions","thumbSuffix","isArray","forEach","extension","set","isImageType","suffix","get"],"mappings":"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","file":"image.js","sourcesContent":["import _ from 'underscore';\nimport sharp from 'sharp';\nimport phash from 'phash-image';\nimport FSSync from 'fs';\n\nimport * as Files from '../core/files';\nimport config from '../helpers/config';\nimport * as Tools from '../helpers/tools';\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('image/gif', 'gif', 'png');\ndefineMimeTypeSuffixes('image/jpeg', ['jpeg', 'jpg'], 'jpg');\ndefineMimeTypeSuffixes('image/png', 'png', 'png');\n\nexport function match(mimeType) {\n  return Files.isImageType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath) {\n  let info = await Files.getImageSize(file.path);\n  if (!info) {\n    throw new Error(Tools.translate('Failed to identify image file: $[1]', '', thumbPath));\n  }\n  await new Promise(async (resolve, reject) => {\n    FSSync.readFile(file.path, (err, buffer) => {\n      sharp(buffer)\n        .resize(200, 200)\n        .background({r: 255, g: 255, b: 255, alpha: 0})\n        .embed()\n        .max()\n        .toFormat(thumbnailSuffixForMimeType(file.mimeType))\n        .toFile(thumbPath, (err) => {\n          if (err) {\n            return reject(err);\n          }\n          resolve();\n        });\n    });\n  });\n  let thumbInfo = await Files.getImageSize(thumbPath);\n  if (!thumbInfo) {\n    throw new Error(Tools.translate('Failed to identify image file: $[1]', '', thumbPath));\n  }\n  let result = {\n    dimensions: {\n      width: info.width,\n      height: info.height\n    },\n    thumbDimensions: {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    }\n  };\n  if (config('system.phash.enabled')) {\n    let hash = await phash(thumbPath, true);\n    result.ihash = hash.toString();\n  }\n  return result;\n}\n\nexport async function renderPostFileInfo(fileInfo) {\n  if (fileInfo.dimensions) {\n    fileInfo.sizeText += `, ${fileInfo.dimensions.width}x${fileInfo.dimensions.height}`;\n  }\n  return fileInfo;\n}\n"]}