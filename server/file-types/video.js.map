{"version":3,"sources":["file-types/video.js"],"names":["file","thumbPath","path","Promise","resolve","reject","ffprobe","err","metadata","width","Tools","option","streams","test","w","height","h","result","dimensions","duration","format","bitrate","bit_rate","extraData","durationToString","Math","floor","pngThumbPath","frames","on","save","error","stack","Files","generateRandomImage","hash","mimeType","thumbDimensions","getImageSize","thumbInfo","Error","translate","resizeImage","createThumbnail","fileInfo","sizeText","sizeTooltip","renderPostFileInfo","match","suffixMatchesMimeType","defaultSuffixForMimeType","thumbnailSuffixForMimeType","MIME_TYPES_FOR_SUFFIXES","Map","DEFAULT_SUFFIXES_FOR_MIME_TYPES","THUMB_SUFFIXES_FOR_MIME_TYPE","hours","pad","minutes","seconds","defineMimeTypeSuffixes","extensions","thumbSuffix","isArray","forEach","extension","set","isVideoType","suffix","get"],"mappings":"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","file":"file-types/video.js","sourcesContent":["import _ from 'underscore';\nimport ffmpeg from 'fluent-ffmpeg';\nimport promisify from 'promisify-node';\n\nimport * as Files from '../core/files';\nimport Logger from '../helpers/logger';\nimport * as Tools from '../helpers/tools';\n\nconst MIME_TYPES_FOR_SUFFIXES = new Map();\nconst DEFAULT_SUFFIXES_FOR_MIME_TYPES = new Map();\nconst THUMB_SUFFIXES_FOR_MIME_TYPE = new Map();\n\nfunction durationToString(duration) {\n  duration = Math.floor(+duration);\n  let hours = Tools.pad(Math.floor(duration / 3600), 2, '0');\n  duration %= 3600;\n  let minutes = Tools.pad(Math.floor(duration / 60), 2, '0');\n  let seconds = Tools.pad(duration % 60, 2, '0');\n  return ((hours != '00')? `${hours}:`: '') + `${minutes}:${seconds}`;\n}\n\nfunction defineMimeTypeSuffixes(mimeType, extensions, thumbSuffix) {\n  if (!_(extensions).isArray()) {\n    extensions = [extensions];\n  }\n  extensions.forEach((extension) => { MIME_TYPES_FOR_SUFFIXES.set(extension, mimeType); });\n  DEFAULT_SUFFIXES_FOR_MIME_TYPES.set(mimeType, extensions[0]);\n  THUMB_SUFFIXES_FOR_MIME_TYPE.set(mimeType, thumbSuffix);\n}\n\ndefineMimeTypeSuffixes('video/mp4', 'mp4', 'png');\ndefineMimeTypeSuffixes('video/webm', 'webm', 'png');\n\nexport function match(mimeType) {\n  return Files.isVideoType(mimeType);\n}\n\nexport function suffixMatchesMimeType(suffix, mimeType) {\n  return MIME_TYPES_FOR_SUFFIXES.get(suffix) === mimeType;\n}\n\nexport function defaultSuffixForMimeType(mimeType) {\n  return DEFAULT_SUFFIXES_FOR_MIME_TYPES.get(mimeType) || null;\n}\n\nexport function thumbnailSuffixForMimeType(mimeType) {\n  return THUMB_SUFFIXES_FOR_MIME_TYPE.get(mimeType);\n}\n\nexport async function createThumbnail(file, thumbPath, path) {\n  let metadata = await new Promise((resolve, reject) => {\n    ffmpeg.ffprobe(path, (err, metadata) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(metadata);\n    });\n  });\n  let width = Tools.option(metadata.streams[0].width, 'number', 0, { test: (w) => { return w > 0; } });\n  let height = Tools.option(metadata.streams[0].height, 'number', 0, { test: (h) => { return h > 0; } });\n  let result = {};\n  if (width && height) {\n    result.dimensions = {\n      width: width,\n      height: height\n    };\n  }\n  let duration = metadata.format.duration;\n  let bitrate = +metadata.format.bit_rate;\n  result.extraData = {\n    duration: (+duration ? durationToString(duration) : duration),\n    bitrate: (bitrate ? Math.floor(bitrate / 1024) : 0)\n  };\n  try {\n    let pngThumbPath = thumbPath + '.png';\n    await new Promise((resolve, reject) => {\n      ffmpeg(path).frames(1).on('error', reject).on('end', resolve).save(pngThumbPath);\n    });\n    file.thumbPath = pngThumbPath;\n  } catch (err) {\n    Logger.error(err.stack || err);\n  }\n  if (thumbPath === file.thumbPath) {\n    await Files.generateRandomImage(file.hash, file.mimeType, thumbPath);\n    result.thumbDimensions = {\n      width: 200,\n      height: 200\n    };\n  } else {\n    let thumbInfo = await Files.getImageSize(file.thumbPath);\n    if (!thumbInfo) {\n      throw new Error(Tools.translate('Failed to identify image file: $[1]', '', file.thumbPath));\n    }\n    result.thumbDimensions = {\n      width: thumbInfo.width,\n      height: thumbInfo.height\n    };\n    if (result.thumbDimensions.width > 200 || result.thumbDimensions.height > 200) {\n      await Files.resizeImage(file.thumbPath, 200, 200);\n      let thumbInfo = await Files.getImageSize(file.thumbPath);\n      if (!thumbInfo) {\n        throw new Error(Tools.translate('Failed to identify image file: $[1]', '', file.thumbPath));\n      }\n      result.thumbDimensions = {\n        width: thumbInfo.width,\n        height: thumbInfo.height\n      };\n    }\n  }\n  return result;\n}\n\nexport async function renderPostFileInfo(fileInfo) {\n  if (fileInfo.dimensions) {\n    fileInfo.sizeText += `, ${fileInfo.dimensions.width}x${fileInfo.dimensions.height}`;\n  }\n  let { duration, bitrate } = fileInfo.extraData || {};\n  if (duration) {\n    fileInfo.sizeText += `, ${duration}`;\n  }\n  if (bitrate) {\n    fileInfo.sizeTooltip = `${bitrate} ${Tools.translate('kbps')}`;\n  }\n}\n"],"sourceRoot":"/source/"}