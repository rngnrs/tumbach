{"version":3,"sources":["storage/redis-client-factory.js"],"names":["id","createClient","defaultClient","client","clients","get","set","Map","createOptions","host","port","family","password","db","redisNodes","isArray","length","Cluster","clusterRetryStrategy","times","Math","min","enableReadyCheck","scaleReads","maxRedirections","retryDelayOnFailover","retryDelayOnClusterDown","retryDelayOnTryAgain","redisOptions"],"mappings":";;;;;;;;kBAsCe,UAASA,EAAT,EAAa;AAC1B,MAAIA,OAAO,QAAOA,EAAP,yCAAOA,EAAP,OAAc,QAAd,IAA0B,OAAOA,EAAP,KAAc,SAA/C,CAAJ,EAA+D;AAC7D,WAAOC,cAAP;AACD;AACD,MAAI,CAACD,EAAL,EAAS;AACP,QAAI,CAACE,aAAL,EAAoB;AAClBA,sBAAgBD,cAAhB;AACD;AACD,WAAOC,aAAP;AACD;AACD,MAAIC,SAASC,QAAQC,GAAR,CAAYL,EAAZ,CAAb;AACA,MAAI,CAACG,MAAL,EAAa;AACXA,aAASF,cAAT;AACAG,YAAQE,GAAR,CAAYN,EAAZ,EAAgBG,MAAhB;AACD;AACD,SAAOA,MAAP;AACD,C;;AAtDD;;;;AACA;;;;AAEA;;;;;;AAEA,IAAID,gBAAgB,IAApB;AACA,IAAIE,UAAU,IAAIG,GAAJ,EAAd;;AAEA,SAASC,aAAT,GAAyB;AACvB,SAAO;AACLC,UAAM,sBAAO,mBAAP,CADD;AAELC,UAAM,sBAAO,mBAAP,CAFD;AAGLC,YAAQ,sBAAO,qBAAP,CAHH;AAILC,cAAU,sBAAO,uBAAP,CAJL;AAKLC,QAAI,sBAAO,iBAAP;AALC,GAAP;AAOD;;AAED,SAASZ,YAAT,GAAwB;AACtB,MAAIa,aAAa,sBAAO,oBAAP,CAAjB;AACA,MAAI,qBAAEC,OAAF,CAAUD,UAAV,KAAyBA,WAAWE,MAAX,GAAoB,CAAjD,EAAoD;AAClD,WAAO,IAAI,kBAAMC,OAAV,CAAkBH,UAAlB,EAA8B;AACnCI,4BAAsB,sBAAO,mCAAP,EAA4C,UAACC,KAAD,EAAW;AACzE,eAAOC,KAAKC,GAAL,CAAS,MAAMF,QAAQ,CAAvB,EAA0B,IAA1B,CAAP;AACH,OAFqB,CADa;AAInCG,wBAAkB,sBAAO,+BAAP,CAJiB;AAKnCC,kBAAY,sBAAO,yBAAP,CALuB;AAMnCC,uBAAiB,sBAAO,8BAAP,CANkB;AAOnCC,4BAAsB,sBAAO,mCAAP,CAPa;AAQnCC,+BAAyB,sBAAO,sCAAP,CARU;AASnCC,4BAAsB,sBAAO,mCAAP,CATa;AAUnCC,oBAAcpB;AAVqB,KAA9B,CAAP;AAYD,GAbD,MAaO;AACL,WAAO,sBAAUA,eAAV,CAAP;AACD;AACF","file":"storage/redis-client-factory.js","sourcesContent":["import _ from 'underscore';\nimport Redis from 'ioredis';\n\nimport config from '../helpers/config';\n\nlet defaultClient = null;\nlet clients = new Map();\n\nfunction createOptions() {\n  return {\n    host: config('system.redis.host'),\n    port: config('system.redis.port'),\n    family: config('system.redis.family'),\n    password: config('system.redis.password'),\n    db: config('system.redis.db')\n  }\n};\n\nfunction createClient() {\n  let redisNodes = config('system.redis.nodes');\n  if (_.isArray(redisNodes) && redisNodes.length > 0) {\n    return new Redis.Cluster(redisNodes, {\n      clusterRetryStrategy: config('system.redis.clusterRetryStrategy', (times) => {\n          return Math.min(100 + times * 2, 2000);\n      }),\n      enableReadyCheck: config('system.redis.enableReadyCheck'),\n      scaleReads: config('system.redis.scaleReads'),\n      maxRedirections: config('system.redis.maxRedirections'),\n      retryDelayOnFailover: config('system.redis.retryDelayOnFailover'),\n      retryDelayOnClusterDown: config('system.redis.retryDelayOnClusterDown'),\n      retryDelayOnTryAgain: config('system.redis.retryDelayOnTryAgain'),\n      redisOptions: createOptions()\n    });\n  } else {\n    return new Redis(createOptions());\n  }\n}\n\nexport default function(id) {\n  if (id && (typeof id === 'object' || typeof id === 'boolean')) {\n    return createClient();\n  }\n  if (!id) {\n    if (!defaultClient) {\n      defaultClient = createClient();\n    }\n    return defaultClient;\n  }\n  let client = clients.get(id);\n  if (!client) {\n    client = createClient();\n    clients.set(id, client);\n  }\n  return client;\n}\n"],"sourceRoot":"/source/"}